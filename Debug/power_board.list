
power_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d9c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005f28  08005f28  00006f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f70  08005f70  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005f70  08005f70  00006f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f78  08005f78  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f78  08005f78  00006f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f7c  08005f7c  00006f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005f80  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  08005f8c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08005f8c  0000719c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117bf  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b7  00000000  00000000  000187fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0001aab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd2  00000000  00000000  0001b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215a6  00000000  00000000  0001c5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011268  00000000  00000000  0003db68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d130b  00000000  00000000  0004edd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001200db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040bc  00000000  00000000  00120120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001241dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005f10 	.word	0x08005f10

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08005f10 	.word	0x08005f10

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <INA226_WriteRegister>:
#define CALIBRATION_VALUE   ((int)(0.00512f / (CURRENT_LSB * R_SHUNT))) // best if it's an integer (without mapping)

extern I2C_HandleTypeDef hi2c1;

void INA226_WriteRegister(uint8_t reg, uint16_t value)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af02      	add	r7, sp, #8
 80004fe:	4603      	mov	r3, r0
 8000500:	460a      	mov	r2, r1
 8000502:	71fb      	strb	r3, [r7, #7]
 8000504:	4613      	mov	r3, r2
 8000506:	80bb      	strh	r3, [r7, #4]
    uint8_t data[3];
    data[0] = reg;
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	733b      	strb	r3, [r7, #12]
    data[1] = (value >> 8) & 0xFF;
 800050c:	88bb      	ldrh	r3, [r7, #4]
 800050e:	0a1b      	lsrs	r3, r3, #8
 8000510:	b29b      	uxth	r3, r3
 8000512:	b2db      	uxtb	r3, r3
 8000514:	737b      	strb	r3, [r7, #13]
    data[2] = value & 0xFF;
 8000516:	88bb      	ldrh	r3, [r7, #4]
 8000518:	b2db      	uxtb	r3, r3
 800051a:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&hi2c1, INA226_ADDR, data, 3, HAL_MAX_DELAY);
 800051c:	f107 020c 	add.w	r2, r7, #12
 8000520:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2303      	movs	r3, #3
 8000528:	2180      	movs	r1, #128	@ 0x80
 800052a:	4803      	ldr	r0, [pc, #12]	@ (8000538 <INA226_WriteRegister+0x40>)
 800052c:	f003 f95e 	bl	80037ec <HAL_I2C_Master_Transmit>
}
 8000530:	bf00      	nop
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200000b4 	.word	0x200000b4

0800053c <INA226_ReadRegister>:

uint16_t INA226_ReadRegister(uint8_t reg)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af02      	add	r7, sp, #8
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    HAL_I2C_Master_Transmit(&hi2c1, INA226_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000546:	1dfa      	adds	r2, r7, #7
 8000548:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2301      	movs	r3, #1
 8000550:	2180      	movs	r1, #128	@ 0x80
 8000552:	480d      	ldr	r0, [pc, #52]	@ (8000588 <INA226_ReadRegister+0x4c>)
 8000554:	f003 f94a 	bl	80037ec <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, INA226_ADDR, data, 2, HAL_MAX_DELAY);
 8000558:	f107 020c 	add.w	r2, r7, #12
 800055c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	2302      	movs	r3, #2
 8000564:	2180      	movs	r1, #128	@ 0x80
 8000566:	4808      	ldr	r0, [pc, #32]	@ (8000588 <INA226_ReadRegister+0x4c>)
 8000568:	f003 fa58 	bl	8003a1c <HAL_I2C_Master_Receive>
    return (data[0] << 8) | data[1];
 800056c:	7b3b      	ldrb	r3, [r7, #12]
 800056e:	b21b      	sxth	r3, r3
 8000570:	021b      	lsls	r3, r3, #8
 8000572:	b21a      	sxth	r2, r3
 8000574:	7b7b      	ldrb	r3, [r7, #13]
 8000576:	b21b      	sxth	r3, r3
 8000578:	4313      	orrs	r3, r2
 800057a:	b21b      	sxth	r3, r3
 800057c:	b29b      	uxth	r3, r3
}
 800057e:	4618      	mov	r0, r3
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	200000b4 	.word	0x200000b4

0800058c <INA226_Init>:

void INA226_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
    INA226_WriteRegister(INA226_REG_CONFIG, 0x4127);
 8000590:	f244 1127 	movw	r1, #16679	@ 0x4127
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff ffaf 	bl	80004f8 <INA226_WriteRegister>
    INA226_WriteRegister(INA226_REG_CALIB, CALIBRATION_VALUE);
 800059a:	f240 41ff 	movw	r1, #1279	@ 0x4ff
 800059e:	2005      	movs	r0, #5
 80005a0:	f7ff ffaa 	bl	80004f8 <INA226_WriteRegister>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <Send_CAN_Message>:
    uint16_t raw = INA226_ReadRegister(INA226_REG_CURRENT);
    return raw * CURRENT_LSB;
}

void Send_CAN_Message(uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b08b      	sub	sp, #44	@ 0x2c
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4604      	mov	r4, r0
 80005b0:	4608      	mov	r0, r1
 80005b2:	4611      	mov	r1, r2
 80005b4:	461a      	mov	r2, r3
 80005b6:	4623      	mov	r3, r4
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	4603      	mov	r3, r0
 80005bc:	71bb      	strb	r3, [r7, #6]
 80005be:	460b      	mov	r3, r1
 80005c0:	717b      	strb	r3, [r7, #5]
 80005c2:	4613      	mov	r3, r2
 80005c4:	713b      	strb	r3, [r7, #4]
    CAN_TxHeaderTypeDef txHeader;
    uint32_t txMailbox;

    txHeader.StdId = 1<<10 | DEVICE_ID;            // Standard 11-bit ID
 80005c6:	f240 532d 	movw	r3, #1325	@ 0x52d
 80005ca:	613b      	str	r3, [r7, #16]
    txHeader.RTR = CAN_RTR_DATA;       // Data frame
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
    txHeader.IDE = CAN_ID_STD;         // Standard frame (not extended)
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
    txHeader.DLC = 8;             // Number of data bytes (1–8)
 80005d4:	2308      	movs	r3, #8
 80005d6:	623b      	str	r3, [r7, #32]
    txHeader.TransmitGlobalTime = DISABLE;
 80005d8:	2300      	movs	r3, #0
 80005da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    static uint8_t data[8];
	data[0] = d0;
 80005de:	4a14      	ldr	r2, [pc, #80]	@ (8000630 <Send_CAN_Message+0x88>)
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	7013      	strb	r3, [r2, #0]
	data[1] = d1;
 80005e4:	4a12      	ldr	r2, [pc, #72]	@ (8000630 <Send_CAN_Message+0x88>)
 80005e6:	79bb      	ldrb	r3, [r7, #6]
 80005e8:	7053      	strb	r3, [r2, #1]
	data[2] = d2;
 80005ea:	4a11      	ldr	r2, [pc, #68]	@ (8000630 <Send_CAN_Message+0x88>)
 80005ec:	797b      	ldrb	r3, [r7, #5]
 80005ee:	7093      	strb	r3, [r2, #2]
	data[3] = d3;
 80005f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000630 <Send_CAN_Message+0x88>)
 80005f2:	793b      	ldrb	r3, [r7, #4]
 80005f4:	70d3      	strb	r3, [r2, #3]
	data[4] = d4;
 80005f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000630 <Send_CAN_Message+0x88>)
 80005f8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80005fc:	7113      	strb	r3, [r2, #4]
	data[5] = d5;
 80005fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000630 <Send_CAN_Message+0x88>)
 8000600:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000604:	7153      	strb	r3, [r2, #5]
	data[6] = d6;
 8000606:	4a0a      	ldr	r2, [pc, #40]	@ (8000630 <Send_CAN_Message+0x88>)
 8000608:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800060c:	7193      	strb	r3, [r2, #6]
	data[7] = d7;
 800060e:	4a08      	ldr	r2, [pc, #32]	@ (8000630 <Send_CAN_Message+0x88>)
 8000610:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000614:	71d3      	strb	r3, [r2, #7]
    HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &txMailbox);
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	f107 0110 	add.w	r1, r7, #16
 800061e:	4a04      	ldr	r2, [pc, #16]	@ (8000630 <Send_CAN_Message+0x88>)
 8000620:	4804      	ldr	r0, [pc, #16]	@ (8000634 <Send_CAN_Message+0x8c>)
 8000622:	f002 f96b 	bl	80028fc <HAL_CAN_AddTxMessage>
}
 8000626:	bf00      	nop
 8000628:	372c      	adds	r7, #44	@ 0x2c
 800062a:	46bd      	mov	sp, r7
 800062c:	bd90      	pop	{r4, r7, pc}
 800062e:	bf00      	nop
 8000630:	20000190 	.word	0x20000190
 8000634:	2000008c 	.word	0x2000008c

08000638 <Power_ON>:

void Power_ON()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ON_5V_GPIO_Port, ON_5V_Pin, GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	2102      	movs	r1, #2
 8000640:	480b      	ldr	r0, [pc, #44]	@ (8000670 <Power_ON+0x38>)
 8000642:	f003 f81f 	bl	8003684 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000646:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800064a:	f000 fd1d 	bl	8001088 <HAL_Delay>
	HAL_GPIO_WritePin(ON_12V_GPIO_Port, ON_12V_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	2101      	movs	r1, #1
 8000652:	4807      	ldr	r0, [pc, #28]	@ (8000670 <Power_ON+0x38>)
 8000654:	f003 f816 	bl	8003684 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000658:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800065c:	f000 fd14 	bl	8001088 <HAL_Delay>
	HAL_GPIO_WritePin(ON_Arm_GPIO_Port, ON_Arm_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2180      	movs	r1, #128	@ 0x80
 8000664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000668:	f003 f80c 	bl	8003684 <HAL_GPIO_WritePin>
	// HAL_Delay(500);
	// HAL_GPIO_WritePin(ON_Motor_GPIO_Port, ON_Motor_Pin, GPIO_PIN_SET);
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	48000400 	.word	0x48000400

08000674 <Power_OFF>:

void Power_OFF()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ON_Motor_GPIO_Port, ON_Motor_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	2140      	movs	r1, #64	@ 0x40
 800067c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000680:	f003 f800 	bl	8003684 <HAL_GPIO_WritePin>
	// HAL_Delay(250);
	HAL_GPIO_WritePin(ON_Arm_GPIO_Port, ON_Arm_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2180      	movs	r1, #128	@ 0x80
 8000688:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068c:	f002 fffa 	bl	8003684 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ON_12V_GPIO_Port, ON_12V_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2101      	movs	r1, #1
 8000694:	4804      	ldr	r0, [pc, #16]	@ (80006a8 <Power_OFF+0x34>)
 8000696:	f002 fff5 	bl	8003684 <HAL_GPIO_WritePin>
	// HAL_Delay(250);
	HAL_GPIO_WritePin(ON_5V_GPIO_Port, ON_5V_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2102      	movs	r1, #2
 800069e:	4802      	ldr	r0, [pc, #8]	@ (80006a8 <Power_OFF+0x34>)
 80006a0:	f002 fff0 	bl	8003684 <HAL_GPIO_WritePin>

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	48000400 	.word	0x48000400

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ae:	b095      	sub	sp, #84	@ 0x54
 80006b0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b2:	f000 fc74 	bl	8000f9e <HAL_Init>

  /* USER CODE BEGIN Init */
  INA226_Init();
 80006b6:	f7ff ff69 	bl	800058c <INA226_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f88b 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f000 f9e5 	bl	8000a8c <MX_GPIO_Init>
  MX_CAN1_Init();
 80006c2:	f000 f93d 	bl	8000940 <MX_CAN1_Init>
  MX_ADC1_Init();
 80006c6:	f000 f8d7 	bl	8000878 <MX_ADC1_Init>
  MX_I2C1_Init();
 80006ca:	f000 f96f 	bl	80009ac <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80006ce:	f000 f9ad 	bl	8000a2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Configure CAN Filter
  CAN_FilterTypeDef canfilter;
  canfilter.FilterActivation = CAN_FILTER_ENABLE;
 80006d2:	2301      	movs	r3, #1
 80006d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  canfilter.FilterBank = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  canfilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
  canfilter.FilterIdHigh = 0x0000; // Accept all IDs (or filter specific ones)
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  canfilter.FilterIdLow = 0x0000;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  canfilter.FilterMaskIdHigh = 0x0000;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  canfilter.FilterMaskIdLow = 0x0000;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  canfilter.FilterMode = CAN_FILTERMODE_IDMASK;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]
  canfilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80006f2:	2301      	movs	r3, #1
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canfilter);
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	4619      	mov	r1, r3
 80006fc:	4833      	ldr	r0, [pc, #204]	@ (80007cc <main+0x120>)
 80006fe:	f001 ffef 	bl	80026e0 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 8000702:	4832      	ldr	r0, [pc, #200]	@ (80007cc <main+0x120>)
 8000704:	f002 f8b6 	bl	8002874 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 8000708:	2101      	movs	r1, #1
 800070a:	4830      	ldr	r0, [pc, #192]	@ (80007cc <main+0x120>)
 800070c:	f002 fae8 	bl	8002ce0 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000710:	2102      	movs	r1, #2
 8000712:	482e      	ldr	r0, [pc, #184]	@ (80007cc <main+0x120>)
 8000714:	f002 fae4 	bl	8002ce0 <HAL_CAN_ActivateNotification>


  Power_ON();
 8000718:	f7ff ff8e 	bl	8000638 <Power_ON>

  // float current = (float)0;
  // float cellMeasurements[6];
  uint32_t lastCanSendTime = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t adcValues[6];

  for(int i = 0; i < 6; i++)
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000724:	e007      	b.n	8000736 <main+0x8a>
  {
	  // cellMeasurements[i] = (float)0;
	  adcValues[i] = 0;
 8000726:	463a      	mov	r2, r7
 8000728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800072a:	4413      	add	r3, r2
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 6; i++)
 8000730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000732:	3301      	adds	r3, #1
 8000734:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000738:	2b05      	cmp	r3, #5
 800073a:	ddf4      	ble.n	8000726 <main+0x7a>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t raw_current = INA226_ReadRegister(INA226_REG_CURRENT);
 800073c:	2004      	movs	r0, #4
 800073e:	f7ff fefd 	bl	800053c <INA226_ReadRegister>
 8000742:	4603      	mov	r3, r0
 8000744:	867b      	strh	r3, [r7, #50]	@ 0x32
	  for(int i = 0; i < 6; i++)
 8000746:	2300      	movs	r3, #0
 8000748:	637b      	str	r3, [r7, #52]	@ 0x34
 800074a:	e019      	b.n	8000780 <main+0xd4>
	  {
		  HAL_ADC_Start(&hadc1);
 800074c:	4820      	ldr	r0, [pc, #128]	@ (80007d0 <main+0x124>)
 800074e:	f001 f817 	bl	8001780 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000752:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000756:	481e      	ldr	r0, [pc, #120]	@ (80007d0 <main+0x124>)
 8000758:	f001 f8a8 	bl	80018ac <HAL_ADC_PollForConversion>
		  uint8_t adcValue = (uint8_t) HAL_ADC_GetValue(&hadc1); // I've changed it to 8-bits for better CAN sending
 800075c:	481c      	ldr	r0, [pc, #112]	@ (80007d0 <main+0x124>)
 800075e:	f001 f934 	bl	80019ca <HAL_ADC_GetValue>
 8000762:	4603      	mov	r3, r0
 8000764:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		  HAL_ADC_Stop(&hadc1);
 8000768:	4819      	ldr	r0, [pc, #100]	@ (80007d0 <main+0x124>)
 800076a:	f001 f86c 	bl	8001846 <HAL_ADC_Stop>
		  // float voltage = adcValue * (3.3f / 4095.0f);
		  // cellMeasurements[i] = voltage * (2.0f / ((float)(3 * (i + 1))));
		  adcValues[i] = adcValue;
 800076e:	463a      	mov	r2, r7
 8000770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000772:	4413      	add	r3, r2
 8000774:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8000778:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < 6; i++)
 800077a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800077c:	3301      	adds	r3, #1
 800077e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000782:	2b05      	cmp	r3, #5
 8000784:	dde2      	ble.n	800074c <main+0xa0>
	  }


	  if (HAL_GetTick() - lastCanSendTime >= 50)  // 0.05 second
 8000786:	f000 fc73 	bl	8001070 <HAL_GetTick>
 800078a:	4602      	mov	r2, r0
 800078c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	2b31      	cmp	r3, #49	@ 0x31
 8000792:	d9d3      	bls.n	800073c <main+0x90>
	  {
		  lastCanSendTime = HAL_GetTick();
 8000794:	f000 fc6c 	bl	8001070 <HAL_GetTick>
 8000798:	63f8      	str	r0, [r7, #60]	@ 0x3c
		  Send_CAN_Message((uint8_t)(raw_current >> 8), (uint8_t)(raw_current & 0xFF), adcValues[0], adcValues[1], adcValues[2], adcValues[3], adcValues[4], adcValues[5]);
 800079a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	b29b      	uxth	r3, r3
 80007a0:	b2dc      	uxtb	r4, r3
 80007a2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80007a4:	b2dd      	uxtb	r5, r3
 80007a6:	783e      	ldrb	r6, [r7, #0]
 80007a8:	f897 c001 	ldrb.w	ip, [r7, #1]
 80007ac:	78bb      	ldrb	r3, [r7, #2]
 80007ae:	78fa      	ldrb	r2, [r7, #3]
 80007b0:	7939      	ldrb	r1, [r7, #4]
 80007b2:	7978      	ldrb	r0, [r7, #5]
 80007b4:	9003      	str	r0, [sp, #12]
 80007b6:	9102      	str	r1, [sp, #8]
 80007b8:	9201      	str	r2, [sp, #4]
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	4663      	mov	r3, ip
 80007be:	4632      	mov	r2, r6
 80007c0:	4629      	mov	r1, r5
 80007c2:	4620      	mov	r0, r4
 80007c4:	f7ff fef0 	bl	80005a8 <Send_CAN_Message>
  {
 80007c8:	e7b8      	b.n	800073c <main+0x90>
 80007ca:	bf00      	nop
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	20000028 	.word	0x20000028

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b096      	sub	sp, #88	@ 0x58
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2244      	movs	r2, #68	@ 0x44
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f005 fb67 	bl	8005eb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007fa:	f003 fd51 	bl	80042a0 <HAL_PWREx_ControlVoltageScaling>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000804:	f000 f9cb 	bl	8000b9e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000808:	2310      	movs	r3, #16
 800080a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000814:	2360      	movs	r3, #96	@ 0x60
 8000816:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800081c:	2301      	movs	r3, #1
 800081e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000824:	2310      	movs	r3, #16
 8000826:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000828:	2307      	movs	r3, #7
 800082a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000830:	2302      	movs	r3, #2
 8000832:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4618      	mov	r0, r3
 800083a:	f003 fd87 	bl	800434c <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000844:	f000 f9ab 	bl	8000b9e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2303      	movs	r3, #3
 800084e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	2101      	movs	r1, #1
 8000860:	4618      	mov	r0, r3
 8000862:	f004 f987 	bl	8004b74 <HAL_RCC_ClockConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800086c:	f000 f997 	bl	8000b9e <Error_Handler>
  }
}
 8000870:	bf00      	nop
 8000872:	3758      	adds	r7, #88	@ 0x58
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087e:	463b      	mov	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
 800088c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800088e:	4b29      	ldr	r3, [pc, #164]	@ (8000934 <MX_ADC1_Init+0xbc>)
 8000890:	4a29      	ldr	r2, [pc, #164]	@ (8000938 <MX_ADC1_Init+0xc0>)
 8000892:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000894:	4b27      	ldr	r3, [pc, #156]	@ (8000934 <MX_ADC1_Init+0xbc>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800089a:	4b26      	ldr	r3, [pc, #152]	@ (8000934 <MX_ADC1_Init+0xbc>)
 800089c:	2210      	movs	r2, #16
 800089e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a0:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <MX_ADC1_Init+0xbc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a6:	4b23      	ldr	r3, [pc, #140]	@ (8000934 <MX_ADC1_Init+0xbc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ac:	4b21      	ldr	r3, [pc, #132]	@ (8000934 <MX_ADC1_Init+0xbc>)
 80008ae:	2204      	movs	r2, #4
 80008b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008b2:	4b20      	ldr	r3, [pc, #128]	@ (8000934 <MX_ADC1_Init+0xbc>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000934 <MX_ADC1_Init+0xbc>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008be:	4b1d      	ldr	r3, [pc, #116]	@ (8000934 <MX_ADC1_Init+0xbc>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <MX_ADC1_Init+0xbc>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008cc:	4b19      	ldr	r3, [pc, #100]	@ (8000934 <MX_ADC1_Init+0xbc>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d2:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <MX_ADC1_Init+0xbc>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008d8:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <MX_ADC1_Init+0xbc>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008e0:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <MX_ADC1_Init+0xbc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008e6:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <MX_ADC1_Init+0xbc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ee:	4811      	ldr	r0, [pc, #68]	@ (8000934 <MX_ADC1_Init+0xbc>)
 80008f0:	f000 fe04 	bl	80014fc <HAL_ADC_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80008fa:	f000 f950 	bl	8000b9e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008fe:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_ADC1_Init+0xc4>)
 8000900:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000902:	2306      	movs	r3, #6
 8000904:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800090a:	237f      	movs	r3, #127	@ 0x7f
 800090c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800090e:	2304      	movs	r3, #4
 8000910:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	@ (8000934 <MX_ADC1_Init+0xbc>)
 800091c:	f001 f862 	bl	80019e4 <HAL_ADC_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000926:	f000 f93a 	bl	8000b9e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000028 	.word	0x20000028
 8000938:	50040000 	.word	0x50040000
 800093c:	14f00020 	.word	0x14f00020

08000940 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000944:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <MX_CAN1_Init+0x64>)
 8000946:	4a18      	ldr	r2, [pc, #96]	@ (80009a8 <MX_CAN1_Init+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <MX_CAN1_Init+0x64>)
 800094c:	2208      	movs	r2, #8
 800094e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000950:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_CAN1_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000956:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <MX_CAN1_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800095c:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_CAN1_Init+0x64>)
 800095e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000962:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000964:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <MX_CAN1_Init+0x64>)
 8000966:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800096a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800096c:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <MX_CAN1_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_CAN1_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000978:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <MX_CAN1_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_CAN1_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000984:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <MX_CAN1_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_CAN1_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <MX_CAN1_Init+0x64>)
 8000992:	f001 fdaa 	bl	80024ea <HAL_CAN_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800099c:	f000 f8ff 	bl	8000b9e <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	2000008c 	.word	0x2000008c
 80009a8:	40006400 	.word	0x40006400

080009ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a20 <MX_I2C1_Init+0x74>)
 80009b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a24 <MX_I2C1_Init+0x78>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <MX_I2C1_Init+0x74>)
 80009b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a28 <MX_I2C1_Init+0x7c>)
 80009ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009bc:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <MX_I2C1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c2:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <MX_I2C1_Init+0x74>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c8:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <MX_I2C1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ce:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <MX_I2C1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <MX_I2C1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_I2C1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_I2C1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e6:	480e      	ldr	r0, [pc, #56]	@ (8000a20 <MX_I2C1_Init+0x74>)
 80009e8:	f002 fe64 	bl	80036b4 <HAL_I2C_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009f2:	f000 f8d4 	bl	8000b9e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009f6:	2100      	movs	r1, #0
 80009f8:	4809      	ldr	r0, [pc, #36]	@ (8000a20 <MX_I2C1_Init+0x74>)
 80009fa:	f003 fbab 	bl	8004154 <HAL_I2CEx_ConfigAnalogFilter>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a04:	f000 f8cb 	bl	8000b9e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_I2C1_Init+0x74>)
 8000a0c:	f003 fbed 	bl	80041ea <HAL_I2CEx_ConfigDigitalFilter>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f000 f8c2 	bl	8000b9e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200000b4 	.word	0x200000b4
 8000a24:	40005400 	.word	0x40005400
 8000a28:	00b07cb4 	.word	0x00b07cb4

08000a2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <MX_USART1_UART_Init+0x58>)
 8000a32:	4a15      	ldr	r2, [pc, #84]	@ (8000a88 <MX_USART1_UART_Init+0x5c>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a36:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <MX_USART1_UART_Init+0x58>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_USART1_UART_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_USART1_UART_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <MX_USART1_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <MX_USART1_UART_Init+0x58>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <MX_USART1_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <MX_USART1_UART_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <MX_USART1_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <MX_USART1_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_USART1_UART_Init+0x58>)
 8000a70:	f004 fd8c 	bl	800558c <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a7a:	f000 f890 	bl	8000b9e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000108 	.word	0x20000108
 8000a88:	40013800 	.word	0x40013800

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b22      	ldr	r3, [pc, #136]	@ (8000b2c <MX_GPIO_Init+0xa0>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa6:	4a21      	ldr	r2, [pc, #132]	@ (8000b2c <MX_GPIO_Init+0xa0>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aae:	4b1f      	ldr	r3, [pc, #124]	@ (8000b2c <MX_GPIO_Init+0xa0>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <MX_GPIO_Init+0xa0>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	4a1b      	ldr	r2, [pc, #108]	@ (8000b2c <MX_GPIO_Init+0xa0>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac6:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <MX_GPIO_Init+0xa0>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ON_Motor_Pin|ON_Arm_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	21c0      	movs	r1, #192	@ 0xc0
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ada:	f002 fdd3 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ON_12V_Pin|ON_5V_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2103      	movs	r1, #3
 8000ae2:	4813      	ldr	r0, [pc, #76]	@ (8000b30 <MX_GPIO_Init+0xa4>)
 8000ae4:	f002 fdce 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ON_Motor_Pin ON_Arm_Pin */
  GPIO_InitStruct.Pin = ON_Motor_Pin|ON_Arm_Pin;
 8000ae8:	23c0      	movs	r3, #192	@ 0xc0
 8000aea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4619      	mov	r1, r3
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b02:	f002 fc55 	bl	80033b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_12V_Pin ON_5V_Pin */
  GPIO_InitStruct.Pin = ON_12V_Pin|ON_5V_Pin;
 8000b06:	2303      	movs	r3, #3
 8000b08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <MX_GPIO_Init+0xa4>)
 8000b1e:	f002 fc47 	bl	80033b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b22:	bf00      	nop
 8000b24:	3720      	adds	r7, #32
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	48000400 	.word	0x48000400

08000b34 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	@ 0x30
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData);
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	f107 0210 	add.w	r2, r7, #16
 8000b44:	2100      	movs	r1, #0
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f001 ffa8 	bl	8002a9c <HAL_CAN_GetRxMessage>

    // Process message:
    if (rxHeader.StdId == DEVICE_ID && rxHeader.DLC == 8)
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	f240 122d 	movw	r2, #301	@ 0x12d
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d11f      	bne.n	8000b96 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 8000b56:	6a3b      	ldr	r3, [r7, #32]
 8000b58:	2b08      	cmp	r3, #8
 8000b5a:	d11c      	bne.n	8000b96 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
    {
        uint8_t receivedValue = rxData[0];
 8000b5c:	7a3b      	ldrb	r3, [r7, #8]
 8000b5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if(receivedValue == 1)
 8000b62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d105      	bne.n	8000b76 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
        {
        	HAL_GPIO_WritePin(ON_Motor_GPIO_Port, ON_Motor_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2140      	movs	r1, #64	@ 0x40
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b72:	f002 fd87 	bl	8003684 <HAL_GPIO_WritePin>
        }
        if(receivedValue == 2)
 8000b76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d105      	bne.n	8000b8a <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
        {
        	HAL_GPIO_WritePin(ON_Motor_GPIO_Port, ON_Motor_Pin, GPIO_PIN_SET);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2140      	movs	r1, #64	@ 0x40
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b86:	f002 fd7d 	bl	8003684 <HAL_GPIO_WritePin>
        }
        if(receivedValue == 3)
 8000b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d101      	bne.n	8000b96 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
        {
        	Power_OFF();
 8000b92:	f7ff fd6f 	bl	8000674 <Power_OFF>
        }
    }
}
 8000b96:	bf00      	nop
 8000b98:	3730      	adds	r7, #48	@ 0x30
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba2:	b672      	cpsid	i
}
 8000ba4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba6:	bf00      	nop
 8000ba8:	e7fd      	b.n	8000ba6 <Error_Handler+0x8>
	...

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bce:	4a08      	ldr	r2, [pc, #32]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b09e      	sub	sp, #120	@ 0x78
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	2254      	movs	r2, #84	@ 0x54
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f005 f94e 	bl	8005eb6 <memset>
  if(hadc->Instance==ADC1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a25      	ldr	r2, [pc, #148]	@ (8000cb4 <HAL_ADC_MspInit+0xc0>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d143      	bne.n	8000cac <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c2e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000c30:	2301      	movs	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000c38:	2310      	movs	r3, #16
 8000c3a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c3c:	2307      	movs	r3, #7
 8000c3e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c4e:	f107 0310 	add.w	r3, r7, #16
 8000c52:	4618      	mov	r0, r3
 8000c54:	f004 f9b2 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000c5e:	f7ff ff9e 	bl	8000b9e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <HAL_ADC_MspInit+0xc4>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	4a14      	ldr	r2, [pc, #80]	@ (8000cb8 <HAL_ADC_MspInit+0xc4>)
 8000c68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6e:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <HAL_ADC_MspInit+0xc4>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <HAL_ADC_MspInit+0xc4>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb8 <HAL_ADC_MspInit+0xc4>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c86:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <HAL_ADC_MspInit+0xc4>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c92:	233f      	movs	r3, #63	@ 0x3f
 8000c94:	667b      	str	r3, [r7, #100]	@ 0x64
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c96:	230b      	movs	r3, #11
 8000c98:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca8:	f002 fb82 	bl	80033b0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000cac:	bf00      	nop
 8000cae:	3778      	adds	r7, #120	@ 0x78
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	50040000 	.word	0x50040000
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d4c <HAL_CAN_MspInit+0x90>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d131      	bne.n	8000d42 <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cde:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <HAL_CAN_MspInit+0x94>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d50 <HAL_CAN_MspInit+0x94>)
 8000ce4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ce8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cea:	4b19      	ldr	r3, [pc, #100]	@ (8000d50 <HAL_CAN_MspInit+0x94>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b16      	ldr	r3, [pc, #88]	@ (8000d50 <HAL_CAN_MspInit+0x94>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfa:	4a15      	ldr	r2, [pc, #84]	@ (8000d50 <HAL_CAN_MspInit+0x94>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d02:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <HAL_CAN_MspInit+0x94>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d0e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d20:	2309      	movs	r3, #9
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2e:	f002 fb3f 	bl	80033b0 <HAL_GPIO_Init>

    /* USER CODE BEGIN CAN1_MspInit 1 */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	2014      	movs	r0, #20
 8000d38:	f002 fb03 	bl	8003342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d3c:	2014      	movs	r0, #20
 8000d3e:	f002 fb1c 	bl	800337a <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000d42:	bf00      	nop
 8000d44:	3728      	adds	r7, #40	@ 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40006400 	.word	0x40006400
 8000d50:	40021000 	.word	0x40021000

08000d54 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b09e      	sub	sp, #120	@ 0x78
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	2254      	movs	r2, #84	@ 0x54
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f005 f89e 	bl	8005eb6 <memset>
  if(hi2c->Instance==I2C1)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000dfc <HAL_I2C_MspInit+0xa8>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d137      	bne.n	8000df4 <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d84:	2340      	movs	r3, #64	@ 0x40
 8000d86:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4618      	mov	r0, r3
 8000d92:	f004 f913 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d9c:	f7ff feff 	bl	8000b9e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <HAL_I2C_MspInit+0xac>)
 8000da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da4:	4a16      	ldr	r2, [pc, #88]	@ (8000e00 <HAL_I2C_MspInit+0xac>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dac:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <HAL_I2C_MspInit+0xac>)
 8000dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000db8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000dbc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbe:	2312      	movs	r3, #18
 8000dc0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd8:	f002 faea 	bl	80033b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <HAL_I2C_MspInit+0xac>)
 8000dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de0:	4a07      	ldr	r2, [pc, #28]	@ (8000e00 <HAL_I2C_MspInit+0xac>)
 8000de2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <HAL_I2C_MspInit+0xac>)
 8000dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000df4:	bf00      	nop
 8000df6:	3778      	adds	r7, #120	@ 0x78
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40005400 	.word	0x40005400
 8000e00:	40021000 	.word	0x40021000

08000e04 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b09e      	sub	sp, #120	@ 0x78
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	2254      	movs	r2, #84	@ 0x54
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f005 f846 	bl	8005eb6 <memset>
  if(huart->Instance==USART1)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ea8 <HAL_UART_MspInit+0xa4>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d135      	bne.n	8000ea0 <HAL_UART_MspInit+0x9c>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e34:	2301      	movs	r3, #1
 8000e36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4618      	mov	r0, r3
 8000e42:	f004 f8bb 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e4c:	f7ff fea7 	bl	8000b9e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e50:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <HAL_UART_MspInit+0xa8>)
 8000e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e54:	4a15      	ldr	r2, [pc, #84]	@ (8000eac <HAL_UART_MspInit+0xa8>)
 8000e56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e5c:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <HAL_UART_MspInit+0xa8>)
 8000e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <HAL_UART_MspInit+0xa8>)
 8000e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000eac <HAL_UART_MspInit+0xa8>)
 8000e6e:	f043 0302 	orr.w	r3, r3, #2
 8000e72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e74:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <HAL_UART_MspInit+0xa8>)
 8000e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e80:	23c0      	movs	r3, #192	@ 0xc0
 8000e82:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e90:	2307      	movs	r3, #7
 8000e92:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <HAL_UART_MspInit+0xac>)
 8000e9c:	f002 fa88 	bl	80033b0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ea0:	bf00      	nop
 8000ea2:	3778      	adds	r7, #120	@ 0x78
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40013800 	.word	0x40013800
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	48000400 	.word	0x48000400

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <NMI_Handler+0x4>

08000ebc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <MemManage_Handler+0x4>

08000ecc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000edc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0a:	f000 f89d 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <CAN1_RX0_IRQHandler>:
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void CAN1_RX0_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 8000f18:	4802      	ldr	r0, [pc, #8]	@ (8000f24 <CAN1_RX0_IRQHandler+0x10>)
 8000f1a:	f001 ff07 	bl	8002d2c <HAL_CAN_IRQHandler>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000008c 	.word	0x2000008c

08000f28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f50:	f7ff ffea 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	@ (8000f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	@ (8000f90 <LoopForever+0xe>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f98 <LoopForever+0x16>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f004 ffa5 	bl	8005ec8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7e:	f7ff fb95 	bl	80006ac <main>

08000f82 <LoopForever>:

LoopForever:
    b LoopForever
 8000f82:	e7fe      	b.n	8000f82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f84:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f90:	08005f80 	.word	0x08005f80
  ldr r2, =_sbss
 8000f94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f98:	2000019c 	.word	0x2000019c

08000f9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC1_IRQHandler>

08000f9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f002 f9bf 	bl	800332c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fae:	200f      	movs	r0, #15
 8000fb0:	f000 f80e 	bl	8000fd0 <HAL_InitTick>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d002      	beq.n	8000fc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	71fb      	strb	r3, [r7, #7]
 8000fbe:	e001      	b.n	8000fc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fc0:	f7ff fdf4 	bl	8000bac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fdc:	4b17      	ldr	r3, [pc, #92]	@ (800103c <HAL_InitTick+0x6c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d023      	beq.n	800102c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fe4:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <HAL_InitTick+0x70>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b14      	ldr	r3, [pc, #80]	@ (800103c <HAL_InitTick+0x6c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 f9cb 	bl	8003396 <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10f      	bne.n	8001026 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d809      	bhi.n	8001020 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100c:	2200      	movs	r2, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001014:	f002 f995 	bl	8003342 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001018:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <HAL_InitTick+0x74>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e007      	b.n	8001030 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	e004      	b.n	8001030 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e001      	b.n	8001030 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001030:	7bfb      	ldrb	r3, [r7, #15]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	20000000 	.word	0x20000000
 8001044:	20000004 	.word	0x20000004

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	@ (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008
 800106c:	20000198 	.word	0x20000198

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000198 	.word	0x20000198

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff ffee 	bl	8001070 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <HAL_Delay+0x44>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffde 	bl	8001070 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008

080010d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	431a      	orrs	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	609a      	str	r2, [r3, #8]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	609a      	str	r2, [r3, #8]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800112c:	4618      	mov	r0, r3
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	3360      	adds	r3, #96	@ 0x60
 800114a:	461a      	mov	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b08      	ldr	r3, [pc, #32]	@ (800117c <LL_ADC_SetOffset+0x44>)
 800115a:	4013      	ands	r3, r2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	4313      	orrs	r3, r2
 8001168:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001170:	bf00      	nop
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	03fff000 	.word	0x03fff000

08001180 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3360      	adds	r3, #96	@ 0x60
 800118e:	461a      	mov	r2, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	3360      	adds	r3, #96	@ 0x60
 80011bc:	461a      	mov	r2, r3
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	431a      	orrs	r2, r3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011d6:	bf00      	nop
 80011d8:	371c      	adds	r7, #28
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3330      	adds	r3, #48	@ 0x30
 8001218:	461a      	mov	r2, r3
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	4413      	add	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	211f      	movs	r1, #31
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	401a      	ands	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	0e9b      	lsrs	r3, r3, #26
 8001240:	f003 011f 	and.w	r1, r3, #31
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f003 031f 	and.w	r3, r3, #31
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	431a      	orrs	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001254:	bf00      	nop
 8001256:	371c      	adds	r7, #28
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3314      	adds	r3, #20
 8001270:	461a      	mov	r2, r3
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	0e5b      	lsrs	r3, r3, #25
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	4413      	add	r3, r2
 800127e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	0d1b      	lsrs	r3, r3, #20
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	2107      	movs	r1, #7
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	401a      	ands	r2, r3
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	0d1b      	lsrs	r3, r3, #20
 800129a:	f003 031f 	and.w	r3, r3, #31
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	fa01 f303 	lsl.w	r3, r1, r3
 80012a4:	431a      	orrs	r2, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012aa:	bf00      	nop
 80012ac:	371c      	adds	r7, #28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012d0:	43db      	mvns	r3, r3
 80012d2:	401a      	ands	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0318 	and.w	r3, r3, #24
 80012da:	4908      	ldr	r1, [pc, #32]	@ (80012fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80012dc:	40d9      	lsrs	r1, r3
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	400b      	ands	r3, r1
 80012e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012e6:	431a      	orrs	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	0007ffff 	.word	0x0007ffff

08001300 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001310:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6093      	str	r3, [r2, #8]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001334:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001338:	d101      	bne.n	800133e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800135c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001360:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001384:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001388:	d101      	bne.n	800138e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013b0:	f043 0201 	orr.w	r2, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013d8:	f043 0202 	orr.w	r2, r3, #2
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <LL_ADC_IsEnabled+0x18>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <LL_ADC_IsEnabled+0x1a>
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b02      	cmp	r3, #2
 8001424:	d101      	bne.n	800142a <LL_ADC_IsDisableOngoing+0x18>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <LL_ADC_IsDisableOngoing+0x1a>
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001448:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800144c:	f043 0204 	orr.w	r2, r3, #4
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001470:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001474:	f043 0210 	orr.w	r2, r3, #16
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b04      	cmp	r3, #4
 800149a:	d101      	bne.n	80014a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014c2:	f043 0220 	orr.w	r2, r3, #32
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d101      	bne.n	80014ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e126      	b.n	8001764 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001520:	2b00      	cmp	r3, #0
 8001522:	d109      	bne.n	8001538 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fb65 	bl	8000bf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fef1 	bl	8001324 <LL_ADC_IsDeepPowerDownEnabled>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d004      	beq.n	8001552 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fed7 	bl	8001300 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff0c 	bl	8001374 <LL_ADC_IsInternalRegulatorEnabled>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d115      	bne.n	800158e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fef0 	bl	800134c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800156c:	4b7f      	ldr	r3, [pc, #508]	@ (800176c <HAL_ADC_Init+0x270>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	099b      	lsrs	r3, r3, #6
 8001572:	4a7f      	ldr	r2, [pc, #508]	@ (8001770 <HAL_ADC_Init+0x274>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	099b      	lsrs	r3, r3, #6
 800157a:	3301      	adds	r3, #1
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001580:	e002      	b.n	8001588 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3b01      	subs	r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f9      	bne.n	8001582 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff feee 	bl	8001374 <LL_ADC_IsInternalRegulatorEnabled>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10d      	bne.n	80015ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a2:	f043 0210 	orr.w	r2, r3, #16
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ae:	f043 0201 	orr.w	r2, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ff62 	bl	8001488 <LL_ADC_REG_IsConversionOngoing>
 80015c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f040 80bf 	bne.w	8001752 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f040 80bb 	bne.w	8001752 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80015e4:	f043 0202 	orr.w	r2, r3, #2
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fefb 	bl	80013ec <LL_ADC_IsEnabled>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10b      	bne.n	8001614 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015fc:	485d      	ldr	r0, [pc, #372]	@ (8001774 <HAL_ADC_Init+0x278>)
 80015fe:	f7ff fef5 	bl	80013ec <LL_ADC_IsEnabled>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d105      	bne.n	8001614 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4619      	mov	r1, r3
 800160e:	485a      	ldr	r0, [pc, #360]	@ (8001778 <HAL_ADC_Init+0x27c>)
 8001610:	f7ff fd5e 	bl	80010d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7e5b      	ldrb	r3, [r3, #25]
 8001618:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800161e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001624:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800162a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001632:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d106      	bne.n	8001650 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001646:	3b01      	subs	r3, #1
 8001648:	045b      	lsls	r3, r3, #17
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001654:	2b00      	cmp	r3, #0
 8001656:	d009      	beq.n	800166c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001664:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	4b42      	ldr	r3, [pc, #264]	@ (800177c <HAL_ADC_Init+0x280>)
 8001674:	4013      	ands	r3, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	69b9      	ldr	r1, [r7, #24]
 800167c:	430b      	orrs	r3, r1
 800167e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff26 	bl	80014d6 <LL_ADC_INJ_IsConversionOngoing>
 800168a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d13d      	bne.n	800170e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d13a      	bne.n	800170e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800169c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016a4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80016b4:	f023 0302 	bic.w	r3, r3, #2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	69b9      	ldr	r1, [r7, #24]
 80016be:	430b      	orrs	r3, r1
 80016c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d118      	bne.n	80016fe <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80016d6:	f023 0304 	bic.w	r3, r3, #4
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016e2:	4311      	orrs	r1, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80016e8:	4311      	orrs	r1, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80016ee:	430a      	orrs	r2, r1
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	e007      	b.n	800170e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d10c      	bne.n	8001730 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171c:	f023 010f 	bic.w	r1, r3, #15
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	1e5a      	subs	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	631a      	str	r2, [r3, #48]	@ 0x30
 800172e:	e007      	b.n	8001740 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 020f 	bic.w	r2, r2, #15
 800173e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001744:	f023 0303 	bic.w	r3, r3, #3
 8001748:	f043 0201 	orr.w	r2, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001750:	e007      	b.n	8001762 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001756:	f043 0210 	orr.w	r2, r3, #16
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001762:	7ffb      	ldrb	r3, [r7, #31]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000000 	.word	0x20000000
 8001770:	053e2d63 	.word	0x053e2d63
 8001774:	50040000 	.word	0x50040000
 8001778:	50040300 	.word	0x50040300
 800177c:	fff0c007 	.word	0xfff0c007

08001780 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fe7b 	bl	8001488 <LL_ADC_REG_IsConversionOngoing>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d14f      	bne.n	8001838 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_Start+0x26>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e04b      	b.n	800183e <HAL_ADC_Start+0xbe>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 fdb6 	bl	8002320 <ADC_Enable>
 80017b4:	4603      	mov	r3, r0
 80017b6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d137      	bne.n	800182e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017c2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017de:	d106      	bne.n	80017ee <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e4:	f023 0206 	bic.w	r2, r3, #6
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80017ec:	e002      	b.n	80017f4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	221c      	movs	r2, #28
 80017fa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001816:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800181a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fe06 	bl	8001438 <LL_ADC_REG_StartConversion>
 800182c:	e006      	b.n	800183c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001836:	e001      	b.n	800183c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001838:	2302      	movs	r3, #2
 800183a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b084      	sub	sp, #16
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_ADC_Stop+0x16>
 8001858:	2302      	movs	r3, #2
 800185a:	e023      	b.n	80018a4 <HAL_ADC_Stop+0x5e>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001864:	2103      	movs	r1, #3
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 fc9e 	bl	80021a8 <ADC_ConversionStop>
 800186c:	4603      	mov	r3, r0
 800186e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d111      	bne.n	800189a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fdd8 	bl	800242c <ADC_Disable>
 800187c:	4603      	mov	r3, r0
 800187e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800188a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	f043 0201 	orr.w	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d102      	bne.n	80018c4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80018be:	2308      	movs	r3, #8
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e010      	b.n	80018e6 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d007      	beq.n	80018e2 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d6:	f043 0220 	orr.w	r2, r3, #32
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e06f      	b.n	80019c2 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80018e2:	2304      	movs	r3, #4
 80018e4:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80018e6:	f7ff fbc3 	bl	8001070 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018ec:	e021      	b.n	8001932 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018f4:	d01d      	beq.n	8001932 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80018f6:	f7ff fbbb 	bl	8001070 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d302      	bcc.n	800190c <HAL_ADC_PollForConversion+0x60>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d112      	bne.n	8001932 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	4013      	ands	r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10b      	bne.n	8001932 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191e:	f043 0204 	orr.w	r2, r3, #4
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e047      	b.n	80019c2 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0d6      	beq.n	80018ee <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001944:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fc46 	bl	80011e2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d01c      	beq.n	8001996 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7e5b      	ldrb	r3, [r3, #25]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d118      	bne.n	8001996 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b08      	cmp	r3, #8
 8001970:	d111      	bne.n	8001996 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001976:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001982:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d105      	bne.n	8001996 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800198e:	f043 0201 	orr.w	r2, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d104      	bne.n	80019ae <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2208      	movs	r2, #8
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e008      	b.n	80019c0 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d103      	bne.n	80019c0 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	220c      	movs	r2, #12
 80019be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b0b6      	sub	sp, #216	@ 0xd8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x22>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e3bb      	b.n	800217e <HAL_ADC_ConfigChannel+0x79a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fd38 	bl	8001488 <LL_ADC_REG_IsConversionOngoing>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f040 83a0 	bne.w	8002160 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	d824      	bhi.n	8001a7a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	3b02      	subs	r3, #2
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d81b      	bhi.n	8001a72 <HAL_ADC_ConfigChannel+0x8e>
 8001a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a40 <HAL_ADC_ConfigChannel+0x5c>)
 8001a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a40:	08001a51 	.word	0x08001a51
 8001a44:	08001a59 	.word	0x08001a59
 8001a48:	08001a61 	.word	0x08001a61
 8001a4c:	08001a69 	.word	0x08001a69
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001a50:	230c      	movs	r3, #12
 8001a52:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a56:	e010      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001a58:	2312      	movs	r3, #18
 8001a5a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a5e:	e00c      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001a60:	2318      	movs	r3, #24
 8001a62:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a66:	e008      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001a68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a70:	e003      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001a72:	2306      	movs	r3, #6
 8001a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a78:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001a88:	f7ff fbbe 	bl	8001208 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fcf9 	bl	8001488 <LL_ADC_REG_IsConversionOngoing>
 8001a96:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fd19 	bl	80014d6 <LL_ADC_INJ_IsConversionOngoing>
 8001aa4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f040 81a4 	bne.w	8001dfa <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ab2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f040 819f 	bne.w	8001dfa <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	6819      	ldr	r1, [r3, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	f7ff fbc9 	bl	8001260 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	08db      	lsrs	r3, r3, #3
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d00a      	beq.n	8001b06 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	6919      	ldr	r1, [r3, #16]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b00:	f7ff fb1a 	bl	8001138 <LL_ADC_SetOffset>
 8001b04:	e179      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fb37 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10a      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x14e>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fb2c 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	0e9b      	lsrs	r3, r3, #26
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	e01e      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x18c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2100      	movs	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fb21 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001b60:	2320      	movs	r3, #32
 8001b62:	e004      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001b64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d105      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x1a4>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0e9b      	lsrs	r3, r3, #26
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	e018      	b.n	8001bba <HAL_ADC_ConfigChannel+0x1d6>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b94:	fa93 f3a3 	rbit	r3, r3
 8001b98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001b9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001ba4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001bac:	2320      	movs	r3, #32
 8001bae:	e004      	b.n	8001bba <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001bb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d106      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff faf0 	bl	80011ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fad4 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10a      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x214>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2101      	movs	r1, #1
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fac9 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	0e9b      	lsrs	r3, r3, #26
 8001bf2:	f003 021f 	and.w	r2, r3, #31
 8001bf6:	e01e      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x252>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fabe 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001c16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001c1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001c26:	2320      	movs	r3, #32
 8001c28:	e004      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001c2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d105      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x26a>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	0e9b      	lsrs	r3, r3, #26
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	e018      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x29c>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001c62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c66:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001c6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001c72:	2320      	movs	r3, #32
 8001c74:	e004      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001c76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d106      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fa8d 	bl	80011ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2102      	movs	r1, #2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fa71 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10a      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x2da>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2102      	movs	r1, #2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fa66 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	0e9b      	lsrs	r3, r3, #26
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	e01e      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x318>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fa5b 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ce0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001cec:	2320      	movs	r3, #32
 8001cee:	e004      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cf4:	fab3 f383 	clz	r3, r3
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d105      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x330>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	0e9b      	lsrs	r3, r3, #26
 8001d0e:	f003 031f 	and.w	r3, r3, #31
 8001d12:	e014      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x35a>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001d22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001d28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001d30:	2320      	movs	r3, #32
 8001d32:	e004      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001d34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d106      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2200      	movs	r2, #0
 8001d48:	2102      	movs	r1, #2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fa2e 	bl	80011ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2103      	movs	r1, #3
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fa12 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10a      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x398>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2103      	movs	r1, #3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fa07 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	0e9b      	lsrs	r3, r3, #26
 8001d76:	f003 021f 	and.w	r2, r3, #31
 8001d7a:	e017      	b.n	8001dac <HAL_ADC_ConfigChannel+0x3c8>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2103      	movs	r1, #3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff f9fc 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001d94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d96:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001d98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001d9e:	2320      	movs	r3, #32
 8001da0:	e003      	b.n	8001daa <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001da2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d105      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x3e0>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0e9b      	lsrs	r3, r3, #26
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	e011      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x404>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001dd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001dd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001ddc:	2320      	movs	r3, #32
 8001dde:	e003      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001de0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d106      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2200      	movs	r2, #0
 8001df2:	2103      	movs	r1, #3
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f9d9 	bl	80011ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff faf4 	bl	80013ec <LL_ADC_IsEnabled>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f040 8140 	bne.w	800208c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6819      	ldr	r1, [r3, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f7ff fa4d 	bl	80012b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	4a8f      	ldr	r2, [pc, #572]	@ (8002060 <HAL_ADC_ConfigChannel+0x67c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	f040 8131 	bne.w	800208c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10b      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x46e>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	0e9b      	lsrs	r3, r3, #26
 8001e40:	3301      	adds	r3, #1
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	2b09      	cmp	r3, #9
 8001e48:	bf94      	ite	ls
 8001e4a:	2301      	movls	r3, #1
 8001e4c:	2300      	movhi	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	e019      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x4a2>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e62:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001e64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	e003      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001e6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	2b09      	cmp	r3, #9
 8001e7e:	bf94      	ite	ls
 8001e80:	2301      	movls	r3, #1
 8001e82:	2300      	movhi	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d079      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d107      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x4c2>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	0e9b      	lsrs	r3, r3, #26
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	069b      	lsls	r3, r3, #26
 8001ea0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ea4:	e015      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x4ee>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001eb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001eb6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001eb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	e003      	b.n	8001eca <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001ec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ec4:	fab3 f383 	clz	r3, r3
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	069b      	lsls	r3, r3, #26
 8001ece:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x50e>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	0e9b      	lsrs	r3, r3, #26
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f003 031f 	and.w	r3, r3, #31
 8001eea:	2101      	movs	r1, #1
 8001eec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef0:	e017      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x53e>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f02:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001f04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001f0a:	2320      	movs	r3, #32
 8001f0c:	e003      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001f0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f10:	fab3 f383 	clz	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	3301      	adds	r3, #1
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	ea42 0103 	orr.w	r1, r2, r3
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10a      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x564>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	0e9b      	lsrs	r3, r3, #26
 8001f38:	3301      	adds	r3, #1
 8001f3a:	f003 021f 	and.w	r2, r3, #31
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	051b      	lsls	r3, r3, #20
 8001f46:	e018      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x596>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f58:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001f60:	2320      	movs	r3, #32
 8001f62:	e003      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f003 021f 	and.w	r2, r3, #31
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f7a:	430b      	orrs	r3, r1
 8001f7c:	e081      	b.n	8002082 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d107      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x5b6>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	0e9b      	lsrs	r3, r3, #26
 8001f90:	3301      	adds	r3, #1
 8001f92:	069b      	lsls	r3, r3, #26
 8001f94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f98:	e015      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x5e2>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001fb2:	2320      	movs	r3, #32
 8001fb4:	e003      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	069b      	lsls	r3, r3, #26
 8001fc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x602>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	0e9b      	lsrs	r3, r3, #26
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	2101      	movs	r1, #1
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	e017      	b.n	8002016 <HAL_ADC_ConfigChannel+0x632>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	61bb      	str	r3, [r7, #24]
  return result;
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001ffe:	2320      	movs	r3, #32
 8002000:	e003      	b.n	800200a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	fab3 f383 	clz	r3, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	3301      	adds	r3, #1
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	2101      	movs	r1, #1
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	ea42 0103 	orr.w	r1, r2, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10d      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x65e>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	0e9b      	lsrs	r3, r3, #26
 800202c:	3301      	adds	r3, #1
 800202e:	f003 021f 	and.w	r2, r3, #31
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	3b1e      	subs	r3, #30
 800203a:	051b      	lsls	r3, r3, #20
 800203c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002040:	e01e      	b.n	8002080 <HAL_ADC_ConfigChannel+0x69c>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	60fb      	str	r3, [r7, #12]
  return result;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d104      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800205a:	2320      	movs	r3, #32
 800205c:	e006      	b.n	800206c <HAL_ADC_ConfigChannel+0x688>
 800205e:	bf00      	nop
 8002060:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fab3 f383 	clz	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	3301      	adds	r3, #1
 800206e:	f003 021f 	and.w	r2, r3, #31
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	3b1e      	subs	r3, #30
 800207a:	051b      	lsls	r3, r3, #20
 800207c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002080:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002086:	4619      	mov	r1, r3
 8002088:	f7ff f8ea 	bl	8001260 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b3d      	ldr	r3, [pc, #244]	@ (8002188 <HAL_ADC_ConfigChannel+0x7a4>)
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d06c      	beq.n	8002172 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002098:	483c      	ldr	r0, [pc, #240]	@ (800218c <HAL_ADC_ConfigChannel+0x7a8>)
 800209a:	f7ff f83f 	bl	800111c <LL_ADC_GetCommonPathInternalCh>
 800209e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a3a      	ldr	r2, [pc, #232]	@ (8002190 <HAL_ADC_ConfigChannel+0x7ac>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d127      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d121      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a35      	ldr	r2, [pc, #212]	@ (8002194 <HAL_ADC_ConfigChannel+0x7b0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d157      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020ca:	4619      	mov	r1, r3
 80020cc:	482f      	ldr	r0, [pc, #188]	@ (800218c <HAL_ADC_ConfigChannel+0x7a8>)
 80020ce:	f7ff f812 	bl	80010f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020d2:	4b31      	ldr	r3, [pc, #196]	@ (8002198 <HAL_ADC_ConfigChannel+0x7b4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	099b      	lsrs	r3, r3, #6
 80020d8:	4a30      	ldr	r2, [pc, #192]	@ (800219c <HAL_ADC_ConfigChannel+0x7b8>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	099b      	lsrs	r3, r3, #6
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80020ec:	e002      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f9      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020fa:	e03a      	b.n	8002172 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a27      	ldr	r2, [pc, #156]	@ (80021a0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d113      	bne.n	800212e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002106:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800210a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10d      	bne.n	800212e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1f      	ldr	r2, [pc, #124]	@ (8002194 <HAL_ADC_ConfigChannel+0x7b0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d12a      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800211c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002120:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002124:	4619      	mov	r1, r3
 8002126:	4819      	ldr	r0, [pc, #100]	@ (800218c <HAL_ADC_ConfigChannel+0x7a8>)
 8002128:	f7fe ffe5 	bl	80010f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800212c:	e021      	b.n	8002172 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a1c      	ldr	r2, [pc, #112]	@ (80021a4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d11c      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002138:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800213c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d116      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a12      	ldr	r2, [pc, #72]	@ (8002194 <HAL_ADC_ConfigChannel+0x7b0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d111      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800214e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002152:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002156:	4619      	mov	r1, r3
 8002158:	480c      	ldr	r0, [pc, #48]	@ (800218c <HAL_ADC_ConfigChannel+0x7a8>)
 800215a:	f7fe ffcc 	bl	80010f6 <LL_ADC_SetCommonPathInternalCh>
 800215e:	e008      	b.n	8002172 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002164:	f043 0220 	orr.w	r2, r3, #32
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800217a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800217e:	4618      	mov	r0, r3
 8002180:	37d8      	adds	r7, #216	@ 0xd8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	80080000 	.word	0x80080000
 800218c:	50040300 	.word	0x50040300
 8002190:	c7520000 	.word	0xc7520000
 8002194:	50040000 	.word	0x50040000
 8002198:	20000000 	.word	0x20000000
 800219c:	053e2d63 	.word	0x053e2d63
 80021a0:	cb840000 	.word	0xcb840000
 80021a4:	80000001 	.word	0x80000001

080021a8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff f962 	bl	8001488 <LL_ADC_REG_IsConversionOngoing>
 80021c4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff f983 	bl	80014d6 <LL_ADC_INJ_IsConversionOngoing>
 80021d0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d103      	bne.n	80021e0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8098 	beq.w	8002310 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d02a      	beq.n	8002244 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7e5b      	ldrb	r3, [r3, #25]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d126      	bne.n	8002244 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	7e1b      	ldrb	r3, [r3, #24]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d122      	bne.n	8002244 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80021fe:	2301      	movs	r3, #1
 8002200:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002202:	e014      	b.n	800222e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	4a45      	ldr	r2, [pc, #276]	@ (800231c <ADC_ConversionStop+0x174>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d90d      	bls.n	8002228 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002210:	f043 0210 	orr.w	r2, r3, #16
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221c:	f043 0201 	orr.w	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e074      	b.n	8002312 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	3301      	adds	r3, #1
 800222c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002238:	2b40      	cmp	r3, #64	@ 0x40
 800223a:	d1e3      	bne.n	8002204 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2240      	movs	r2, #64	@ 0x40
 8002242:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d014      	beq.n	8002274 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f91a 	bl	8001488 <LL_ADC_REG_IsConversionOngoing>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00c      	beq.n	8002274 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff f8d7 	bl	8001412 <LL_ADC_IsDisableOngoing>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d104      	bne.n	8002274 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff f8f6 	bl	8001460 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d014      	beq.n	80022a4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff f929 	bl	80014d6 <LL_ADC_INJ_IsConversionOngoing>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00c      	beq.n	80022a4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff f8bf 	bl	8001412 <LL_ADC_IsDisableOngoing>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d104      	bne.n	80022a4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff f905 	bl	80014ae <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d005      	beq.n	80022b6 <ADC_ConversionStop+0x10e>
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d105      	bne.n	80022bc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80022b0:	230c      	movs	r3, #12
 80022b2:	617b      	str	r3, [r7, #20]
        break;
 80022b4:	e005      	b.n	80022c2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80022b6:	2308      	movs	r3, #8
 80022b8:	617b      	str	r3, [r7, #20]
        break;
 80022ba:	e002      	b.n	80022c2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80022bc:	2304      	movs	r3, #4
 80022be:	617b      	str	r3, [r7, #20]
        break;
 80022c0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80022c2:	f7fe fed5 	bl	8001070 <HAL_GetTick>
 80022c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80022c8:	e01b      	b.n	8002302 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80022ca:	f7fe fed1 	bl	8001070 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d914      	bls.n	8002302 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00d      	beq.n	8002302 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ea:	f043 0210 	orr.w	r2, r3, #16
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	f043 0201 	orr.w	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e007      	b.n	8002312 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1dc      	bne.n	80022ca <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3720      	adds	r7, #32
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	a33fffff 	.word	0xa33fffff

08002320 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff f85b 	bl	80013ec <LL_ADC_IsEnabled>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d169      	bne.n	8002410 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	4b36      	ldr	r3, [pc, #216]	@ (800241c <ADC_Enable+0xfc>)
 8002344:	4013      	ands	r3, r2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00d      	beq.n	8002366 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234e:	f043 0210 	orr.w	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235a:	f043 0201 	orr.w	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e055      	b.n	8002412 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff f816 	bl	800139c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002370:	482b      	ldr	r0, [pc, #172]	@ (8002420 <ADC_Enable+0x100>)
 8002372:	f7fe fed3 	bl	800111c <LL_ADC_GetCommonPathInternalCh>
 8002376:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002378:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800237c:	2b00      	cmp	r3, #0
 800237e:	d013      	beq.n	80023a8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002380:	4b28      	ldr	r3, [pc, #160]	@ (8002424 <ADC_Enable+0x104>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	099b      	lsrs	r3, r3, #6
 8002386:	4a28      	ldr	r2, [pc, #160]	@ (8002428 <ADC_Enable+0x108>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800239a:	e002      	b.n	80023a2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	3b01      	subs	r3, #1
 80023a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f9      	bne.n	800239c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023a8:	f7fe fe62 	bl	8001070 <HAL_GetTick>
 80023ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023ae:	e028      	b.n	8002402 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff f819 	bl	80013ec <LL_ADC_IsEnabled>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d104      	bne.n	80023ca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe ffe9 	bl	800139c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023ca:	f7fe fe51 	bl	8001070 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d914      	bls.n	8002402 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d00d      	beq.n	8002402 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ea:	f043 0210 	orr.w	r2, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f6:	f043 0201 	orr.w	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e007      	b.n	8002412 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d1cf      	bne.n	80023b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	8000003f 	.word	0x8000003f
 8002420:	50040300 	.word	0x50040300
 8002424:	20000000 	.word	0x20000000
 8002428:	053e2d63 	.word	0x053e2d63

0800242c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe ffea 	bl	8001412 <LL_ADC_IsDisableOngoing>
 800243e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe ffd1 	bl	80013ec <LL_ADC_IsEnabled>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d047      	beq.n	80024e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d144      	bne.n	80024e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 030d 	and.w	r3, r3, #13
 8002460:	2b01      	cmp	r3, #1
 8002462:	d10c      	bne.n	800247e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe ffab 	bl	80013c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2203      	movs	r2, #3
 8002474:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002476:	f7fe fdfb 	bl	8001070 <HAL_GetTick>
 800247a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800247c:	e029      	b.n	80024d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002482:	f043 0210 	orr.w	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e023      	b.n	80024e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800249a:	f7fe fde9 	bl	8001070 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d914      	bls.n	80024d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00d      	beq.n	80024d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ba:	f043 0210 	orr.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e007      	b.n	80024e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1dc      	bne.n	800249a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0ed      	b.n	80026d8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d102      	bne.n	800250e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7fe fbd7 	bl	8000cbc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0201 	orr.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800251e:	f7fe fda7 	bl	8001070 <HAL_GetTick>
 8002522:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002524:	e012      	b.n	800254c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002526:	f7fe fda3 	bl	8001070 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b0a      	cmp	r3, #10
 8002532:	d90b      	bls.n	800254c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2205      	movs	r2, #5
 8002544:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0c5      	b.n	80026d8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0e5      	beq.n	8002526 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0202 	bic.w	r2, r2, #2
 8002568:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800256a:	f7fe fd81 	bl	8001070 <HAL_GetTick>
 800256e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002570:	e012      	b.n	8002598 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002572:	f7fe fd7d 	bl	8001070 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b0a      	cmp	r3, #10
 800257e:	d90b      	bls.n	8002598 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2205      	movs	r2, #5
 8002590:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e09f      	b.n	80026d8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1e5      	bne.n	8002572 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	7e1b      	ldrb	r3, [r3, #24]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d108      	bne.n	80025c0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e007      	b.n	80025d0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7e5b      	ldrb	r3, [r3, #25]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d108      	bne.n	80025ea <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	e007      	b.n	80025fa <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7e9b      	ldrb	r3, [r3, #26]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d108      	bne.n	8002614 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0220 	orr.w	r2, r2, #32
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	e007      	b.n	8002624 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0220 	bic.w	r2, r2, #32
 8002622:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7edb      	ldrb	r3, [r3, #27]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d108      	bne.n	800263e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0210 	bic.w	r2, r2, #16
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e007      	b.n	800264e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0210 	orr.w	r2, r2, #16
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	7f1b      	ldrb	r3, [r3, #28]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d108      	bne.n	8002668 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0208 	orr.w	r2, r2, #8
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e007      	b.n	8002678 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0208 	bic.w	r2, r2, #8
 8002676:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	7f5b      	ldrb	r3, [r3, #29]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d108      	bne.n	8002692 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0204 	orr.w	r2, r2, #4
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	e007      	b.n	80026a2 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0204 	bic.w	r2, r2, #4
 80026a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	ea42 0103 	orr.w	r1, r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	1e5a      	subs	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d003      	beq.n	8002706 <HAL_CAN_ConfigFilter+0x26>
 80026fe:	7cfb      	ldrb	r3, [r7, #19]
 8002700:	2b02      	cmp	r3, #2
 8002702:	f040 80aa 	bne.w	800285a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800270c:	f043 0201 	orr.w	r2, r3, #1
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	2201      	movs	r2, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	43db      	mvns	r3, r3
 8002730:	401a      	ands	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d123      	bne.n	8002788 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	43db      	mvns	r3, r3
 800274a:	401a      	ands	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002762:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	3248      	adds	r2, #72	@ 0x48
 8002768:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800277c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800277e:	6979      	ldr	r1, [r7, #20]
 8002780:	3348      	adds	r3, #72	@ 0x48
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	440b      	add	r3, r1
 8002786:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d122      	bne.n	80027d6 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	431a      	orrs	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3248      	adds	r2, #72	@ 0x48
 80027b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027cc:	6979      	ldr	r1, [r7, #20]
 80027ce:	3348      	adds	r3, #72	@ 0x48
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	440b      	add	r3, r1
 80027d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	401a      	ands	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80027f0:	e007      	b.n	8002802 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	43db      	mvns	r3, r3
 8002814:	401a      	ands	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800281c:	e007      	b.n	800282e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	431a      	orrs	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d107      	bne.n	8002846 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	431a      	orrs	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800284c:	f023 0201 	bic.w	r2, r3, #1
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e006      	b.n	8002868 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
  }
}
 8002868:	4618      	mov	r0, r3
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d12e      	bne.n	80028e6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0201 	bic.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028a0:	f7fe fbe6 	bl	8001070 <HAL_GetTick>
 80028a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028a6:	e012      	b.n	80028ce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028a8:	f7fe fbe2 	bl	8001070 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b0a      	cmp	r3, #10
 80028b4:	d90b      	bls.n	80028ce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2205      	movs	r2, #5
 80028c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e012      	b.n	80028f4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1e5      	bne.n	80028a8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e006      	b.n	80028f4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
  }
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	@ 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002910:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800291a:	7ffb      	ldrb	r3, [r7, #31]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d003      	beq.n	8002928 <HAL_CAN_AddTxMessage+0x2c>
 8002920:	7ffb      	ldrb	r3, [r7, #31]
 8002922:	2b02      	cmp	r3, #2
 8002924:	f040 80ad 	bne.w	8002a82 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10a      	bne.n	8002948 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002938:	2b00      	cmp	r3, #0
 800293a:	d105      	bne.n	8002948 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8095 	beq.w	8002a72 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	0e1b      	lsrs	r3, r3, #24
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002952:	2201      	movs	r2, #1
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	409a      	lsls	r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10d      	bne.n	8002980 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800296e:	68f9      	ldr	r1, [r7, #12]
 8002970:	6809      	ldr	r1, [r1, #0]
 8002972:	431a      	orrs	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3318      	adds	r3, #24
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	440b      	add	r3, r1
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	e00f      	b.n	80029a0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800298a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002990:	68f9      	ldr	r1, [r7, #12]
 8002992:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002994:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	3318      	adds	r3, #24
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	440b      	add	r3, r1
 800299e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3318      	adds	r3, #24
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	440b      	add	r3, r1
 80029b0:	3304      	adds	r3, #4
 80029b2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	7d1b      	ldrb	r3, [r3, #20]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d111      	bne.n	80029e0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	3318      	adds	r3, #24
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	4413      	add	r3, r2
 80029c8:	3304      	adds	r3, #4
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	6811      	ldr	r1, [r2, #0]
 80029d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	3318      	adds	r3, #24
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	440b      	add	r3, r1
 80029dc:	3304      	adds	r3, #4
 80029de:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3307      	adds	r3, #7
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	061a      	lsls	r2, r3, #24
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3306      	adds	r3, #6
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	041b      	lsls	r3, r3, #16
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3305      	adds	r3, #5
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	4313      	orrs	r3, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	3204      	adds	r2, #4
 8002a00:	7812      	ldrb	r2, [r2, #0]
 8002a02:	4610      	mov	r0, r2
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	6811      	ldr	r1, [r2, #0]
 8002a08:	ea43 0200 	orr.w	r2, r3, r0
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	440b      	add	r3, r1
 8002a12:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002a16:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3303      	adds	r3, #3
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	061a      	lsls	r2, r3, #24
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3302      	adds	r3, #2
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	041b      	lsls	r3, r3, #16
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	021b      	lsls	r3, r3, #8
 8002a32:	4313      	orrs	r3, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	7812      	ldrb	r2, [r2, #0]
 8002a38:	4610      	mov	r0, r2
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	6811      	ldr	r1, [r2, #0]
 8002a3e:	ea43 0200 	orr.w	r2, r3, r0
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	440b      	add	r3, r1
 8002a48:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002a4c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	3318      	adds	r3, #24
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	4413      	add	r3, r2
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	6811      	ldr	r1, [r2, #0]
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	3318      	adds	r3, #24
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	440b      	add	r3, r1
 8002a6c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e00e      	b.n	8002a90 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a76:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e006      	b.n	8002a90 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
  }
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3724      	adds	r7, #36	@ 0x24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ab0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d003      	beq.n	8002ac0 <HAL_CAN_GetRxMessage+0x24>
 8002ab8:	7dfb      	ldrb	r3, [r7, #23]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	f040 8103 	bne.w	8002cc6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d116      	bne.n	8002b02 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0f7      	b.n	8002cd4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d107      	bne.n	8002b02 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e0e8      	b.n	8002cd4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	331b      	adds	r3, #27
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	4413      	add	r3, r2
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0204 	and.w	r2, r3, #4
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10c      	bne.n	8002b3a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	331b      	adds	r3, #27
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	4413      	add	r3, r2
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	0d5b      	lsrs	r3, r3, #21
 8002b30:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	e00b      	b.n	8002b52 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	331b      	adds	r3, #27
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	4413      	add	r3, r2
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	08db      	lsrs	r3, r3, #3
 8002b4a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	331b      	adds	r3, #27
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	4413      	add	r3, r2
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0202 	and.w	r2, r3, #2
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	331b      	adds	r3, #27
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	4413      	add	r3, r2
 8002b74:	3304      	adds	r3, #4
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2208      	movs	r2, #8
 8002b84:	611a      	str	r2, [r3, #16]
 8002b86:	e00b      	b.n	8002ba0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	331b      	adds	r3, #27
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	4413      	add	r3, r2
 8002b94:	3304      	adds	r3, #4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 020f 	and.w	r2, r3, #15
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	331b      	adds	r3, #27
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	4413      	add	r3, r2
 8002bac:	3304      	adds	r3, #4
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	0a1b      	lsrs	r3, r3, #8
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	331b      	adds	r3, #27
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	0c1b      	lsrs	r3, r3, #16
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	0a1a      	lsrs	r2, r3, #8
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	0c1a      	lsrs	r2, r3, #16
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	3302      	adds	r3, #2
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	0e1a      	lsrs	r2, r3, #24
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	3303      	adds	r3, #3
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	3304      	adds	r3, #4
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0a1a      	lsrs	r2, r3, #8
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	3305      	adds	r3, #5
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	0c1a      	lsrs	r2, r3, #16
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	3306      	adds	r3, #6
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0e1a      	lsrs	r2, r3, #24
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	3307      	adds	r3, #7
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d108      	bne.n	8002cb2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0220 	orr.w	r2, r2, #32
 8002cae:	60da      	str	r2, [r3, #12]
 8002cb0:	e007      	b.n	8002cc2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0220 	orr.w	r2, r2, #32
 8002cc0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e006      	b.n	8002cd4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
  }
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d002      	beq.n	8002cfe <HAL_CAN_ActivateNotification+0x1e>
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d109      	bne.n	8002d12 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6959      	ldr	r1, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e006      	b.n	8002d20 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d16:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
  }
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	@ 0x28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d07c      	beq.n	8002e6c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d023      	beq.n	8002dc4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2201      	movs	r2, #1
 8002d82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f983 	bl	800309a <HAL_CAN_TxMailbox0CompleteCallback>
 8002d94:	e016      	b.n	8002dc4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d004      	beq.n	8002daa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da8:	e00c      	b.n	8002dc4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d004      	beq.n	8002dbe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dbc:	e002      	b.n	8002dc4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f989 	bl	80030d6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d024      	beq.n	8002e18 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dd6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f963 	bl	80030ae <HAL_CAN_TxMailbox1CompleteCallback>
 8002de8:	e016      	b.n	8002e18 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d004      	beq.n	8002dfe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dfc:	e00c      	b.n	8002e18 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d004      	beq.n	8002e12 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e10:	e002      	b.n	8002e18 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f969 	bl	80030ea <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d024      	beq.n	8002e6c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e2a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f943 	bl	80030c2 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e3c:	e016      	b.n	8002e6c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d004      	beq.n	8002e52 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e50:	e00c      	b.n	8002e6c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d004      	beq.n	8002e66 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e64:	e002      	b.n	8002e6c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f949 	bl	80030fe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00c      	beq.n	8002e90 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d006      	beq.n	8002eb2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f930 	bl	8003112 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d009      	beq.n	8002ed0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fd fe32 	bl	8000b34 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eea:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00b      	beq.n	8002f16 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d006      	beq.n	8002f16 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f912 	bl	800313a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d009      	beq.n	8002f34 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f8f9 	bl	8003126 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d006      	beq.n	8002f56 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f8fc 	bl	800314e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d006      	beq.n	8002f78 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2208      	movs	r2, #8
 8002f70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f8f5 	bl	8003162 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d07b      	beq.n	800307a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d072      	beq.n	8003072 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d008      	beq.n	8002fa8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	f043 0302 	orr.w	r3, r3, #2
 8002fc2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	f043 0304 	orr.w	r3, r3, #4
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d043      	beq.n	8003072 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d03e      	beq.n	8003072 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ffa:	2b60      	cmp	r3, #96	@ 0x60
 8002ffc:	d02b      	beq.n	8003056 <HAL_CAN_IRQHandler+0x32a>
 8002ffe:	2b60      	cmp	r3, #96	@ 0x60
 8003000:	d82e      	bhi.n	8003060 <HAL_CAN_IRQHandler+0x334>
 8003002:	2b50      	cmp	r3, #80	@ 0x50
 8003004:	d022      	beq.n	800304c <HAL_CAN_IRQHandler+0x320>
 8003006:	2b50      	cmp	r3, #80	@ 0x50
 8003008:	d82a      	bhi.n	8003060 <HAL_CAN_IRQHandler+0x334>
 800300a:	2b40      	cmp	r3, #64	@ 0x40
 800300c:	d019      	beq.n	8003042 <HAL_CAN_IRQHandler+0x316>
 800300e:	2b40      	cmp	r3, #64	@ 0x40
 8003010:	d826      	bhi.n	8003060 <HAL_CAN_IRQHandler+0x334>
 8003012:	2b30      	cmp	r3, #48	@ 0x30
 8003014:	d010      	beq.n	8003038 <HAL_CAN_IRQHandler+0x30c>
 8003016:	2b30      	cmp	r3, #48	@ 0x30
 8003018:	d822      	bhi.n	8003060 <HAL_CAN_IRQHandler+0x334>
 800301a:	2b10      	cmp	r3, #16
 800301c:	d002      	beq.n	8003024 <HAL_CAN_IRQHandler+0x2f8>
 800301e:	2b20      	cmp	r3, #32
 8003020:	d005      	beq.n	800302e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003022:	e01d      	b.n	8003060 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	f043 0308 	orr.w	r3, r3, #8
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800302c:	e019      	b.n	8003062 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	f043 0310 	orr.w	r3, r3, #16
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003036:	e014      	b.n	8003062 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	f043 0320 	orr.w	r3, r3, #32
 800303e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003040:	e00f      	b.n	8003062 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800304a:	e00a      	b.n	8003062 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003052:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003054:	e005      	b.n	8003062 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800305c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800305e:	e000      	b.n	8003062 <HAL_CAN_IRQHandler+0x336>
            break;
 8003060:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699a      	ldr	r2, [r3, #24]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003070:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2204      	movs	r2, #4
 8003078:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f872 	bl	8003176 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003092:	bf00      	nop
 8003094:	3728      	adds	r7, #40	@ 0x28
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800319c:	4b0c      	ldr	r3, [pc, #48]	@ (80031d0 <__NVIC_SetPriorityGrouping+0x44>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031a8:	4013      	ands	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031be:	4a04      	ldr	r2, [pc, #16]	@ (80031d0 <__NVIC_SetPriorityGrouping+0x44>)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	60d3      	str	r3, [r2, #12]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d8:	4b04      	ldr	r3, [pc, #16]	@ (80031ec <__NVIC_GetPriorityGrouping+0x18>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	0a1b      	lsrs	r3, r3, #8
 80031de:	f003 0307 	and.w	r3, r3, #7
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	db0b      	blt.n	800321a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	f003 021f 	and.w	r2, r3, #31
 8003208:	4907      	ldr	r1, [pc, #28]	@ (8003228 <__NVIC_EnableIRQ+0x38>)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	2001      	movs	r0, #1
 8003212:	fa00 f202 	lsl.w	r2, r0, r2
 8003216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	e000e100 	.word	0xe000e100

0800322c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	6039      	str	r1, [r7, #0]
 8003236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323c:	2b00      	cmp	r3, #0
 800323e:	db0a      	blt.n	8003256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	b2da      	uxtb	r2, r3
 8003244:	490c      	ldr	r1, [pc, #48]	@ (8003278 <__NVIC_SetPriority+0x4c>)
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	0112      	lsls	r2, r2, #4
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	440b      	add	r3, r1
 8003250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003254:	e00a      	b.n	800326c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	4908      	ldr	r1, [pc, #32]	@ (800327c <__NVIC_SetPriority+0x50>)
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	3b04      	subs	r3, #4
 8003264:	0112      	lsls	r2, r2, #4
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	440b      	add	r3, r1
 800326a:	761a      	strb	r2, [r3, #24]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000e100 	.word	0xe000e100
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003280:	b480      	push	{r7}
 8003282:	b089      	sub	sp, #36	@ 0x24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f1c3 0307 	rsb	r3, r3, #7
 800329a:	2b04      	cmp	r3, #4
 800329c:	bf28      	it	cs
 800329e:	2304      	movcs	r3, #4
 80032a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3304      	adds	r3, #4
 80032a6:	2b06      	cmp	r3, #6
 80032a8:	d902      	bls.n	80032b0 <NVIC_EncodePriority+0x30>
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3b03      	subs	r3, #3
 80032ae:	e000      	b.n	80032b2 <NVIC_EncodePriority+0x32>
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	401a      	ands	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	fa01 f303 	lsl.w	r3, r1, r3
 80032d2:	43d9      	mvns	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	4313      	orrs	r3, r2
         );
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3724      	adds	r7, #36	@ 0x24
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032f8:	d301      	bcc.n	80032fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032fa:	2301      	movs	r3, #1
 80032fc:	e00f      	b.n	800331e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003328 <SysTick_Config+0x40>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3b01      	subs	r3, #1
 8003304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003306:	210f      	movs	r1, #15
 8003308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800330c:	f7ff ff8e 	bl	800322c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003310:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <SysTick_Config+0x40>)
 8003312:	2200      	movs	r2, #0
 8003314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003316:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <SysTick_Config+0x40>)
 8003318:	2207      	movs	r2, #7
 800331a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	e000e010 	.word	0xe000e010

0800332c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff ff29 	bl	800318c <__NVIC_SetPriorityGrouping>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	4603      	mov	r3, r0
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003354:	f7ff ff3e 	bl	80031d4 <__NVIC_GetPriorityGrouping>
 8003358:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	6978      	ldr	r0, [r7, #20]
 8003360:	f7ff ff8e 	bl	8003280 <NVIC_EncodePriority>
 8003364:	4602      	mov	r2, r0
 8003366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ff5d 	bl	800322c <__NVIC_SetPriority>
}
 8003372:	bf00      	nop
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	4603      	mov	r3, r0
 8003382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff31 	bl	80031f0 <__NVIC_EnableIRQ>
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ffa2 	bl	80032e8 <SysTick_Config>
 80033a4:	4603      	mov	r3, r0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033be:	e148      	b.n	8003652 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	2101      	movs	r1, #1
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	fa01 f303 	lsl.w	r3, r1, r3
 80033cc:	4013      	ands	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 813a 	beq.w	800364c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d005      	beq.n	80033f0 <HAL_GPIO_Init+0x40>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d130      	bne.n	8003452 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	2203      	movs	r2, #3
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4013      	ands	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003426:	2201      	movs	r2, #1
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	f003 0201 	and.w	r2, r3, #1
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b03      	cmp	r3, #3
 800345c:	d017      	beq.n	800348e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	2203      	movs	r2, #3
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4013      	ands	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d123      	bne.n	80034e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	08da      	lsrs	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3208      	adds	r2, #8
 80034a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	220f      	movs	r2, #15
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4013      	ands	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	08da      	lsrs	r2, r3, #3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3208      	adds	r2, #8
 80034dc:	6939      	ldr	r1, [r7, #16]
 80034de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	2203      	movs	r2, #3
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4013      	ands	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 0203 	and.w	r2, r3, #3
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 8094 	beq.w	800364c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003524:	4b52      	ldr	r3, [pc, #328]	@ (8003670 <HAL_GPIO_Init+0x2c0>)
 8003526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003528:	4a51      	ldr	r2, [pc, #324]	@ (8003670 <HAL_GPIO_Init+0x2c0>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003530:	4b4f      	ldr	r3, [pc, #316]	@ (8003670 <HAL_GPIO_Init+0x2c0>)
 8003532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800353c:	4a4d      	ldr	r2, [pc, #308]	@ (8003674 <HAL_GPIO_Init+0x2c4>)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	089b      	lsrs	r3, r3, #2
 8003542:	3302      	adds	r3, #2
 8003544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003548:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	220f      	movs	r2, #15
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003566:	d00d      	beq.n	8003584 <HAL_GPIO_Init+0x1d4>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a43      	ldr	r2, [pc, #268]	@ (8003678 <HAL_GPIO_Init+0x2c8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d007      	beq.n	8003580 <HAL_GPIO_Init+0x1d0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a42      	ldr	r2, [pc, #264]	@ (800367c <HAL_GPIO_Init+0x2cc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d101      	bne.n	800357c <HAL_GPIO_Init+0x1cc>
 8003578:	2302      	movs	r3, #2
 800357a:	e004      	b.n	8003586 <HAL_GPIO_Init+0x1d6>
 800357c:	2307      	movs	r3, #7
 800357e:	e002      	b.n	8003586 <HAL_GPIO_Init+0x1d6>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <HAL_GPIO_Init+0x1d6>
 8003584:	2300      	movs	r3, #0
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	f002 0203 	and.w	r2, r2, #3
 800358c:	0092      	lsls	r2, r2, #2
 800358e:	4093      	lsls	r3, r2
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003596:	4937      	ldr	r1, [pc, #220]	@ (8003674 <HAL_GPIO_Init+0x2c4>)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	3302      	adds	r3, #2
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035a4:	4b36      	ldr	r3, [pc, #216]	@ (8003680 <HAL_GPIO_Init+0x2d0>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4013      	ands	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003680 <HAL_GPIO_Init+0x2d0>)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003680 <HAL_GPIO_Init+0x2d0>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4013      	ands	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035f2:	4a23      	ldr	r2, [pc, #140]	@ (8003680 <HAL_GPIO_Init+0x2d0>)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035f8:	4b21      	ldr	r3, [pc, #132]	@ (8003680 <HAL_GPIO_Init+0x2d0>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	43db      	mvns	r3, r3
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4013      	ands	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800361c:	4a18      	ldr	r2, [pc, #96]	@ (8003680 <HAL_GPIO_Init+0x2d0>)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003622:	4b17      	ldr	r3, [pc, #92]	@ (8003680 <HAL_GPIO_Init+0x2d0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	43db      	mvns	r3, r3
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4013      	ands	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003646:	4a0e      	ldr	r2, [pc, #56]	@ (8003680 <HAL_GPIO_Init+0x2d0>)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	3301      	adds	r3, #1
 8003650:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	f47f aeaf 	bne.w	80033c0 <HAL_GPIO_Init+0x10>
  }
}
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	40021000 	.word	0x40021000
 8003674:	40010000 	.word	0x40010000
 8003678:	48000400 	.word	0x48000400
 800367c:	48000800 	.word	0x48000800
 8003680:	40010400 	.word	0x40010400

08003684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	807b      	strh	r3, [r7, #2]
 8003690:	4613      	mov	r3, r2
 8003692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003694:	787b      	ldrb	r3, [r7, #1]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036a0:	e002      	b.n	80036a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036a2:	887a      	ldrh	r2, [r7, #2]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e08d      	b.n	80037e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd fb3a 	bl	8000d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2224      	movs	r2, #36	@ 0x24
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003704:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003714:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d107      	bne.n	800372e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	e006      	b.n	800373c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800373a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d108      	bne.n	8003756 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003752:	605a      	str	r2, [r3, #4]
 8003754:	e007      	b.n	8003766 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003764:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003778:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003788:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69d9      	ldr	r1, [r3, #28]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	461a      	mov	r2, r3
 80037f8:	460b      	mov	r3, r1
 80037fa:	817b      	strh	r3, [r7, #10]
 80037fc:	4613      	mov	r3, r2
 80037fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b20      	cmp	r3, #32
 800380a:	f040 80fd 	bne.w	8003a08 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_I2C_Master_Transmit+0x30>
 8003818:	2302      	movs	r3, #2
 800381a:	e0f6      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x21e>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003824:	f7fd fc24 	bl	8001070 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	2319      	movs	r3, #25
 8003830:	2201      	movs	r2, #1
 8003832:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fa0a 	bl	8003c50 <I2C_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e0e1      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2221      	movs	r2, #33	@ 0x21
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2210      	movs	r2, #16
 8003852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	893a      	ldrh	r2, [r7, #8]
 8003866:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	2bff      	cmp	r3, #255	@ 0xff
 8003876:	d906      	bls.n	8003886 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	22ff      	movs	r2, #255	@ 0xff
 800387c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800387e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	e007      	b.n	8003896 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003890:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003894:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389a:	2b00      	cmp	r3, #0
 800389c:	d024      	beq.n	80038e8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a2:	781a      	ldrb	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	3301      	adds	r3, #1
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	8979      	ldrh	r1, [r7, #10]
 80038da:	4b4e      	ldr	r3, [pc, #312]	@ (8003a14 <HAL_I2C_Master_Transmit+0x228>)
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fc05 	bl	80040f0 <I2C_TransferConfig>
 80038e6:	e066      	b.n	80039b6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	8979      	ldrh	r1, [r7, #10]
 80038f0:	4b48      	ldr	r3, [pc, #288]	@ (8003a14 <HAL_I2C_Master_Transmit+0x228>)
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fbfa 	bl	80040f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80038fc:	e05b      	b.n	80039b6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	6a39      	ldr	r1, [r7, #32]
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f9fd 	bl	8003d02 <I2C_WaitOnTXISFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e07b      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	781a      	ldrb	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d034      	beq.n	80039b6 <HAL_I2C_Master_Transmit+0x1ca>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003950:	2b00      	cmp	r3, #0
 8003952:	d130      	bne.n	80039b6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	2200      	movs	r2, #0
 800395c:	2180      	movs	r1, #128	@ 0x80
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f976 	bl	8003c50 <I2C_WaitOnFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e04d      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	2bff      	cmp	r3, #255	@ 0xff
 8003976:	d90e      	bls.n	8003996 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	22ff      	movs	r2, #255	@ 0xff
 800397c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003982:	b2da      	uxtb	r2, r3
 8003984:	8979      	ldrh	r1, [r7, #10]
 8003986:	2300      	movs	r3, #0
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fbae 	bl	80040f0 <I2C_TransferConfig>
 8003994:	e00f      	b.n	80039b6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	8979      	ldrh	r1, [r7, #10]
 80039a8:	2300      	movs	r3, #0
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fb9d 	bl	80040f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d19e      	bne.n	80038fe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	6a39      	ldr	r1, [r7, #32]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f9e3 	bl	8003d90 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e01a      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2220      	movs	r2, #32
 80039da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6859      	ldr	r1, [r3, #4]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003a18 <HAL_I2C_Master_Transmit+0x22c>)
 80039e8:	400b      	ands	r3, r1
 80039ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e000      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003a08:	2302      	movs	r3, #2
  }
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	80002000 	.word	0x80002000
 8003a18:	fe00e800 	.word	0xfe00e800

08003a1c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	461a      	mov	r2, r3
 8003a28:	460b      	mov	r3, r1
 8003a2a:	817b      	strh	r3, [r7, #10]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	f040 80db 	bne.w	8003bf4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_I2C_Master_Receive+0x30>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e0d4      	b.n	8003bf6 <HAL_I2C_Master_Receive+0x1da>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a54:	f7fd fb0c 	bl	8001070 <HAL_GetTick>
 8003a58:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	2319      	movs	r3, #25
 8003a60:	2201      	movs	r2, #1
 8003a62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f8f2 	bl	8003c50 <I2C_WaitOnFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e0bf      	b.n	8003bf6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2222      	movs	r2, #34	@ 0x22
 8003a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2210      	movs	r2, #16
 8003a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	893a      	ldrh	r2, [r7, #8]
 8003a96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2bff      	cmp	r3, #255	@ 0xff
 8003aa6:	d90e      	bls.n	8003ac6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	8979      	ldrh	r1, [r7, #10]
 8003ab6:	4b52      	ldr	r3, [pc, #328]	@ (8003c00 <HAL_I2C_Master_Receive+0x1e4>)
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fb16 	bl	80040f0 <I2C_TransferConfig>
 8003ac4:	e06d      	b.n	8003ba2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	8979      	ldrh	r1, [r7, #10]
 8003ad8:	4b49      	ldr	r3, [pc, #292]	@ (8003c00 <HAL_I2C_Master_Receive+0x1e4>)
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 fb05 	bl	80040f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003ae6:	e05c      	b.n	8003ba2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	6a39      	ldr	r1, [r7, #32]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f993 	bl	8003e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e07c      	b.n	8003bf6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d034      	beq.n	8003ba2 <HAL_I2C_Master_Receive+0x186>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d130      	bne.n	8003ba2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	2200      	movs	r2, #0
 8003b48:	2180      	movs	r1, #128	@ 0x80
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f880 	bl	8003c50 <I2C_WaitOnFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e04d      	b.n	8003bf6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2bff      	cmp	r3, #255	@ 0xff
 8003b62:	d90e      	bls.n	8003b82 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	22ff      	movs	r2, #255	@ 0xff
 8003b68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	8979      	ldrh	r1, [r7, #10]
 8003b72:	2300      	movs	r3, #0
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 fab8 	bl	80040f0 <I2C_TransferConfig>
 8003b80:	e00f      	b.n	8003ba2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	8979      	ldrh	r1, [r7, #10]
 8003b94:	2300      	movs	r3, #0
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 faa7 	bl	80040f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d19d      	bne.n	8003ae8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	6a39      	ldr	r1, [r7, #32]
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f8ed 	bl	8003d90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e01a      	b.n	8003bf6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6859      	ldr	r1, [r3, #4]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <HAL_I2C_Master_Receive+0x1e8>)
 8003bd4:	400b      	ands	r3, r1
 8003bd6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e000      	b.n	8003bf6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003bf4:	2302      	movs	r3, #2
  }
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	80002400 	.word	0x80002400
 8003c04:	fe00e800 	.word	0xfe00e800

08003c08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d103      	bne.n	8003c26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2200      	movs	r2, #0
 8003c24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d007      	beq.n	8003c44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	619a      	str	r2, [r3, #24]
  }
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c60:	e03b      	b.n	8003cda <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	6839      	ldr	r1, [r7, #0]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f962 	bl	8003f30 <I2C_IsErrorOccurred>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e041      	b.n	8003cfa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c7c:	d02d      	beq.n	8003cda <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7e:	f7fd f9f7 	bl	8001070 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d302      	bcc.n	8003c94 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d122      	bne.n	8003cda <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d113      	bne.n	8003cda <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb6:	f043 0220 	orr.w	r2, r3, #32
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e00f      	b.n	8003cfa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699a      	ldr	r2, [r3, #24]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	bf0c      	ite	eq
 8003cea:	2301      	moveq	r3, #1
 8003cec:	2300      	movne	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d0b4      	beq.n	8003c62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d0e:	e033      	b.n	8003d78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f90b 	bl	8003f30 <I2C_IsErrorOccurred>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e031      	b.n	8003d88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d2a:	d025      	beq.n	8003d78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2c:	f7fd f9a0 	bl	8001070 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d302      	bcc.n	8003d42 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d11a      	bne.n	8003d78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d013      	beq.n	8003d78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e007      	b.n	8003d88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d1c4      	bne.n	8003d10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d9c:	e02f      	b.n	8003dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f8c4 	bl	8003f30 <I2C_IsErrorOccurred>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e02d      	b.n	8003e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db2:	f7fd f95d 	bl	8001070 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d302      	bcc.n	8003dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d11a      	bne.n	8003dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d013      	beq.n	8003dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e007      	b.n	8003e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d1c8      	bne.n	8003d9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003e28:	e071      	b.n	8003f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f87e 	bl	8003f30 <I2C_IsErrorOccurred>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	d13b      	bne.n	8003ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d138      	bne.n	8003ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d105      	bne.n	8003e6c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	2b10      	cmp	r3, #16
 8003e78:	d121      	bne.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2210      	movs	r2, #16
 8003e80:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2204      	movs	r2, #4
 8003e86:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6859      	ldr	r1, [r3, #4]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4b24      	ldr	r3, [pc, #144]	@ (8003f2c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003e9c:	400b      	ands	r3, r1
 8003e9e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	75fb      	strb	r3, [r7, #23]
 8003ebc:	e002      	b.n	8003ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003ec4:	f7fd f8d4 	bl	8001070 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d302      	bcc.n	8003eda <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d119      	bne.n	8003f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d116      	bne.n	8003f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d00f      	beq.n	8003f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef2:	f043 0220 	orr.w	r2, r3, #32
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d002      	beq.n	8003f22 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d083      	beq.n	8003e2a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	fe00e800 	.word	0xfe00e800

08003f30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08a      	sub	sp, #40	@ 0x28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d068      	beq.n	800402e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2210      	movs	r2, #16
 8003f62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f64:	e049      	b.n	8003ffa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f6c:	d045      	beq.n	8003ffa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f6e:	f7fd f87f 	bl	8001070 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d302      	bcc.n	8003f84 <I2C_IsErrorOccurred+0x54>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d13a      	bne.n	8003ffa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa6:	d121      	bne.n	8003fec <I2C_IsErrorOccurred+0xbc>
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fae:	d01d      	beq.n	8003fec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003fb0:	7cfb      	ldrb	r3, [r7, #19]
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d01a      	beq.n	8003fec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003fc6:	f7fd f853 	bl	8001070 <HAL_GetTick>
 8003fca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fcc:	e00e      	b.n	8003fec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003fce:	f7fd f84f 	bl	8001070 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b19      	cmp	r3, #25
 8003fda:	d907      	bls.n	8003fec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	f043 0320 	orr.w	r3, r3, #32
 8003fe2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003fea:	e006      	b.n	8003ffa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d1e9      	bne.n	8003fce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b20      	cmp	r3, #32
 8004006:	d003      	beq.n	8004010 <I2C_IsErrorOccurred+0xe0>
 8004008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0aa      	beq.n	8003f66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004014:	2b00      	cmp	r3, #0
 8004016:	d103      	bne.n	8004020 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2220      	movs	r2, #32
 800401e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	f043 0304 	orr.w	r3, r3, #4
 8004026:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00b      	beq.n	8004058 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004050:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00b      	beq.n	800407a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	f043 0308 	orr.w	r3, r3, #8
 8004068:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004072:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00b      	beq.n	800409c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	f043 0302 	orr.w	r3, r3, #2
 800408a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004094:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800409c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d01c      	beq.n	80040de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f7ff fdaf 	bl	8003c08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6859      	ldr	r1, [r3, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b0d      	ldr	r3, [pc, #52]	@ (80040ec <I2C_IsErrorOccurred+0x1bc>)
 80040b6:	400b      	ands	r3, r1
 80040b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80040de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3728      	adds	r7, #40	@ 0x28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	fe00e800 	.word	0xfe00e800

080040f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	607b      	str	r3, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	817b      	strh	r3, [r7, #10]
 80040fe:	4613      	mov	r3, r2
 8004100:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004102:	897b      	ldrh	r3, [r7, #10]
 8004104:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004108:	7a7b      	ldrb	r3, [r7, #9]
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004110:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	4313      	orrs	r3, r2
 800411a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800411e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	0d5b      	lsrs	r3, r3, #21
 800412a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800412e:	4b08      	ldr	r3, [pc, #32]	@ (8004150 <I2C_TransferConfig+0x60>)
 8004130:	430b      	orrs	r3, r1
 8004132:	43db      	mvns	r3, r3
 8004134:	ea02 0103 	and.w	r1, r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	03ff63ff 	.word	0x03ff63ff

08004154 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b20      	cmp	r3, #32
 8004168:	d138      	bne.n	80041dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004174:	2302      	movs	r3, #2
 8004176:	e032      	b.n	80041de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2224      	movs	r2, #36	@ 0x24
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6819      	ldr	r1, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	e000      	b.n	80041de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041dc:	2302      	movs	r3, #2
  }
}
 80041de:	4618      	mov	r0, r3
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b085      	sub	sp, #20
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d139      	bne.n	8004274 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800420a:	2302      	movs	r3, #2
 800420c:	e033      	b.n	8004276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2224      	movs	r2, #36	@ 0x24
 800421a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800423c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	021b      	lsls	r3, r3, #8
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004274:	2302      	movs	r3, #2
  }
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004288:	4b04      	ldr	r3, [pc, #16]	@ (800429c <HAL_PWREx_GetVoltageRange+0x18>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004290:	4618      	mov	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40007000 	.word	0x40007000

080042a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ae:	d130      	bne.n	8004312 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042b0:	4b23      	ldr	r3, [pc, #140]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042bc:	d038      	beq.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042be:	4b20      	ldr	r3, [pc, #128]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004344 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2232      	movs	r2, #50	@ 0x32
 80042d4:	fb02 f303 	mul.w	r3, r2, r3
 80042d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004348 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	0c9b      	lsrs	r3, r3, #18
 80042e0:	3301      	adds	r3, #1
 80042e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042e4:	e002      	b.n	80042ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ec:	4b14      	ldr	r3, [pc, #80]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042f8:	d102      	bne.n	8004300 <HAL_PWREx_ControlVoltageScaling+0x60>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f2      	bne.n	80042e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004300:	4b0f      	ldr	r3, [pc, #60]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800430c:	d110      	bne.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e00f      	b.n	8004332 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004312:	4b0b      	ldr	r3, [pc, #44]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800431a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800431e:	d007      	beq.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004320:	4b07      	ldr	r3, [pc, #28]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004328:	4a05      	ldr	r2, [pc, #20]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800432a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800432e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40007000 	.word	0x40007000
 8004344:	20000000 	.word	0x20000000
 8004348:	431bde83 	.word	0x431bde83

0800434c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d102      	bne.n	8004360 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f000 bc02 	b.w	8004b64 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004360:	4b96      	ldr	r3, [pc, #600]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 030c 	and.w	r3, r3, #12
 8004368:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800436a:	4b94      	ldr	r3, [pc, #592]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80e4 	beq.w	800454a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <HAL_RCC_OscConfig+0x4c>
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2b0c      	cmp	r3, #12
 800438c:	f040 808b 	bne.w	80044a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2b01      	cmp	r3, #1
 8004394:	f040 8087 	bne.w	80044a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004398:	4b88      	ldr	r3, [pc, #544]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <HAL_RCC_OscConfig+0x64>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e3d9      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1a      	ldr	r2, [r3, #32]
 80043b4:	4b81      	ldr	r3, [pc, #516]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d004      	beq.n	80043ca <HAL_RCC_OscConfig+0x7e>
 80043c0:	4b7e      	ldr	r3, [pc, #504]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043c8:	e005      	b.n	80043d6 <HAL_RCC_OscConfig+0x8a>
 80043ca:	4b7c      	ldr	r3, [pc, #496]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80043cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d223      	bcs.n	8004422 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fd8c 	bl	8004efc <RCC_SetFlashLatencyFromMSIRange>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e3ba      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043ee:	4b73      	ldr	r3, [pc, #460]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a72      	ldr	r2, [pc, #456]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80043f4:	f043 0308 	orr.w	r3, r3, #8
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	4b70      	ldr	r3, [pc, #448]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	496d      	ldr	r1, [pc, #436]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 8004408:	4313      	orrs	r3, r2
 800440a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800440c:	4b6b      	ldr	r3, [pc, #428]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	4968      	ldr	r1, [pc, #416]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 800441c:	4313      	orrs	r3, r2
 800441e:	604b      	str	r3, [r1, #4]
 8004420:	e025      	b.n	800446e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004422:	4b66      	ldr	r3, [pc, #408]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a65      	ldr	r2, [pc, #404]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 8004428:	f043 0308 	orr.w	r3, r3, #8
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	4b63      	ldr	r3, [pc, #396]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	4960      	ldr	r1, [pc, #384]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 800443c:	4313      	orrs	r3, r2
 800443e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004440:	4b5e      	ldr	r3, [pc, #376]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	495b      	ldr	r1, [pc, #364]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fd4c 	bl	8004efc <RCC_SetFlashLatencyFromMSIRange>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e37a      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800446e:	f000 fc81 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8004472:	4602      	mov	r2, r0
 8004474:	4b51      	ldr	r3, [pc, #324]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	091b      	lsrs	r3, r3, #4
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	4950      	ldr	r1, [pc, #320]	@ (80045c0 <HAL_RCC_OscConfig+0x274>)
 8004480:	5ccb      	ldrb	r3, [r1, r3]
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	fa22 f303 	lsr.w	r3, r2, r3
 800448a:	4a4e      	ldr	r2, [pc, #312]	@ (80045c4 <HAL_RCC_OscConfig+0x278>)
 800448c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800448e:	4b4e      	ldr	r3, [pc, #312]	@ (80045c8 <HAL_RCC_OscConfig+0x27c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7fc fd9c 	bl	8000fd0 <HAL_InitTick>
 8004498:	4603      	mov	r3, r0
 800449a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d052      	beq.n	8004548 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	e35e      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d032      	beq.n	8004514 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044ae:	4b43      	ldr	r3, [pc, #268]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a42      	ldr	r2, [pc, #264]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044ba:	f7fc fdd9 	bl	8001070 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044c2:	f7fc fdd5 	bl	8001070 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e347      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044d4:	4b39      	ldr	r3, [pc, #228]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044e0:	4b36      	ldr	r3, [pc, #216]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a35      	ldr	r2, [pc, #212]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80044e6:	f043 0308 	orr.w	r3, r3, #8
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	4b33      	ldr	r3, [pc, #204]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	4930      	ldr	r1, [pc, #192]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044fe:	4b2f      	ldr	r3, [pc, #188]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	021b      	lsls	r3, r3, #8
 800450c:	492b      	ldr	r1, [pc, #172]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 800450e:	4313      	orrs	r3, r2
 8004510:	604b      	str	r3, [r1, #4]
 8004512:	e01a      	b.n	800454a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004514:	4b29      	ldr	r3, [pc, #164]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a28      	ldr	r2, [pc, #160]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004520:	f7fc fda6 	bl	8001070 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004528:	f7fc fda2 	bl	8001070 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e314      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800453a:	4b20      	ldr	r3, [pc, #128]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x1dc>
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004548:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d073      	beq.n	800463e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2b08      	cmp	r3, #8
 800455a:	d005      	beq.n	8004568 <HAL_RCC_OscConfig+0x21c>
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b0c      	cmp	r3, #12
 8004560:	d10e      	bne.n	8004580 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b03      	cmp	r3, #3
 8004566:	d10b      	bne.n	8004580 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004568:	4b14      	ldr	r3, [pc, #80]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d063      	beq.n	800463c <HAL_RCC_OscConfig+0x2f0>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d15f      	bne.n	800463c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e2f1      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004588:	d106      	bne.n	8004598 <HAL_RCC_OscConfig+0x24c>
 800458a:	4b0c      	ldr	r3, [pc, #48]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a0b      	ldr	r2, [pc, #44]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e025      	b.n	80045e4 <HAL_RCC_OscConfig+0x298>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045a0:	d114      	bne.n	80045cc <HAL_RCC_OscConfig+0x280>
 80045a2:	4b06      	ldr	r3, [pc, #24]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a05      	ldr	r2, [pc, #20]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80045a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	4b03      	ldr	r3, [pc, #12]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a02      	ldr	r2, [pc, #8]	@ (80045bc <HAL_RCC_OscConfig+0x270>)
 80045b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	e013      	b.n	80045e4 <HAL_RCC_OscConfig+0x298>
 80045bc:	40021000 	.word	0x40021000
 80045c0:	08005f28 	.word	0x08005f28
 80045c4:	20000000 	.word	0x20000000
 80045c8:	20000004 	.word	0x20000004
 80045cc:	4ba0      	ldr	r3, [pc, #640]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a9f      	ldr	r2, [pc, #636]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 80045d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	4b9d      	ldr	r3, [pc, #628]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a9c      	ldr	r2, [pc, #624]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 80045de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d013      	beq.n	8004614 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fc fd40 	bl	8001070 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f4:	f7fc fd3c 	bl	8001070 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	@ 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e2ae      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004606:	4b92      	ldr	r3, [pc, #584]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x2a8>
 8004612:	e014      	b.n	800463e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fc fd2c 	bl	8001070 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800461c:	f7fc fd28 	bl	8001070 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b64      	cmp	r3, #100	@ 0x64
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e29a      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800462e:	4b88      	ldr	r3, [pc, #544]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x2d0>
 800463a:	e000      	b.n	800463e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d060      	beq.n	800470c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	2b04      	cmp	r3, #4
 800464e:	d005      	beq.n	800465c <HAL_RCC_OscConfig+0x310>
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b0c      	cmp	r3, #12
 8004654:	d119      	bne.n	800468a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b02      	cmp	r3, #2
 800465a:	d116      	bne.n	800468a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800465c:	4b7c      	ldr	r3, [pc, #496]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_RCC_OscConfig+0x328>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e277      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004674:	4b76      	ldr	r3, [pc, #472]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	061b      	lsls	r3, r3, #24
 8004682:	4973      	ldr	r1, [pc, #460]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004688:	e040      	b.n	800470c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d023      	beq.n	80046da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004692:	4b6f      	ldr	r3, [pc, #444]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a6e      	ldr	r2, [pc, #440]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 8004698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800469c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469e:	f7fc fce7 	bl	8001070 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a6:	f7fc fce3 	bl	8001070 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e255      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046b8:	4b65      	ldr	r3, [pc, #404]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c4:	4b62      	ldr	r3, [pc, #392]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	061b      	lsls	r3, r3, #24
 80046d2:	495f      	ldr	r1, [pc, #380]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	604b      	str	r3, [r1, #4]
 80046d8:	e018      	b.n	800470c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046da:	4b5d      	ldr	r3, [pc, #372]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a5c      	ldr	r2, [pc, #368]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 80046e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e6:	f7fc fcc3 	bl	8001070 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ee:	f7fc fcbf 	bl	8001070 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e231      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004700:	4b53      	ldr	r3, [pc, #332]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1f0      	bne.n	80046ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b00      	cmp	r3, #0
 8004716:	d03c      	beq.n	8004792 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01c      	beq.n	800475a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004720:	4b4b      	ldr	r3, [pc, #300]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 8004722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004726:	4a4a      	ldr	r2, [pc, #296]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004730:	f7fc fc9e 	bl	8001070 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004738:	f7fc fc9a 	bl	8001070 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e20c      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800474a:	4b41      	ldr	r3, [pc, #260]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 800474c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ef      	beq.n	8004738 <HAL_RCC_OscConfig+0x3ec>
 8004758:	e01b      	b.n	8004792 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800475a:	4b3d      	ldr	r3, [pc, #244]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 800475c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004760:	4a3b      	ldr	r2, [pc, #236]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476a:	f7fc fc81 	bl	8001070 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004772:	f7fc fc7d 	bl	8001070 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e1ef      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004784:	4b32      	ldr	r3, [pc, #200]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 8004786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1ef      	bne.n	8004772 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 80a6 	beq.w	80048ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a0:	2300      	movs	r3, #0
 80047a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 80047a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10d      	bne.n	80047cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b0:	4b27      	ldr	r3, [pc, #156]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 80047b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b4:	4a26      	ldr	r2, [pc, #152]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 80047b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80047bc:	4b24      	ldr	r3, [pc, #144]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 80047be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c8:	2301      	movs	r3, #1
 80047ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047cc:	4b21      	ldr	r3, [pc, #132]	@ (8004854 <HAL_RCC_OscConfig+0x508>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d118      	bne.n	800480a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004854 <HAL_RCC_OscConfig+0x508>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004854 <HAL_RCC_OscConfig+0x508>)
 80047de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e4:	f7fc fc44 	bl	8001070 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ec:	f7fc fc40 	bl	8001070 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e1b2      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fe:	4b15      	ldr	r3, [pc, #84]	@ (8004854 <HAL_RCC_OscConfig+0x508>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d108      	bne.n	8004824 <HAL_RCC_OscConfig+0x4d8>
 8004812:	4b0f      	ldr	r3, [pc, #60]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004818:	4a0d      	ldr	r2, [pc, #52]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004822:	e029      	b.n	8004878 <HAL_RCC_OscConfig+0x52c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b05      	cmp	r3, #5
 800482a:	d115      	bne.n	8004858 <HAL_RCC_OscConfig+0x50c>
 800482c:	4b08      	ldr	r3, [pc, #32]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004832:	4a07      	ldr	r2, [pc, #28]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 8004834:	f043 0304 	orr.w	r3, r3, #4
 8004838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800483c:	4b04      	ldr	r3, [pc, #16]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004842:	4a03      	ldr	r2, [pc, #12]	@ (8004850 <HAL_RCC_OscConfig+0x504>)
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800484c:	e014      	b.n	8004878 <HAL_RCC_OscConfig+0x52c>
 800484e:	bf00      	nop
 8004850:	40021000 	.word	0x40021000
 8004854:	40007000 	.word	0x40007000
 8004858:	4b9a      	ldr	r3, [pc, #616]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485e:	4a99      	ldr	r2, [pc, #612]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004868:	4b96      	ldr	r3, [pc, #600]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486e:	4a95      	ldr	r2, [pc, #596]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004870:	f023 0304 	bic.w	r3, r3, #4
 8004874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d016      	beq.n	80048ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004880:	f7fc fbf6 	bl	8001070 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004886:	e00a      	b.n	800489e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004888:	f7fc fbf2 	bl	8001070 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e162      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800489e:	4b89      	ldr	r3, [pc, #548]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0ed      	beq.n	8004888 <HAL_RCC_OscConfig+0x53c>
 80048ac:	e015      	b.n	80048da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ae:	f7fc fbdf 	bl	8001070 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048b4:	e00a      	b.n	80048cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b6:	f7fc fbdb 	bl	8001070 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e14b      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048cc:	4b7d      	ldr	r3, [pc, #500]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1ed      	bne.n	80048b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048da:	7ffb      	ldrb	r3, [r7, #31]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d105      	bne.n	80048ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e0:	4b78      	ldr	r3, [pc, #480]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e4:	4a77      	ldr	r2, [pc, #476]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 80048e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d03c      	beq.n	8004972 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01c      	beq.n	800493a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004900:	4b70      	ldr	r3, [pc, #448]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004902:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004906:	4a6f      	ldr	r2, [pc, #444]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fc fbae 	bl	8001070 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004918:	f7fc fbaa 	bl	8001070 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e11c      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800492a:	4b66      	ldr	r3, [pc, #408]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 800492c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0ef      	beq.n	8004918 <HAL_RCC_OscConfig+0x5cc>
 8004938:	e01b      	b.n	8004972 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800493a:	4b62      	ldr	r3, [pc, #392]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 800493c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004940:	4a60      	ldr	r2, [pc, #384]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494a:	f7fc fb91 	bl	8001070 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004952:	f7fc fb8d 	bl	8001070 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e0ff      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004964:	4b57      	ldr	r3, [pc, #348]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004966:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1ef      	bne.n	8004952 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 80f3 	beq.w	8004b62 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004980:	2b02      	cmp	r3, #2
 8004982:	f040 80c9 	bne.w	8004b18 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004986:	4b4f      	ldr	r3, [pc, #316]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f003 0203 	and.w	r2, r3, #3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004996:	429a      	cmp	r2, r3
 8004998:	d12c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a4:	3b01      	subs	r3, #1
 80049a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d123      	bne.n	80049f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d11b      	bne.n	80049f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d113      	bne.n	80049f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	3b01      	subs	r3, #1
 80049da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d109      	bne.n	80049f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	3b01      	subs	r3, #1
 80049ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d06b      	beq.n	8004acc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2b0c      	cmp	r3, #12
 80049f8:	d062      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049fa:	4b32      	ldr	r3, [pc, #200]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e0ac      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a16:	f7fc fb2b 	bl	8001070 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1e:	f7fc fb27 	bl	8001070 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e099      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a30:	4b24      	ldr	r3, [pc, #144]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f0      	bne.n	8004a1e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a3c:	4b21      	ldr	r3, [pc, #132]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	4b21      	ldr	r3, [pc, #132]	@ (8004ac8 <HAL_RCC_OscConfig+0x77c>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a4c:	3a01      	subs	r2, #1
 8004a4e:	0112      	lsls	r2, r2, #4
 8004a50:	4311      	orrs	r1, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a56:	0212      	lsls	r2, r2, #8
 8004a58:	4311      	orrs	r1, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a5e:	0852      	lsrs	r2, r2, #1
 8004a60:	3a01      	subs	r2, #1
 8004a62:	0552      	lsls	r2, r2, #21
 8004a64:	4311      	orrs	r1, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a6a:	0852      	lsrs	r2, r2, #1
 8004a6c:	3a01      	subs	r2, #1
 8004a6e:	0652      	lsls	r2, r2, #25
 8004a70:	4311      	orrs	r1, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a76:	06d2      	lsls	r2, r2, #27
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	4912      	ldr	r1, [pc, #72]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a80:	4b10      	ldr	r3, [pc, #64]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a0f      	ldr	r2, [pc, #60]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4a0c      	ldr	r2, [pc, #48]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a98:	f7fc faea 	bl	8001070 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa0:	f7fc fae6 	bl	8001070 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e058      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab2:	4b04      	ldr	r3, [pc, #16]	@ (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004abe:	e050      	b.n	8004b62 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e04f      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004acc:	4b27      	ldr	r3, [pc, #156]	@ (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d144      	bne.n	8004b62 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ad8:	4b24      	ldr	r3, [pc, #144]	@ (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a23      	ldr	r2, [pc, #140]	@ (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004ade:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ae2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ae4:	4b21      	ldr	r3, [pc, #132]	@ (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4a20      	ldr	r2, [pc, #128]	@ (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004aea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004aee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004af0:	f7fc fabe 	bl	8001070 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af8:	f7fc faba 	bl	8001070 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e02c      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b0a:	4b18      	ldr	r3, [pc, #96]	@ (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0x7ac>
 8004b16:	e024      	b.n	8004b62 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b0c      	cmp	r3, #12
 8004b1c:	d01f      	beq.n	8004b5e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b1e:	4b13      	ldr	r3, [pc, #76]	@ (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a12      	ldr	r2, [pc, #72]	@ (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004b24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2a:	f7fc faa1 	bl	8001070 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b32:	f7fc fa9d 	bl	8001070 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e00f      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b44:	4b09      	ldr	r3, [pc, #36]	@ (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f0      	bne.n	8004b32 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004b50:	4b06      	ldr	r3, [pc, #24]	@ (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	4905      	ldr	r1, [pc, #20]	@ (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004b56:	4b06      	ldr	r3, [pc, #24]	@ (8004b70 <HAL_RCC_OscConfig+0x824>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60cb      	str	r3, [r1, #12]
 8004b5c:	e001      	b.n	8004b62 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3720      	adds	r7, #32
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	feeefffc 	.word	0xfeeefffc

08004b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0e7      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b88:	4b75      	ldr	r3, [pc, #468]	@ (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d910      	bls.n	8004bb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b96:	4b72      	ldr	r3, [pc, #456]	@ (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f023 0207 	bic.w	r2, r3, #7
 8004b9e:	4970      	ldr	r1, [pc, #448]	@ (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba6:	4b6e      	ldr	r3, [pc, #440]	@ (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0cf      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d010      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	4b66      	ldr	r3, [pc, #408]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d908      	bls.n	8004be6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd4:	4b63      	ldr	r3, [pc, #396]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4960      	ldr	r1, [pc, #384]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d04c      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bfa:	4b5a      	ldr	r3, [pc, #360]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d121      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e0a6      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d107      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c12:	4b54      	ldr	r3, [pc, #336]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d115      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e09a      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d107      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c2a:	4b4e      	ldr	r3, [pc, #312]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d109      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e08e      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e086      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c4a:	4b46      	ldr	r3, [pc, #280]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f023 0203 	bic.w	r2, r3, #3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	4943      	ldr	r1, [pc, #268]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5c:	f7fc fa08 	bl	8001070 <HAL_GetTick>
 8004c60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c62:	e00a      	b.n	8004c7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c64:	f7fc fa04 	bl	8001070 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e06e      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 020c 	and.w	r2, r3, #12
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d1eb      	bne.n	8004c64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d010      	beq.n	8004cba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	4b31      	ldr	r3, [pc, #196]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d208      	bcs.n	8004cba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	492b      	ldr	r1, [pc, #172]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cba:	4b29      	ldr	r3, [pc, #164]	@ (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d210      	bcs.n	8004cea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc8:	4b25      	ldr	r3, [pc, #148]	@ (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f023 0207 	bic.w	r2, r3, #7
 8004cd0:	4923      	ldr	r1, [pc, #140]	@ (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd8:	4b21      	ldr	r3, [pc, #132]	@ (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d001      	beq.n	8004cea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e036      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d008      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	4918      	ldr	r1, [pc, #96]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d009      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d14:	4b13      	ldr	r3, [pc, #76]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	4910      	ldr	r1, [pc, #64]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d28:	f000 f824 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	091b      	lsrs	r3, r3, #4
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	490b      	ldr	r1, [pc, #44]	@ (8004d68 <HAL_RCC_ClockConfig+0x1f4>)
 8004d3a:	5ccb      	ldrb	r3, [r1, r3]
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	fa22 f303 	lsr.w	r3, r2, r3
 8004d44:	4a09      	ldr	r2, [pc, #36]	@ (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004d46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d48:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <HAL_RCC_ClockConfig+0x1fc>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fc f93f 	bl	8000fd0 <HAL_InitTick>
 8004d52:	4603      	mov	r3, r0
 8004d54:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d56:	7afb      	ldrb	r3, [r7, #11]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40022000 	.word	0x40022000
 8004d64:	40021000 	.word	0x40021000
 8004d68:	08005f28 	.word	0x08005f28
 8004d6c:	20000000 	.word	0x20000000
 8004d70:	20000004 	.word	0x20000004

08004d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b089      	sub	sp, #36	@ 0x24
 8004d78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d82:	4b3e      	ldr	r3, [pc, #248]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 030c 	and.w	r3, r3, #12
 8004d8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <HAL_RCC_GetSysClockFreq+0x34>
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b0c      	cmp	r3, #12
 8004da0:	d121      	bne.n	8004de6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d11e      	bne.n	8004de6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004da8:	4b34      	ldr	r3, [pc, #208]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d107      	bne.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004db4:	4b31      	ldr	r3, [pc, #196]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	e005      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	091b      	lsrs	r3, r3, #4
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8004e80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10d      	bne.n	8004dfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004de4:	e00a      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d102      	bne.n	8004df2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dec:	4b25      	ldr	r3, [pc, #148]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	e004      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d101      	bne.n	8004dfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004df8:	4b23      	ldr	r3, [pc, #140]	@ (8004e88 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2b0c      	cmp	r3, #12
 8004e00:	d134      	bne.n	8004e6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e02:	4b1e      	ldr	r3, [pc, #120]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d003      	beq.n	8004e1a <HAL_RCC_GetSysClockFreq+0xa6>
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d003      	beq.n	8004e20 <HAL_RCC_GetSysClockFreq+0xac>
 8004e18:	e005      	b.n	8004e26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e1c:	617b      	str	r3, [r7, #20]
      break;
 8004e1e:	e005      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e20:	4b19      	ldr	r3, [pc, #100]	@ (8004e88 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e22:	617b      	str	r3, [r7, #20]
      break;
 8004e24:	e002      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	617b      	str	r3, [r7, #20]
      break;
 8004e2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e2c:	4b13      	ldr	r3, [pc, #76]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	091b      	lsrs	r3, r3, #4
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	3301      	adds	r3, #1
 8004e38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e3a:	4b10      	ldr	r3, [pc, #64]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	fb03 f202 	mul.w	r2, r3, r2
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e52:	4b0a      	ldr	r3, [pc, #40]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	0e5b      	lsrs	r3, r3, #25
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e6c:	69bb      	ldr	r3, [r7, #24]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3724      	adds	r7, #36	@ 0x24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	08005f40 	.word	0x08005f40
 8004e84:	00f42400 	.word	0x00f42400
 8004e88:	007a1200 	.word	0x007a1200

08004e8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e90:	4b03      	ldr	r3, [pc, #12]	@ (8004ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e92:	681b      	ldr	r3, [r3, #0]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20000000 	.word	0x20000000

08004ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ea8:	f7ff fff0 	bl	8004e8c <HAL_RCC_GetHCLKFreq>
 8004eac:	4602      	mov	r2, r0
 8004eae:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	0a1b      	lsrs	r3, r3, #8
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	4904      	ldr	r1, [pc, #16]	@ (8004ecc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004eba:	5ccb      	ldrb	r3, [r1, r3]
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	08005f38 	.word	0x08005f38

08004ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ed4:	f7ff ffda 	bl	8004e8c <HAL_RCC_GetHCLKFreq>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	4b06      	ldr	r3, [pc, #24]	@ (8004ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	0adb      	lsrs	r3, r3, #11
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	4904      	ldr	r1, [pc, #16]	@ (8004ef8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ee6:	5ccb      	ldrb	r3, [r1, r3]
 8004ee8:	f003 031f 	and.w	r3, r3, #31
 8004eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	08005f38 	.word	0x08005f38

08004efc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f04:	2300      	movs	r3, #0
 8004f06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f08:	4b2a      	ldr	r3, [pc, #168]	@ (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f14:	f7ff f9b6 	bl	8004284 <HAL_PWREx_GetVoltageRange>
 8004f18:	6178      	str	r0, [r7, #20]
 8004f1a:	e014      	b.n	8004f46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f1c:	4b25      	ldr	r3, [pc, #148]	@ (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f20:	4a24      	ldr	r2, [pc, #144]	@ (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f26:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f28:	4b22      	ldr	r3, [pc, #136]	@ (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f34:	f7ff f9a6 	bl	8004284 <HAL_PWREx_GetVoltageRange>
 8004f38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f44:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f4c:	d10b      	bne.n	8004f66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b80      	cmp	r3, #128	@ 0x80
 8004f52:	d919      	bls.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f58:	d902      	bls.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	e013      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f60:	2301      	movs	r3, #1
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	e010      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b80      	cmp	r3, #128	@ 0x80
 8004f6a:	d902      	bls.n	8004f72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	e00a      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b80      	cmp	r3, #128	@ 0x80
 8004f76:	d102      	bne.n	8004f7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f78:	2302      	movs	r3, #2
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	e004      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b70      	cmp	r3, #112	@ 0x70
 8004f82:	d101      	bne.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f84:	2301      	movs	r3, #1
 8004f86:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f88:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f023 0207 	bic.w	r2, r3, #7
 8004f90:	4909      	ldr	r1, [pc, #36]	@ (8004fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f98:	4b07      	ldr	r3, [pc, #28]	@ (8004fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d001      	beq.n	8004faa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40022000 	.word	0x40022000

08004fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fc8:	2300      	movs	r3, #0
 8004fca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d031      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fdc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004fe0:	d01a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004fe2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004fe6:	d814      	bhi.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d009      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ff0:	d10f      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	4a5c      	ldr	r2, [pc, #368]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ffc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ffe:	e00c      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3304      	adds	r3, #4
 8005004:	2100      	movs	r1, #0
 8005006:	4618      	mov	r0, r3
 8005008:	f000 f9ce 	bl	80053a8 <RCCEx_PLLSAI1_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005010:	e003      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	74fb      	strb	r3, [r7, #19]
      break;
 8005016:	e000      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800501a:	7cfb      	ldrb	r3, [r7, #19]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10b      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005020:	4b51      	ldr	r3, [pc, #324]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005026:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502e:	494e      	ldr	r1, [pc, #312]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005036:	e001      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005038:	7cfb      	ldrb	r3, [r7, #19]
 800503a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 809e 	beq.w	8005186 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800504a:	2300      	movs	r3, #0
 800504c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800504e:	4b46      	ldr	r3, [pc, #280]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00d      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005064:	4b40      	ldr	r3, [pc, #256]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005068:	4a3f      	ldr	r2, [pc, #252]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800506a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800506e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005070:	4b3d      	ldr	r3, [pc, #244]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800507c:	2301      	movs	r3, #1
 800507e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005080:	4b3a      	ldr	r3, [pc, #232]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a39      	ldr	r2, [pc, #228]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800508a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800508c:	f7fb fff0 	bl	8001070 <HAL_GetTick>
 8005090:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005092:	e009      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005094:	f7fb ffec 	bl	8001070 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d902      	bls.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	74fb      	strb	r3, [r7, #19]
        break;
 80050a6:	e005      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050a8:	4b30      	ldr	r3, [pc, #192]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0ef      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80050b4:	7cfb      	ldrb	r3, [r7, #19]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d15a      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d01e      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d019      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050d6:	4b24      	ldr	r3, [pc, #144]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050e2:	4b21      	ldr	r3, [pc, #132]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050f2:	4b1d      	ldr	r3, [pc, #116]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005102:	4a19      	ldr	r2, [pc, #100]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d016      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005114:	f7fb ffac 	bl	8001070 <HAL_GetTick>
 8005118:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800511a:	e00b      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511c:	f7fb ffa8 	bl	8001070 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800512a:	4293      	cmp	r3, r2
 800512c:	d902      	bls.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	74fb      	strb	r3, [r7, #19]
            break;
 8005132:	e006      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005134:	4b0c      	ldr	r3, [pc, #48]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0ec      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005142:	7cfb      	ldrb	r3, [r7, #19]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10b      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005148:	4b07      	ldr	r3, [pc, #28]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005156:	4904      	ldr	r1, [pc, #16]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800515e:	e009      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005160:	7cfb      	ldrb	r3, [r7, #19]
 8005162:	74bb      	strb	r3, [r7, #18]
 8005164:	e006      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005166:	bf00      	nop
 8005168:	40021000 	.word	0x40021000
 800516c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005170:	7cfb      	ldrb	r3, [r7, #19]
 8005172:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005174:	7c7b      	ldrb	r3, [r7, #17]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d105      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800517a:	4b8a      	ldr	r3, [pc, #552]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517e:	4a89      	ldr	r2, [pc, #548]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005180:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005184:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005192:	4b84      	ldr	r3, [pc, #528]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005198:	f023 0203 	bic.w	r2, r3, #3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	4980      	ldr	r1, [pc, #512]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051b4:	4b7b      	ldr	r3, [pc, #492]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ba:	f023 020c 	bic.w	r2, r3, #12
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	4978      	ldr	r1, [pc, #480]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051d6:	4b73      	ldr	r3, [pc, #460]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051dc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e4:	496f      	ldr	r1, [pc, #444]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051f8:	4b6a      	ldr	r3, [pc, #424]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fe:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005206:	4967      	ldr	r1, [pc, #412]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800521a:	4b62      	ldr	r3, [pc, #392]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005220:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005228:	495e      	ldr	r1, [pc, #376]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800523c:	4b59      	ldr	r3, [pc, #356]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005242:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524a:	4956      	ldr	r1, [pc, #344]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800525e:	4b51      	ldr	r3, [pc, #324]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005264:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526c:	494d      	ldr	r1, [pc, #308]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d028      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005280:	4b48      	ldr	r3, [pc, #288]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005286:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528e:	4945      	ldr	r1, [pc, #276]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800529e:	d106      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a0:	4b40      	ldr	r3, [pc, #256]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a3f      	ldr	r2, [pc, #252]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052aa:	60d3      	str	r3, [r2, #12]
 80052ac:	e011      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052b6:	d10c      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	2101      	movs	r1, #1
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f872 	bl	80053a8 <RCCEx_PLLSAI1_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052c8:	7cfb      	ldrb	r3, [r7, #19]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80052ce:	7cfb      	ldrb	r3, [r7, #19]
 80052d0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d028      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052de:	4b31      	ldr	r3, [pc, #196]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ec:	492d      	ldr	r1, [pc, #180]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052fc:	d106      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052fe:	4b29      	ldr	r3, [pc, #164]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	4a28      	ldr	r2, [pc, #160]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005304:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005308:	60d3      	str	r3, [r2, #12]
 800530a:	e011      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005310:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005314:	d10c      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3304      	adds	r3, #4
 800531a:	2101      	movs	r1, #1
 800531c:	4618      	mov	r0, r3
 800531e:	f000 f843 	bl	80053a8 <RCCEx_PLLSAI1_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005326:	7cfb      	ldrb	r3, [r7, #19]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800532c:	7cfb      	ldrb	r3, [r7, #19]
 800532e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01c      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800533c:	4b19      	ldr	r3, [pc, #100]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005342:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800534a:	4916      	ldr	r1, [pc, #88]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005356:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800535a:	d10c      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3304      	adds	r3, #4
 8005360:	2102      	movs	r1, #2
 8005362:	4618      	mov	r0, r3
 8005364:	f000 f820 	bl	80053a8 <RCCEx_PLLSAI1_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800536c:	7cfb      	ldrb	r3, [r7, #19]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005372:	7cfb      	ldrb	r3, [r7, #19]
 8005374:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005382:	4b08      	ldr	r3, [pc, #32]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005388:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005390:	4904      	ldr	r1, [pc, #16]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005398:	7cbb      	ldrb	r3, [r7, #18]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40021000 	.word	0x40021000

080053a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053b6:	4b74      	ldr	r3, [pc, #464]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d018      	beq.n	80053f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053c2:	4b71      	ldr	r3, [pc, #452]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f003 0203 	and.w	r2, r3, #3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d10d      	bne.n	80053ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
       ||
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80053da:	4b6b      	ldr	r3, [pc, #428]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	091b      	lsrs	r3, r3, #4
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
       ||
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d047      	beq.n	800547e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	73fb      	strb	r3, [r7, #15]
 80053f2:	e044      	b.n	800547e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d018      	beq.n	800542e <RCCEx_PLLSAI1_Config+0x86>
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	d825      	bhi.n	800544c <RCCEx_PLLSAI1_Config+0xa4>
 8005400:	2b01      	cmp	r3, #1
 8005402:	d002      	beq.n	800540a <RCCEx_PLLSAI1_Config+0x62>
 8005404:	2b02      	cmp	r3, #2
 8005406:	d009      	beq.n	800541c <RCCEx_PLLSAI1_Config+0x74>
 8005408:	e020      	b.n	800544c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800540a:	4b5f      	ldr	r3, [pc, #380]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d11d      	bne.n	8005452 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800541a:	e01a      	b.n	8005452 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800541c:	4b5a      	ldr	r3, [pc, #360]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005424:	2b00      	cmp	r3, #0
 8005426:	d116      	bne.n	8005456 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800542c:	e013      	b.n	8005456 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800542e:	4b56      	ldr	r3, [pc, #344]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10f      	bne.n	800545a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800543a:	4b53      	ldr	r3, [pc, #332]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d109      	bne.n	800545a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800544a:	e006      	b.n	800545a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	73fb      	strb	r3, [r7, #15]
      break;
 8005450:	e004      	b.n	800545c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005452:	bf00      	nop
 8005454:	e002      	b.n	800545c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005456:	bf00      	nop
 8005458:	e000      	b.n	800545c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800545a:	bf00      	nop
    }

    if(status == HAL_OK)
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10d      	bne.n	800547e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005462:	4b49      	ldr	r3, [pc, #292]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6819      	ldr	r1, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	3b01      	subs	r3, #1
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	430b      	orrs	r3, r1
 8005478:	4943      	ldr	r1, [pc, #268]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800547a:	4313      	orrs	r3, r2
 800547c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d17c      	bne.n	800557e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005484:	4b40      	ldr	r3, [pc, #256]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a3f      	ldr	r2, [pc, #252]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800548a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800548e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005490:	f7fb fdee 	bl	8001070 <HAL_GetTick>
 8005494:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005496:	e009      	b.n	80054ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005498:	f7fb fdea 	bl	8001070 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d902      	bls.n	80054ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	73fb      	strb	r3, [r7, #15]
        break;
 80054aa:	e005      	b.n	80054b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054ac:	4b36      	ldr	r3, [pc, #216]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1ef      	bne.n	8005498 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d15f      	bne.n	800557e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d110      	bne.n	80054e6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054c4:	4b30      	ldr	r3, [pc, #192]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80054cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6892      	ldr	r2, [r2, #8]
 80054d4:	0211      	lsls	r1, r2, #8
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	68d2      	ldr	r2, [r2, #12]
 80054da:	06d2      	lsls	r2, r2, #27
 80054dc:	430a      	orrs	r2, r1
 80054de:	492a      	ldr	r1, [pc, #168]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	610b      	str	r3, [r1, #16]
 80054e4:	e027      	b.n	8005536 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d112      	bne.n	8005512 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054ec:	4b26      	ldr	r3, [pc, #152]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80054f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6892      	ldr	r2, [r2, #8]
 80054fc:	0211      	lsls	r1, r2, #8
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6912      	ldr	r2, [r2, #16]
 8005502:	0852      	lsrs	r2, r2, #1
 8005504:	3a01      	subs	r2, #1
 8005506:	0552      	lsls	r2, r2, #21
 8005508:	430a      	orrs	r2, r1
 800550a:	491f      	ldr	r1, [pc, #124]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800550c:	4313      	orrs	r3, r2
 800550e:	610b      	str	r3, [r1, #16]
 8005510:	e011      	b.n	8005536 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005512:	4b1d      	ldr	r3, [pc, #116]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800551a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6892      	ldr	r2, [r2, #8]
 8005522:	0211      	lsls	r1, r2, #8
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6952      	ldr	r2, [r2, #20]
 8005528:	0852      	lsrs	r2, r2, #1
 800552a:	3a01      	subs	r2, #1
 800552c:	0652      	lsls	r2, r2, #25
 800552e:	430a      	orrs	r2, r1
 8005530:	4915      	ldr	r1, [pc, #84]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005532:	4313      	orrs	r3, r2
 8005534:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005536:	4b14      	ldr	r3, [pc, #80]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a13      	ldr	r2, [pc, #76]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800553c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005540:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005542:	f7fb fd95 	bl	8001070 <HAL_GetTick>
 8005546:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005548:	e009      	b.n	800555e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800554a:	f7fb fd91 	bl	8001070 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d902      	bls.n	800555e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	73fb      	strb	r3, [r7, #15]
          break;
 800555c:	e005      	b.n	800556a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800555e:	4b0a      	ldr	r3, [pc, #40]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0ef      	beq.n	800554a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d106      	bne.n	800557e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005570:	4b05      	ldr	r3, [pc, #20]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	4903      	ldr	r1, [pc, #12]	@ (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800557a:	4313      	orrs	r3, r2
 800557c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800557e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40021000 	.word	0x40021000

0800558c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e040      	b.n	8005620 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fb fc28 	bl	8000e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2224      	movs	r2, #36	@ 0x24
 80055b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0201 	bic.w	r2, r2, #1
 80055c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fa54 	bl	8005a80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f825 	bl	8005628 <UART_SetConfig>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e01b      	b.n	8005620 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005606:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0201 	orr.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fad3 	bl	8005bc4 <UART_CheckIdleState>
 800561e:	4603      	mov	r3, r0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800562c:	b08a      	sub	sp, #40	@ 0x28
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	431a      	orrs	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	431a      	orrs	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	4313      	orrs	r3, r2
 800564e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	4bb4      	ldr	r3, [pc, #720]	@ (8005928 <UART_SetConfig+0x300>)
 8005658:	4013      	ands	r3, r2
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005660:	430b      	orrs	r3, r1
 8005662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4aa9      	ldr	r2, [pc, #676]	@ (800592c <UART_SetConfig+0x304>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d004      	beq.n	8005694 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005690:	4313      	orrs	r3, r2
 8005692:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a4:	430a      	orrs	r2, r1
 80056a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4aa0      	ldr	r2, [pc, #640]	@ (8005930 <UART_SetConfig+0x308>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d126      	bne.n	8005700 <UART_SetConfig+0xd8>
 80056b2:	4ba0      	ldr	r3, [pc, #640]	@ (8005934 <UART_SetConfig+0x30c>)
 80056b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b8:	f003 0303 	and.w	r3, r3, #3
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d81b      	bhi.n	80056f8 <UART_SetConfig+0xd0>
 80056c0:	a201      	add	r2, pc, #4	@ (adr r2, 80056c8 <UART_SetConfig+0xa0>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	080056d9 	.word	0x080056d9
 80056cc:	080056e9 	.word	0x080056e9
 80056d0:	080056e1 	.word	0x080056e1
 80056d4:	080056f1 	.word	0x080056f1
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056de:	e080      	b.n	80057e2 <UART_SetConfig+0x1ba>
 80056e0:	2302      	movs	r3, #2
 80056e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056e6:	e07c      	b.n	80057e2 <UART_SetConfig+0x1ba>
 80056e8:	2304      	movs	r3, #4
 80056ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ee:	e078      	b.n	80057e2 <UART_SetConfig+0x1ba>
 80056f0:	2308      	movs	r3, #8
 80056f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056f6:	e074      	b.n	80057e2 <UART_SetConfig+0x1ba>
 80056f8:	2310      	movs	r3, #16
 80056fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056fe:	e070      	b.n	80057e2 <UART_SetConfig+0x1ba>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a8c      	ldr	r2, [pc, #560]	@ (8005938 <UART_SetConfig+0x310>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d138      	bne.n	800577c <UART_SetConfig+0x154>
 800570a:	4b8a      	ldr	r3, [pc, #552]	@ (8005934 <UART_SetConfig+0x30c>)
 800570c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005710:	f003 030c 	and.w	r3, r3, #12
 8005714:	2b0c      	cmp	r3, #12
 8005716:	d82d      	bhi.n	8005774 <UART_SetConfig+0x14c>
 8005718:	a201      	add	r2, pc, #4	@ (adr r2, 8005720 <UART_SetConfig+0xf8>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005755 	.word	0x08005755
 8005724:	08005775 	.word	0x08005775
 8005728:	08005775 	.word	0x08005775
 800572c:	08005775 	.word	0x08005775
 8005730:	08005765 	.word	0x08005765
 8005734:	08005775 	.word	0x08005775
 8005738:	08005775 	.word	0x08005775
 800573c:	08005775 	.word	0x08005775
 8005740:	0800575d 	.word	0x0800575d
 8005744:	08005775 	.word	0x08005775
 8005748:	08005775 	.word	0x08005775
 800574c:	08005775 	.word	0x08005775
 8005750:	0800576d 	.word	0x0800576d
 8005754:	2300      	movs	r3, #0
 8005756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800575a:	e042      	b.n	80057e2 <UART_SetConfig+0x1ba>
 800575c:	2302      	movs	r3, #2
 800575e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005762:	e03e      	b.n	80057e2 <UART_SetConfig+0x1ba>
 8005764:	2304      	movs	r3, #4
 8005766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800576a:	e03a      	b.n	80057e2 <UART_SetConfig+0x1ba>
 800576c:	2308      	movs	r3, #8
 800576e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005772:	e036      	b.n	80057e2 <UART_SetConfig+0x1ba>
 8005774:	2310      	movs	r3, #16
 8005776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800577a:	e032      	b.n	80057e2 <UART_SetConfig+0x1ba>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a6a      	ldr	r2, [pc, #424]	@ (800592c <UART_SetConfig+0x304>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d12a      	bne.n	80057dc <UART_SetConfig+0x1b4>
 8005786:	4b6b      	ldr	r3, [pc, #428]	@ (8005934 <UART_SetConfig+0x30c>)
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005790:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005794:	d01a      	beq.n	80057cc <UART_SetConfig+0x1a4>
 8005796:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800579a:	d81b      	bhi.n	80057d4 <UART_SetConfig+0x1ac>
 800579c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057a0:	d00c      	beq.n	80057bc <UART_SetConfig+0x194>
 80057a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057a6:	d815      	bhi.n	80057d4 <UART_SetConfig+0x1ac>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <UART_SetConfig+0x18c>
 80057ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057b0:	d008      	beq.n	80057c4 <UART_SetConfig+0x19c>
 80057b2:	e00f      	b.n	80057d4 <UART_SetConfig+0x1ac>
 80057b4:	2300      	movs	r3, #0
 80057b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ba:	e012      	b.n	80057e2 <UART_SetConfig+0x1ba>
 80057bc:	2302      	movs	r3, #2
 80057be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057c2:	e00e      	b.n	80057e2 <UART_SetConfig+0x1ba>
 80057c4:	2304      	movs	r3, #4
 80057c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ca:	e00a      	b.n	80057e2 <UART_SetConfig+0x1ba>
 80057cc:	2308      	movs	r3, #8
 80057ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057d2:	e006      	b.n	80057e2 <UART_SetConfig+0x1ba>
 80057d4:	2310      	movs	r3, #16
 80057d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057da:	e002      	b.n	80057e2 <UART_SetConfig+0x1ba>
 80057dc:	2310      	movs	r3, #16
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a51      	ldr	r2, [pc, #324]	@ (800592c <UART_SetConfig+0x304>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d17a      	bne.n	80058e2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d824      	bhi.n	800583e <UART_SetConfig+0x216>
 80057f4:	a201      	add	r2, pc, #4	@ (adr r2, 80057fc <UART_SetConfig+0x1d4>)
 80057f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fa:	bf00      	nop
 80057fc:	08005821 	.word	0x08005821
 8005800:	0800583f 	.word	0x0800583f
 8005804:	08005829 	.word	0x08005829
 8005808:	0800583f 	.word	0x0800583f
 800580c:	0800582f 	.word	0x0800582f
 8005810:	0800583f 	.word	0x0800583f
 8005814:	0800583f 	.word	0x0800583f
 8005818:	0800583f 	.word	0x0800583f
 800581c:	08005837 	.word	0x08005837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005820:	f7ff fb40 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 8005824:	61f8      	str	r0, [r7, #28]
        break;
 8005826:	e010      	b.n	800584a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005828:	4b44      	ldr	r3, [pc, #272]	@ (800593c <UART_SetConfig+0x314>)
 800582a:	61fb      	str	r3, [r7, #28]
        break;
 800582c:	e00d      	b.n	800584a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800582e:	f7ff faa1 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8005832:	61f8      	str	r0, [r7, #28]
        break;
 8005834:	e009      	b.n	800584a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800583a:	61fb      	str	r3, [r7, #28]
        break;
 800583c:	e005      	b.n	800584a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005848:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 8107 	beq.w	8005a60 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	4613      	mov	r3, r2
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	4413      	add	r3, r2
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	429a      	cmp	r2, r3
 8005860:	d305      	bcc.n	800586e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	429a      	cmp	r2, r3
 800586c:	d903      	bls.n	8005876 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005874:	e0f4      	b.n	8005a60 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	2200      	movs	r2, #0
 800587a:	461c      	mov	r4, r3
 800587c:	4615      	mov	r5, r2
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	f04f 0300 	mov.w	r3, #0
 8005886:	022b      	lsls	r3, r5, #8
 8005888:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800588c:	0222      	lsls	r2, r4, #8
 800588e:	68f9      	ldr	r1, [r7, #12]
 8005890:	6849      	ldr	r1, [r1, #4]
 8005892:	0849      	lsrs	r1, r1, #1
 8005894:	2000      	movs	r0, #0
 8005896:	4688      	mov	r8, r1
 8005898:	4681      	mov	r9, r0
 800589a:	eb12 0a08 	adds.w	sl, r2, r8
 800589e:	eb43 0b09 	adc.w	fp, r3, r9
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	603b      	str	r3, [r7, #0]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058b0:	4650      	mov	r0, sl
 80058b2:	4659      	mov	r1, fp
 80058b4:	f7fa fc8a 	bl	80001cc <__aeabi_uldivmod>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4613      	mov	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058c6:	d308      	bcc.n	80058da <UART_SetConfig+0x2b2>
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058ce:	d204      	bcs.n	80058da <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	60da      	str	r2, [r3, #12]
 80058d8:	e0c2      	b.n	8005a60 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80058e0:	e0be      	b.n	8005a60 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058ea:	d16a      	bne.n	80059c2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80058ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d834      	bhi.n	800595e <UART_SetConfig+0x336>
 80058f4:	a201      	add	r2, pc, #4	@ (adr r2, 80058fc <UART_SetConfig+0x2d4>)
 80058f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fa:	bf00      	nop
 80058fc:	08005921 	.word	0x08005921
 8005900:	08005941 	.word	0x08005941
 8005904:	08005949 	.word	0x08005949
 8005908:	0800595f 	.word	0x0800595f
 800590c:	0800594f 	.word	0x0800594f
 8005910:	0800595f 	.word	0x0800595f
 8005914:	0800595f 	.word	0x0800595f
 8005918:	0800595f 	.word	0x0800595f
 800591c:	08005957 	.word	0x08005957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005920:	f7ff fac0 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 8005924:	61f8      	str	r0, [r7, #28]
        break;
 8005926:	e020      	b.n	800596a <UART_SetConfig+0x342>
 8005928:	efff69f3 	.word	0xefff69f3
 800592c:	40008000 	.word	0x40008000
 8005930:	40013800 	.word	0x40013800
 8005934:	40021000 	.word	0x40021000
 8005938:	40004400 	.word	0x40004400
 800593c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005940:	f7ff fac6 	bl	8004ed0 <HAL_RCC_GetPCLK2Freq>
 8005944:	61f8      	str	r0, [r7, #28]
        break;
 8005946:	e010      	b.n	800596a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005948:	4b4c      	ldr	r3, [pc, #304]	@ (8005a7c <UART_SetConfig+0x454>)
 800594a:	61fb      	str	r3, [r7, #28]
        break;
 800594c:	e00d      	b.n	800596a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800594e:	f7ff fa11 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8005952:	61f8      	str	r0, [r7, #28]
        break;
 8005954:	e009      	b.n	800596a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800595a:	61fb      	str	r3, [r7, #28]
        break;
 800595c:	e005      	b.n	800596a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d077      	beq.n	8005a60 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	005a      	lsls	r2, r3, #1
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	085b      	lsrs	r3, r3, #1
 800597a:	441a      	add	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	fbb2 f3f3 	udiv	r3, r2, r3
 8005984:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b0f      	cmp	r3, #15
 800598a:	d916      	bls.n	80059ba <UART_SetConfig+0x392>
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005992:	d212      	bcs.n	80059ba <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	b29b      	uxth	r3, r3
 8005998:	f023 030f 	bic.w	r3, r3, #15
 800599c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	085b      	lsrs	r3, r3, #1
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	8afb      	ldrh	r3, [r7, #22]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	8afa      	ldrh	r2, [r7, #22]
 80059b6:	60da      	str	r2, [r3, #12]
 80059b8:	e052      	b.n	8005a60 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80059c0:	e04e      	b.n	8005a60 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d827      	bhi.n	8005a1a <UART_SetConfig+0x3f2>
 80059ca:	a201      	add	r2, pc, #4	@ (adr r2, 80059d0 <UART_SetConfig+0x3a8>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	080059f5 	.word	0x080059f5
 80059d4:	080059fd 	.word	0x080059fd
 80059d8:	08005a05 	.word	0x08005a05
 80059dc:	08005a1b 	.word	0x08005a1b
 80059e0:	08005a0b 	.word	0x08005a0b
 80059e4:	08005a1b 	.word	0x08005a1b
 80059e8:	08005a1b 	.word	0x08005a1b
 80059ec:	08005a1b 	.word	0x08005a1b
 80059f0:	08005a13 	.word	0x08005a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f4:	f7ff fa56 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 80059f8:	61f8      	str	r0, [r7, #28]
        break;
 80059fa:	e014      	b.n	8005a26 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059fc:	f7ff fa68 	bl	8004ed0 <HAL_RCC_GetPCLK2Freq>
 8005a00:	61f8      	str	r0, [r7, #28]
        break;
 8005a02:	e010      	b.n	8005a26 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a04:	4b1d      	ldr	r3, [pc, #116]	@ (8005a7c <UART_SetConfig+0x454>)
 8005a06:	61fb      	str	r3, [r7, #28]
        break;
 8005a08:	e00d      	b.n	8005a26 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a0a:	f7ff f9b3 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8005a0e:	61f8      	str	r0, [r7, #28]
        break;
 8005a10:	e009      	b.n	8005a26 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a16:	61fb      	str	r3, [r7, #28]
        break;
 8005a18:	e005      	b.n	8005a26 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a24:	bf00      	nop
    }

    if (pclk != 0U)
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d019      	beq.n	8005a60 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	085a      	lsrs	r2, r3, #1
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	441a      	add	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	2b0f      	cmp	r3, #15
 8005a44:	d909      	bls.n	8005a5a <UART_SetConfig+0x432>
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a4c:	d205      	bcs.n	8005a5a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60da      	str	r2, [r3, #12]
 8005a58:	e002      	b.n	8005a60 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005a6c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3728      	adds	r7, #40	@ 0x28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a7a:	bf00      	nop
 8005a7c:	00f42400 	.word	0x00f42400

08005a80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b14:	f003 0310 	and.w	r3, r3, #16
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d01a      	beq.n	8005b96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b7e:	d10a      	bne.n	8005b96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	605a      	str	r2, [r3, #4]
  }
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b098      	sub	sp, #96	@ 0x60
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bd4:	f7fb fa4c 	bl	8001070 <HAL_GetTick>
 8005bd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d12e      	bne.n	8005c46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005be8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f88c 	bl	8005d14 <UART_WaitOnFlagUntilTimeout>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d021      	beq.n	8005c46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0a:	e853 3f00 	ldrex	r3, [r3]
 8005c0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c16:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c20:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c28:	e841 2300 	strex	r3, r2, [r1]
 8005c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1e6      	bne.n	8005c02 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2220      	movs	r2, #32
 8005c38:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e062      	b.n	8005d0c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d149      	bne.n	8005ce8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f856 	bl	8005d14 <UART_WaitOnFlagUntilTimeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d03c      	beq.n	8005ce8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c76:	e853 3f00 	ldrex	r3, [r3]
 8005c7a:	623b      	str	r3, [r7, #32]
   return(result);
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c94:	e841 2300 	strex	r3, r2, [r1]
 8005c98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e6      	bne.n	8005c6e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0301 	bic.w	r3, r3, #1
 8005cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cc0:	61fa      	str	r2, [r7, #28]
 8005cc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	69b9      	ldr	r1, [r7, #24]
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e5      	bne.n	8005ca0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e011      	b.n	8005d0c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3758      	adds	r7, #88	@ 0x58
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	603b      	str	r3, [r7, #0]
 8005d20:	4613      	mov	r3, r2
 8005d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d24:	e04f      	b.n	8005dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d2c:	d04b      	beq.n	8005dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d2e:	f7fb f99f 	bl	8001070 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d302      	bcc.n	8005d44 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e04e      	b.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d037      	beq.n	8005dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b80      	cmp	r3, #128	@ 0x80
 8005d5a:	d034      	beq.n	8005dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b40      	cmp	r3, #64	@ 0x40
 8005d60:	d031      	beq.n	8005dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d110      	bne.n	8005d92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2208      	movs	r2, #8
 8005d76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 f838 	bl	8005dee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2208      	movs	r2, #8
 8005d82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e029      	b.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005da0:	d111      	bne.n	8005dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005daa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f81e 	bl	8005dee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2220      	movs	r2, #32
 8005db6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e00f      	b.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69da      	ldr	r2, [r3, #28]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	bf0c      	ite	eq
 8005dd6:	2301      	moveq	r3, #1
 8005dd8:	2300      	movne	r3, #0
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	461a      	mov	r2, r3
 8005dde:	79fb      	ldrb	r3, [r7, #7]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d0a0      	beq.n	8005d26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b095      	sub	sp, #84	@ 0x54
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e14:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e16:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e6      	bne.n	8005df6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f023 0301 	bic.w	r3, r3, #1
 8005e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3308      	adds	r3, #8
 8005e46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e50:	e841 2300 	strex	r3, r2, [r1]
 8005e54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e5      	bne.n	8005e28 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d118      	bne.n	8005e96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f023 0310 	bic.w	r3, r3, #16
 8005e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e82:	61bb      	str	r3, [r7, #24]
 8005e84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6979      	ldr	r1, [r7, #20]
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e6      	bne.n	8005e64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005eaa:	bf00      	nop
 8005eac:	3754      	adds	r7, #84	@ 0x54
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <memset>:
 8005eb6:	4402      	add	r2, r0
 8005eb8:	4603      	mov	r3, r0
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d100      	bne.n	8005ec0 <memset+0xa>
 8005ebe:	4770      	bx	lr
 8005ec0:	f803 1b01 	strb.w	r1, [r3], #1
 8005ec4:	e7f9      	b.n	8005eba <memset+0x4>
	...

08005ec8 <__libc_init_array>:
 8005ec8:	b570      	push	{r4, r5, r6, lr}
 8005eca:	4d0d      	ldr	r5, [pc, #52]	@ (8005f00 <__libc_init_array+0x38>)
 8005ecc:	4c0d      	ldr	r4, [pc, #52]	@ (8005f04 <__libc_init_array+0x3c>)
 8005ece:	1b64      	subs	r4, r4, r5
 8005ed0:	10a4      	asrs	r4, r4, #2
 8005ed2:	2600      	movs	r6, #0
 8005ed4:	42a6      	cmp	r6, r4
 8005ed6:	d109      	bne.n	8005eec <__libc_init_array+0x24>
 8005ed8:	4d0b      	ldr	r5, [pc, #44]	@ (8005f08 <__libc_init_array+0x40>)
 8005eda:	4c0c      	ldr	r4, [pc, #48]	@ (8005f0c <__libc_init_array+0x44>)
 8005edc:	f000 f818 	bl	8005f10 <_init>
 8005ee0:	1b64      	subs	r4, r4, r5
 8005ee2:	10a4      	asrs	r4, r4, #2
 8005ee4:	2600      	movs	r6, #0
 8005ee6:	42a6      	cmp	r6, r4
 8005ee8:	d105      	bne.n	8005ef6 <__libc_init_array+0x2e>
 8005eea:	bd70      	pop	{r4, r5, r6, pc}
 8005eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef0:	4798      	blx	r3
 8005ef2:	3601      	adds	r6, #1
 8005ef4:	e7ee      	b.n	8005ed4 <__libc_init_array+0xc>
 8005ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efa:	4798      	blx	r3
 8005efc:	3601      	adds	r6, #1
 8005efe:	e7f2      	b.n	8005ee6 <__libc_init_array+0x1e>
 8005f00:	08005f78 	.word	0x08005f78
 8005f04:	08005f78 	.word	0x08005f78
 8005f08:	08005f78 	.word	0x08005f78
 8005f0c:	08005f7c 	.word	0x08005f7c

08005f10 <_init>:
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f12:	bf00      	nop
 8005f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f16:	bc08      	pop	{r3}
 8005f18:	469e      	mov	lr, r3
 8005f1a:	4770      	bx	lr

08005f1c <_fini>:
 8005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1e:	bf00      	nop
 8005f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f22:	bc08      	pop	{r3}
 8005f24:	469e      	mov	lr, r3
 8005f26:	4770      	bx	lr
