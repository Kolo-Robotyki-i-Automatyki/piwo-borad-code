
power_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f28  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080040b4  080040b4  000050b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040fc  080040fc  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080040fc  080040fc  000050fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004104  08004104  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004104  08004104  00005104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004108  08004108  00005108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800410c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000000c  08004118  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08004118  00006190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec21  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0b  00000000  00000000  00014c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00016b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a31  00000000  00000000  000178a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212f0  00000000  00000000  000182d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e686  00000000  00000000  000395c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0d1a  00000000  00000000  00047c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118969  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d8  00000000  00000000  001189ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0011c184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800409c 	.word	0x0800409c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800409c 	.word	0x0800409c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fbed 	bl	8000c9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f830 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f98a 	bl	80007e0 <MX_GPIO_Init>
  MX_CAN1_Init();
 80004cc:	f000 f8e2 	bl	8000694 <MX_CAN1_Init>
  MX_ADC1_Init();
 80004d0:	f000 f87c 	bl	80005cc <MX_ADC1_Init>
  MX_I2C1_SMBUS_Init();
 80004d4:	f000 f912 	bl	80006fc <MX_I2C1_SMBUS_Init>
  MX_USART1_UART_Init();
 80004d8:	f000 f952 	bl	8000780 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ON_5V_GPIO_Port, ON_5V_Pin, GPIO_PIN_SET);
 80004dc:	2201      	movs	r2, #1
 80004de:	2102      	movs	r1, #2
 80004e0:	4810      	ldr	r0, [pc, #64]	@ (8000524 <main+0x68>)
 80004e2:	f001 fe71 	bl	80021c8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80004e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004ea:	f000 fc4d 	bl	8000d88 <HAL_Delay>
  HAL_GPIO_WritePin(ON_12V_GPIO_Port, ON_12V_Pin, GPIO_PIN_SET);
 80004ee:	2201      	movs	r2, #1
 80004f0:	2101      	movs	r1, #1
 80004f2:	480c      	ldr	r0, [pc, #48]	@ (8000524 <main+0x68>)
 80004f4:	f001 fe68 	bl	80021c8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80004f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004fc:	f000 fc44 	bl	8000d88 <HAL_Delay>
  HAL_GPIO_WritePin(ON_Arm_GPIO_Port, ON_Arm_Pin, GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2180      	movs	r1, #128	@ 0x80
 8000504:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000508:	f001 fe5e 	bl	80021c8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800050c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000510:	f000 fc3a 	bl	8000d88 <HAL_Delay>
  HAL_GPIO_WritePin(ON_Motor_GPIO_Port, ON_Motor_Pin, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2140      	movs	r1, #64	@ 0x40
 8000518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051c:	f001 fe54 	bl	80021c8 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <main+0x64>
 8000524:	48000400 	.word	0x48000400

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b096      	sub	sp, #88	@ 0x58
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2244      	movs	r2, #68	@ 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f003 fd83 	bl	8004042 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800054e:	f001 fe61 	bl	8002214 <HAL_PWREx_ControlVoltageScaling>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000558:	f000 f996 	bl	8000888 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800055c:	2310      	movs	r3, #16
 800055e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000568:	2360      	movs	r3, #96	@ 0x60
 800056a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000570:	2301      	movs	r3, #1
 8000572:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000578:	2310      	movs	r3, #16
 800057a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057c:	2307      	movs	r3, #7
 800057e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4618      	mov	r0, r3
 800058e:	f001 fe97 	bl	80022c0 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000598:	f000 f976 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2303      	movs	r3, #3
 80005a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	2101      	movs	r1, #1
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fa97 	bl	8002ae8 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005c0:	f000 f962 	bl	8000888 <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3758      	adds	r7, #88	@ 0x58
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d2:	463b      	mov	r3, r7
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
 80005e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005e2:	4b29      	ldr	r3, [pc, #164]	@ (8000688 <MX_ADC1_Init+0xbc>)
 80005e4:	4a29      	ldr	r2, [pc, #164]	@ (800068c <MX_ADC1_Init+0xc0>)
 80005e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005e8:	4b27      	ldr	r3, [pc, #156]	@ (8000688 <MX_ADC1_Init+0xbc>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ee:	4b26      	ldr	r3, [pc, #152]	@ (8000688 <MX_ADC1_Init+0xbc>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f4:	4b24      	ldr	r3, [pc, #144]	@ (8000688 <MX_ADC1_Init+0xbc>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fa:	4b23      	ldr	r3, [pc, #140]	@ (8000688 <MX_ADC1_Init+0xbc>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000600:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <MX_ADC1_Init+0xbc>)
 8000602:	2204      	movs	r2, #4
 8000604:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000606:	4b20      	ldr	r3, [pc, #128]	@ (8000688 <MX_ADC1_Init+0xbc>)
 8000608:	2200      	movs	r2, #0
 800060a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800060c:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <MX_ADC1_Init+0xbc>)
 800060e:	2200      	movs	r2, #0
 8000610:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000612:	4b1d      	ldr	r3, [pc, #116]	@ (8000688 <MX_ADC1_Init+0xbc>)
 8000614:	2201      	movs	r2, #1
 8000616:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000618:	4b1b      	ldr	r3, [pc, #108]	@ (8000688 <MX_ADC1_Init+0xbc>)
 800061a:	2200      	movs	r2, #0
 800061c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000620:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <MX_ADC1_Init+0xbc>)
 8000622:	2200      	movs	r2, #0
 8000624:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b18      	ldr	r3, [pc, #96]	@ (8000688 <MX_ADC1_Init+0xbc>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062c:	4b16      	ldr	r3, [pc, #88]	@ (8000688 <MX_ADC1_Init+0xbc>)
 800062e:	2200      	movs	r2, #0
 8000630:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000634:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <MX_ADC1_Init+0xbc>)
 8000636:	2200      	movs	r2, #0
 8000638:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800063a:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <MX_ADC1_Init+0xbc>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000642:	4811      	ldr	r0, [pc, #68]	@ (8000688 <MX_ADC1_Init+0xbc>)
 8000644:	f000 fd50 	bl	80010e8 <HAL_ADC_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800064e:	f000 f91b 	bl	8000888 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000652:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <MX_ADC1_Init+0xc4>)
 8000654:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000656:	2306      	movs	r3, #6
 8000658:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800065e:	237f      	movs	r3, #127	@ 0x7f
 8000660:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000662:	2304      	movs	r3, #4
 8000664:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066a:	463b      	mov	r3, r7
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <MX_ADC1_Init+0xbc>)
 8000670:	f000 fe7c 	bl	800136c <HAL_ADC_ConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800067a:	f000 f905 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	3718      	adds	r7, #24
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000028 	.word	0x20000028
 800068c:	50040000 	.word	0x50040000
 8000690:	14f00020 	.word	0x14f00020

08000694 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000698:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_CAN1_Init+0x60>)
 800069a:	4a17      	ldr	r2, [pc, #92]	@ (80006f8 <MX_CAN1_Init+0x64>)
 800069c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <MX_CAN1_Init+0x60>)
 80006a0:	2210      	movs	r2, #16
 80006a2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006a4:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_CAN1_Init+0x60>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006aa:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <MX_CAN1_Init+0x60>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006b0:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <MX_CAN1_Init+0x60>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_CAN1_Init+0x60>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <MX_CAN1_Init+0x60>)
 80006be:	2200      	movs	r2, #0
 80006c0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_CAN1_Init+0x60>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <MX_CAN1_Init+0x60>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_CAN1_Init+0x60>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <MX_CAN1_Init+0x60>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_CAN1_Init+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	@ (80006f4 <MX_CAN1_Init+0x60>)
 80006e2:	f001 fa25 	bl	8001b30 <HAL_CAN_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f000 f8cc 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	40006400 	.word	0x40006400

080006fc <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000700:	4b1c      	ldr	r3, [pc, #112]	@ (8000774 <MX_I2C1_SMBUS_Init+0x78>)
 8000702:	4a1d      	ldr	r2, [pc, #116]	@ (8000778 <MX_I2C1_SMBUS_Init+0x7c>)
 8000704:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00B07CB4;
 8000706:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <MX_I2C1_SMBUS_Init+0x78>)
 8000708:	4a1c      	ldr	r2, [pc, #112]	@ (800077c <MX_I2C1_SMBUS_Init+0x80>)
 800070a:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 800070c:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <MX_I2C1_SMBUS_Init+0x78>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8000712:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <MX_I2C1_SMBUS_Init+0x78>)
 8000714:	2202      	movs	r2, #2
 8000716:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000718:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <MX_I2C1_SMBUS_Init+0x78>)
 800071a:	2201      	movs	r2, #1
 800071c:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 800071e:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <MX_I2C1_SMBUS_Init+0x78>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000724:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <MX_I2C1_SMBUS_Init+0x78>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 800072a:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_I2C1_SMBUS_Init+0x78>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000730:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <MX_I2C1_SMBUS_Init+0x78>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000736:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_I2C1_SMBUS_Init+0x78>)
 8000738:	2200      	movs	r2, #0
 800073a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 800073c:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <MX_I2C1_SMBUS_Init+0x78>)
 800073e:	2200      	movs	r2, #0
 8000740:	629a      	str	r2, [r3, #40]	@ 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_I2C1_SMBUS_Init+0x78>)
 8000744:	2200      	movs	r2, #0
 8000746:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <MX_I2C1_SMBUS_Init+0x78>)
 800074a:	f248 1286 	movw	r2, #33158	@ 0x8186
 800074e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000750:	4808      	ldr	r0, [pc, #32]	@ (8000774 <MX_I2C1_SMBUS_Init+0x78>)
 8000752:	f002 fed5 	bl	8003500 <HAL_SMBUS_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 800075c:	f000 f894 	bl	8000888 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_I2C1_SMBUS_Init+0x78>)
 8000762:	f002 ff85 	bl	8003670 <HAL_SMBUS_EnableAlert_IT>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C1_SMBUS_Init+0x74>
  {
    Error_Handler();
 800076c:	f000 f88c 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000b4 	.word	0x200000b4
 8000778:	40005400 	.word	0x40005400
 800077c:	00b07cb4 	.word	0x00b07cb4

08000780 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_USART1_UART_Init+0x58>)
 8000786:	4a15      	ldr	r2, [pc, #84]	@ (80007dc <MX_USART1_UART_Init+0x5c>)
 8000788:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800078a:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <MX_USART1_UART_Init+0x58>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_USART1_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_USART1_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_USART1_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_USART1_UART_Init+0x58>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <MX_USART1_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_USART1_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <MX_USART1_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_USART1_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_USART1_UART_Init+0x58>)
 80007c4:	f002 ffa7 	bl	8003716 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007ce:	f000 f85b 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000104 	.word	0x20000104
 80007dc:	40013800 	.word	0x40013800

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <MX_GPIO_Init+0xa0>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	4a21      	ldr	r2, [pc, #132]	@ (8000880 <MX_GPIO_Init+0xa0>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000802:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_GPIO_Init+0xa0>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_GPIO_Init+0xa0>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	4a1b      	ldr	r2, [pc, #108]	@ (8000880 <MX_GPIO_Init+0xa0>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_GPIO_Init+0xa0>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ON_Motor_Pin|ON_Arm_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	21c0      	movs	r1, #192	@ 0xc0
 800082a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800082e:	f001 fccb 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ON_12V_Pin|ON_5V_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2103      	movs	r1, #3
 8000836:	4813      	ldr	r0, [pc, #76]	@ (8000884 <MX_GPIO_Init+0xa4>)
 8000838:	f001 fcc6 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ON_Motor_Pin ON_Arm_Pin */
  GPIO_InitStruct.Pin = ON_Motor_Pin|ON_Arm_Pin;
 800083c:	23c0      	movs	r3, #192	@ 0xc0
 800083e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000856:	f001 fb4d 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_12V_Pin ON_5V_Pin */
  GPIO_InitStruct.Pin = ON_12V_Pin|ON_5V_Pin;
 800085a:	2303      	movs	r3, #3
 800085c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	4619      	mov	r1, r3
 8000870:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_GPIO_Init+0xa4>)
 8000872:	f001 fb3f 	bl	8001ef4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000
 8000884:	48000400 	.word	0x48000400

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <Error_Handler+0x8>

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <HAL_MspInit+0x44>)
 800089c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800089e:	4a0e      	ldr	r2, [pc, #56]	@ (80008d8 <HAL_MspInit+0x44>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008a6:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <HAL_MspInit+0x44>)
 80008a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <HAL_MspInit+0x44>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b6:	4a08      	ldr	r2, [pc, #32]	@ (80008d8 <HAL_MspInit+0x44>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <HAL_MspInit+0x44>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b09e      	sub	sp, #120	@ 0x78
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	2254      	movs	r2, #84	@ 0x54
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f003 fba0 	bl	8004042 <memset>
  if(hadc->Instance==ADC1)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a25      	ldr	r2, [pc, #148]	@ (800099c <HAL_ADC_MspInit+0xc0>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d143      	bne.n	8000994 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800090c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000910:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000912:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000916:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000918:	2301      	movs	r3, #1
 800091a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800091c:	2301      	movs	r3, #1
 800091e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000920:	2310      	movs	r3, #16
 8000922:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000924:	2307      	movs	r3, #7
 8000926:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000928:	2302      	movs	r3, #2
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800092c:	2302      	movs	r3, #2
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000930:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000934:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	4618      	mov	r0, r3
 800093c:	f002 faf8 	bl	8002f30 <HAL_RCCEx_PeriphCLKConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000946:	f7ff ff9f 	bl	8000888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <HAL_ADC_MspInit+0xc4>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094e:	4a14      	ldr	r2, [pc, #80]	@ (80009a0 <HAL_ADC_MspInit+0xc4>)
 8000950:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000956:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <HAL_ADC_MspInit+0xc4>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_ADC_MspInit+0xc4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000966:	4a0e      	ldr	r2, [pc, #56]	@ (80009a0 <HAL_ADC_MspInit+0xc4>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096e:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <HAL_ADC_MspInit+0xc4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800097a:	233f      	movs	r3, #63	@ 0x3f
 800097c:	667b      	str	r3, [r7, #100]	@ 0x64
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800097e:	230b      	movs	r3, #11
 8000980:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800098a:	4619      	mov	r1, r3
 800098c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000990:	f001 fab0 	bl	8001ef4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000994:	bf00      	nop
 8000996:	3778      	adds	r7, #120	@ 0x78
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	50040000 	.word	0x50040000
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	@ 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a18      	ldr	r2, [pc, #96]	@ (8000a24 <HAL_CAN_MspInit+0x80>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d129      	bne.n	8000a1a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009c6:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <HAL_CAN_MspInit+0x84>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ca:	4a17      	ldr	r2, [pc, #92]	@ (8000a28 <HAL_CAN_MspInit+0x84>)
 80009cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009d2:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <HAL_CAN_MspInit+0x84>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <HAL_CAN_MspInit+0x84>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	4a11      	ldr	r2, [pc, #68]	@ (8000a28 <HAL_CAN_MspInit+0x84>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <HAL_CAN_MspInit+0x84>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009f6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a08:	2309      	movs	r3, #9
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a16:	f001 fa6d 	bl	8001ef4 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	@ 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40006400 	.word	0x40006400
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b0a0      	sub	sp, #128	@ 0x80
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a44:	f107 0318 	add.w	r3, r7, #24
 8000a48:	2254      	movs	r2, #84	@ 0x54
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f003 faf8 	bl	8004042 <memset>
  if(hsmbus->Instance==I2C1)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a2d      	ldr	r2, [pc, #180]	@ (8000b0c <HAL_SMBUS_MspInit+0xe0>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d153      	bne.n	8000b04 <HAL_SMBUS_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a5c:	2340      	movs	r3, #64	@ 0x40
 8000a5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f002 fa61 	bl	8002f30 <HAL_RCCEx_PeriphCLKConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 8000a74:	f7ff ff08 	bl	8000888 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b25      	ldr	r3, [pc, #148]	@ (8000b10 <HAL_SMBUS_MspInit+0xe4>)
 8000a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7c:	4a24      	ldr	r2, [pc, #144]	@ (8000b10 <HAL_SMBUS_MspInit+0xe4>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a84:	4b22      	ldr	r3, [pc, #136]	@ (8000b10 <HAL_SMBUS_MspInit+0xe4>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a90:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <HAL_SMBUS_MspInit+0xe4>)
 8000a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a94:	4a1e      	ldr	r2, [pc, #120]	@ (8000b10 <HAL_SMBUS_MspInit+0xe4>)
 8000a96:	f043 0302 	orr.w	r3, r3, #2
 8000a9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <HAL_SMBUS_MspInit+0xe4>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    PB5     ------> I2C1_SMBA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aa8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000aac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aae:	2312      	movs	r3, #18
 8000ab0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aba:	2304      	movs	r3, #4
 8000abc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac8:	f001 fa14 	bl	8001ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000acc:	2320      	movs	r3, #32
 8000ace:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad0:	2312      	movs	r3, #18
 8000ad2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000adc:	2304      	movs	r3, #4
 8000ade:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480b      	ldr	r0, [pc, #44]	@ (8000b14 <HAL_SMBUS_MspInit+0xe8>)
 8000ae8:	f001 fa04 	bl	8001ef4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <HAL_SMBUS_MspInit+0xe4>)
 8000aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af0:	4a07      	ldr	r2, [pc, #28]	@ (8000b10 <HAL_SMBUS_MspInit+0xe4>)
 8000af2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000af6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <HAL_SMBUS_MspInit+0xe4>)
 8000afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b04:	bf00      	nop
 8000b06:	3780      	adds	r7, #128	@ 0x80
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	40021000 	.word	0x40021000
 8000b14:	48000400 	.word	0x48000400

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b09e      	sub	sp, #120	@ 0x78
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	2254      	movs	r2, #84	@ 0x54
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 fa82 	bl	8004042 <memset>
  if(huart->Instance==USART1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a1e      	ldr	r2, [pc, #120]	@ (8000bbc <HAL_UART_MspInit+0xa4>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d135      	bne.n	8000bb4 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	4618      	mov	r0, r3
 8000b56:	f002 f9eb 	bl	8002f30 <HAL_RCCEx_PeriphCLKConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b60:	f7ff fe92 	bl	8000888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b64:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <HAL_UART_MspInit+0xa8>)
 8000b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b68:	4a15      	ldr	r2, [pc, #84]	@ (8000bc0 <HAL_UART_MspInit+0xa8>)
 8000b6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b70:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <HAL_UART_MspInit+0xa8>)
 8000b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <HAL_UART_MspInit+0xa8>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b80:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc0 <HAL_UART_MspInit+0xa8>)
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b88:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <HAL_UART_MspInit+0xa8>)
 8000b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b94:	23c0      	movs	r3, #192	@ 0xc0
 8000b96:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bac:	4619      	mov	r1, r3
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <HAL_UART_MspInit+0xac>)
 8000bb0:	f001 f9a0 	bl	8001ef4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000bb4:	bf00      	nop
 8000bb6:	3778      	adds	r7, #120	@ 0x78
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40013800 	.word	0x40013800
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	48000400 	.word	0x48000400

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <NMI_Handler+0x4>

08000bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <MemManage_Handler+0x4>

08000be0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <UsageFault_Handler+0x4>

08000bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1e:	f000 f893 	bl	8000d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c50:	f7ff ffea 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	@ (8000c8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	@ (8000c90 <LoopForever+0xe>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c98 <LoopForever+0x16>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f003 f9eb 	bl	8004054 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c7e:	f7ff fc1d 	bl	80004bc <main>

08000c82 <LoopForever>:

LoopForever:
    b LoopForever
 8000c82:	e7fe      	b.n	8000c82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c84:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c90:	0800410c 	.word	0x0800410c
  ldr r2, =_sbss
 8000c94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c98:	20000190 	.word	0x20000190

08000c9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC1_IRQHandler>

08000c9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f001 f8ef 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cae:	200f      	movs	r0, #15
 8000cb0:	f000 f80e 	bl	8000cd0 <HAL_InitTick>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d002      	beq.n	8000cc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	e001      	b.n	8000cc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc0:	f7ff fde8 	bl	8000894 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cdc:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <HAL_InitTick+0x6c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d023      	beq.n	8000d2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ce4:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <HAL_InitTick+0x70>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <HAL_InitTick+0x6c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 f8ed 	bl	8001eda <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10f      	bne.n	8000d26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b0f      	cmp	r3, #15
 8000d0a:	d809      	bhi.n	8000d20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d14:	f001 f8c5 	bl	8001ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d18:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <HAL_InitTick+0x74>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	e007      	b.n	8000d30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	e004      	b.n	8000d30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e001      	b.n	8000d30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000004 	.word	0x20000004

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	2000018c 	.word	0x2000018c

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	@ (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	2000018c 	.word	0x2000018c

08000d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff ffee 	bl	8000d70 <HAL_GetTick>
 8000d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000da0:	d005      	beq.n	8000dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000da2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dcc <HAL_Delay+0x44>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dae:	bf00      	nop
 8000db0:	f7ff ffde 	bl	8000d70 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d8f7      	bhi.n	8000db0 <HAL_Delay+0x28>
  {
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008

08000dd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	431a      	orrs	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	609a      	str	r2, [r3, #8]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3360      	adds	r3, #96	@ 0x60
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <LL_ADC_SetOffset+0x44>)
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	4313      	orrs	r3, r2
 8000e68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e70:	bf00      	nop
 8000e72:	371c      	adds	r7, #28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	03fff000 	.word	0x03fff000

08000e80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3360      	adds	r3, #96	@ 0x60
 8000e8e:	461a      	mov	r2, r3
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3360      	adds	r3, #96	@ 0x60
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ed6:	bf00      	nop
 8000ed8:	371c      	adds	r7, #28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b087      	sub	sp, #28
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3330      	adds	r3, #48	@ 0x30
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	4413      	add	r3, r2
 8000f00:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	f003 031f 	and.w	r3, r3, #31
 8000f0c:	211f      	movs	r1, #31
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	401a      	ands	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	0e9b      	lsrs	r3, r3, #26
 8000f1a:	f003 011f 	and.w	r1, r3, #31
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	f003 031f 	and.w	r3, r3, #31
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f2e:	bf00      	nop
 8000f30:	371c      	adds	r7, #28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b087      	sub	sp, #28
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3314      	adds	r3, #20
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	0e5b      	lsrs	r3, r3, #25
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	4413      	add	r3, r2
 8000f58:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	0d1b      	lsrs	r3, r3, #20
 8000f62:	f003 031f 	and.w	r3, r3, #31
 8000f66:	2107      	movs	r1, #7
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	401a      	ands	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	0d1b      	lsrs	r3, r3, #20
 8000f74:	f003 031f 	and.w	r3, r3, #31
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f84:	bf00      	nop
 8000f86:	371c      	adds	r7, #28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	401a      	ands	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0318 	and.w	r3, r3, #24
 8000fb2:	4908      	ldr	r1, [pc, #32]	@ (8000fd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000fb4:	40d9      	lsrs	r1, r3
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	400b      	ands	r3, r1
 8000fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	0007ffff 	.word	0x0007ffff

08000fd8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000fe8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	6093      	str	r3, [r2, #8]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800100c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001010:	d101      	bne.n	8001016 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001034:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001038:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001060:	d101      	bne.n	8001066 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b01      	cmp	r3, #1
 8001086:	d101      	bne.n	800108c <LL_ADC_IsEnabled+0x18>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <LL_ADC_IsEnabled+0x1a>
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	d101      	bne.n	80010b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d101      	bne.n	80010d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e126      	b.n	8001350 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800110c:	2b00      	cmp	r3, #0
 800110e:	d109      	bne.n	8001124 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff fbe3 	bl	80008dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff67 	bl	8000ffc <LL_ADC_IsDeepPowerDownEnabled>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d004      	beq.n	800113e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff4d 	bl	8000fd8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff82 	bl	800104c <LL_ADC_IsInternalRegulatorEnabled>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d115      	bne.n	800117a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff66 	bl	8001024 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001158:	4b7f      	ldr	r3, [pc, #508]	@ (8001358 <HAL_ADC_Init+0x270>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	099b      	lsrs	r3, r3, #6
 800115e:	4a7f      	ldr	r2, [pc, #508]	@ (800135c <HAL_ADC_Init+0x274>)
 8001160:	fba2 2303 	umull	r2, r3, r2, r3
 8001164:	099b      	lsrs	r3, r3, #6
 8001166:	3301      	adds	r3, #1
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800116c:	e002      	b.n	8001174 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3b01      	subs	r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f9      	bne.n	800116e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff64 	bl	800104c <LL_ADC_IsInternalRegulatorEnabled>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10d      	bne.n	80011a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800118e:	f043 0210 	orr.w	r2, r3, #16
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119a:	f043 0201 	orr.w	r2, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff75 	bl	800109a <LL_ADC_REG_IsConversionOngoing>
 80011b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f040 80bf 	bne.w	800133e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f040 80bb 	bne.w	800133e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80011d0:	f043 0202 	orr.w	r2, r3, #2
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff49 	bl	8001074 <LL_ADC_IsEnabled>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10b      	bne.n	8001200 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011e8:	485d      	ldr	r0, [pc, #372]	@ (8001360 <HAL_ADC_Init+0x278>)
 80011ea:	f7ff ff43 	bl	8001074 <LL_ADC_IsEnabled>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d105      	bne.n	8001200 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4619      	mov	r1, r3
 80011fa:	485a      	ldr	r0, [pc, #360]	@ (8001364 <HAL_ADC_Init+0x27c>)
 80011fc:	f7ff fde8 	bl	8000dd0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7e5b      	ldrb	r3, [r3, #25]
 8001204:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800120a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001210:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001216:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800121e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 3020 	ldrb.w	r3, [r3, #32]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d106      	bne.n	800123c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001232:	3b01      	subs	r3, #1
 8001234:	045b      	lsls	r3, r3, #17
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001240:	2b00      	cmp	r3, #0
 8001242:	d009      	beq.n	8001258 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001248:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001250:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	4b42      	ldr	r3, [pc, #264]	@ (8001368 <HAL_ADC_Init+0x280>)
 8001260:	4013      	ands	r3, r2
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	6812      	ldr	r2, [r2, #0]
 8001266:	69b9      	ldr	r1, [r7, #24]
 8001268:	430b      	orrs	r3, r1
 800126a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff25 	bl	80010c0 <LL_ADC_INJ_IsConversionOngoing>
 8001276:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d13d      	bne.n	80012fa <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d13a      	bne.n	80012fa <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001288:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001290:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80012a0:	f023 0302 	bic.w	r3, r3, #2
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6812      	ldr	r2, [r2, #0]
 80012a8:	69b9      	ldr	r1, [r7, #24]
 80012aa:	430b      	orrs	r3, r1
 80012ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d118      	bne.n	80012ea <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80012c2:	f023 0304 	bic.w	r3, r3, #4
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80012ce:	4311      	orrs	r1, r2
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80012d4:	4311      	orrs	r1, r2
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80012da:	430a      	orrs	r2, r1
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0201 	orr.w	r2, r2, #1
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	e007      	b.n	80012fa <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	691a      	ldr	r2, [r3, #16]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0201 	bic.w	r2, r2, #1
 80012f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d10c      	bne.n	800131c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001308:	f023 010f 	bic.w	r1, r3, #15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	1e5a      	subs	r2, r3, #1
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	631a      	str	r2, [r3, #48]	@ 0x30
 800131a:	e007      	b.n	800132c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 020f 	bic.w	r2, r2, #15
 800132a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001330:	f023 0303 	bic.w	r3, r3, #3
 8001334:	f043 0201 	orr.w	r2, r3, #1
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	655a      	str	r2, [r3, #84]	@ 0x54
 800133c:	e007      	b.n	800134e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001342:	f043 0210 	orr.w	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800134e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000000 	.word	0x20000000
 800135c:	053e2d63 	.word	0x053e2d63
 8001360:	50040000 	.word	0x50040000
 8001364:	50040300 	.word	0x50040300
 8001368:	fff0c007 	.word	0xfff0c007

0800136c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0b6      	sub	sp, #216	@ 0xd8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <HAL_ADC_ConfigChannel+0x22>
 800138a:	2302      	movs	r3, #2
 800138c:	e3bb      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x79a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fe7d 	bl	800109a <LL_ADC_REG_IsConversionOngoing>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 83a0 	bne.w	8001ae8 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b05      	cmp	r3, #5
 80013b6:	d824      	bhi.n	8001402 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	3b02      	subs	r3, #2
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d81b      	bhi.n	80013fa <HAL_ADC_ConfigChannel+0x8e>
 80013c2:	a201      	add	r2, pc, #4	@ (adr r2, 80013c8 <HAL_ADC_ConfigChannel+0x5c>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	080013d9 	.word	0x080013d9
 80013cc:	080013e1 	.word	0x080013e1
 80013d0:	080013e9 	.word	0x080013e9
 80013d4:	080013f1 	.word	0x080013f1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80013d8:	230c      	movs	r3, #12
 80013da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80013de:	e010      	b.n	8001402 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80013e0:	2312      	movs	r3, #18
 80013e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80013e6:	e00c      	b.n	8001402 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80013e8:	2318      	movs	r3, #24
 80013ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80013ee:	e008      	b.n	8001402 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80013f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80013f8:	e003      	b.n	8001402 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80013fa:	2306      	movs	r3, #6
 80013fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001400:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001410:	f7ff fd67 	bl	8000ee2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fe3e 	bl	800109a <LL_ADC_REG_IsConversionOngoing>
 800141e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fe4a 	bl	80010c0 <LL_ADC_INJ_IsConversionOngoing>
 800142c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001430:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001434:	2b00      	cmp	r3, #0
 8001436:	f040 81a4 	bne.w	8001782 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800143a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800143e:	2b00      	cmp	r3, #0
 8001440:	f040 819f 	bne.w	8001782 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	6819      	ldr	r1, [r3, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	461a      	mov	r2, r3
 8001452:	f7ff fd72 	bl	8000f3a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	695a      	ldr	r2, [r3, #20]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	2b04      	cmp	r3, #4
 8001476:	d00a      	beq.n	800148e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6919      	ldr	r1, [r3, #16]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001488:	f7ff fcd6 	bl	8000e38 <LL_ADC_SetOffset>
 800148c:	e179      	b.n	8001782 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fcf3 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10a      	bne.n	80014ba <HAL_ADC_ConfigChannel+0x14e>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fce8 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	0e9b      	lsrs	r3, r3, #26
 80014b4:	f003 021f 	and.w	r2, r3, #31
 80014b8:	e01e      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x18c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fcdd 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80014d0:	fa93 f3a3 	rbit	r3, r3
 80014d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80014dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80014e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80014e8:	2320      	movs	r3, #32
 80014ea:	e004      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80014ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80014f0:	fab3 f383 	clz	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001500:	2b00      	cmp	r3, #0
 8001502:	d105      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x1a4>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	0e9b      	lsrs	r3, r3, #26
 800150a:	f003 031f 	and.w	r3, r3, #31
 800150e:	e018      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1d6>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800151c:	fa93 f3a3 	rbit	r3, r3
 8001520:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001524:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001528:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800152c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001534:	2320      	movs	r3, #32
 8001536:	e004      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001538:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800153c:	fab3 f383 	clz	r3, r3
 8001540:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001542:	429a      	cmp	r2, r3
 8001544:	d106      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fcac 	bl	8000eac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fc90 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10a      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x214>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2101      	movs	r1, #1
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fc85 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	0e9b      	lsrs	r3, r3, #26
 800157a:	f003 021f 	and.w	r2, r3, #31
 800157e:	e01e      	b.n	80015be <HAL_ADC_ConfigChannel+0x252>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2101      	movs	r1, #1
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fc7a 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800159e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80015a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80015a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80015ae:	2320      	movs	r3, #32
 80015b0:	e004      	b.n	80015bc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80015b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80015b6:	fab3 f383 	clz	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d105      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x26a>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	0e9b      	lsrs	r3, r3, #26
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	e018      	b.n	8001608 <HAL_ADC_ConfigChannel+0x29c>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80015e2:	fa93 f3a3 	rbit	r3, r3
 80015e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80015ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80015f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80015fa:	2320      	movs	r3, #32
 80015fc:	e004      	b.n	8001608 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80015fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001602:	fab3 f383 	clz	r3, r3
 8001606:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001608:	429a      	cmp	r2, r3
 800160a:	d106      	bne.n	800161a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2200      	movs	r2, #0
 8001612:	2101      	movs	r1, #1
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fc49 	bl	8000eac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2102      	movs	r1, #2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fc2d 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10a      	bne.n	8001646 <HAL_ADC_ConfigChannel+0x2da>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2102      	movs	r1, #2
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fc22 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	0e9b      	lsrs	r3, r3, #26
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	e01e      	b.n	8001684 <HAL_ADC_ConfigChannel+0x318>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2102      	movs	r1, #2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fc17 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001658:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800165c:	fa93 f3a3 	rbit	r3, r3
 8001660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001664:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001668:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800166c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001674:	2320      	movs	r3, #32
 8001676:	e004      	b.n	8001682 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001678:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800167c:	fab3 f383 	clz	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800168c:	2b00      	cmp	r3, #0
 800168e:	d105      	bne.n	800169c <HAL_ADC_ConfigChannel+0x330>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0e9b      	lsrs	r3, r3, #26
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	e014      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x35a>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80016a4:	fa93 f3a3 	rbit	r3, r3
 80016a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80016aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80016b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80016b8:	2320      	movs	r3, #32
 80016ba:	e004      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80016bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d106      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2200      	movs	r2, #0
 80016d0:	2102      	movs	r1, #2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fbea 	bl	8000eac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2103      	movs	r1, #3
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fbce 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10a      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x398>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2103      	movs	r1, #3
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fbc3 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	0e9b      	lsrs	r3, r3, #26
 80016fe:	f003 021f 	and.w	r2, r3, #31
 8001702:	e017      	b.n	8001734 <HAL_ADC_ConfigChannel+0x3c8>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2103      	movs	r1, #3
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fbb8 	bl	8000e80 <LL_ADC_GetOffsetChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001714:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800171c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800171e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001720:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001726:	2320      	movs	r3, #32
 8001728:	e003      	b.n	8001732 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800172a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800172c:	fab3 f383 	clz	r3, r3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800173c:	2b00      	cmp	r3, #0
 800173e:	d105      	bne.n	800174c <HAL_ADC_ConfigChannel+0x3e0>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	0e9b      	lsrs	r3, r3, #26
 8001746:	f003 031f 	and.w	r3, r3, #31
 800174a:	e011      	b.n	8001770 <HAL_ADC_ConfigChannel+0x404>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800175a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800175c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800175e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001764:	2320      	movs	r3, #32
 8001766:	e003      	b.n	8001770 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001768:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800176a:	fab3 f383 	clz	r3, r3
 800176e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001770:	429a      	cmp	r2, r3
 8001772:	d106      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2200      	movs	r2, #0
 800177a:	2103      	movs	r1, #3
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fb95 	bl	8000eac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fc74 	bl	8001074 <LL_ADC_IsEnabled>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	f040 8140 	bne.w	8001a14 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	6819      	ldr	r1, [r3, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	461a      	mov	r2, r3
 80017a2:	f7ff fbf5 	bl	8000f90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	4a8f      	ldr	r2, [pc, #572]	@ (80019e8 <HAL_ADC_ConfigChannel+0x67c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	f040 8131 	bne.w	8001a14 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10b      	bne.n	80017da <HAL_ADC_ConfigChannel+0x46e>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	0e9b      	lsrs	r3, r3, #26
 80017c8:	3301      	adds	r3, #1
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	2b09      	cmp	r3, #9
 80017d0:	bf94      	ite	ls
 80017d2:	2301      	movls	r3, #1
 80017d4:	2300      	movhi	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	e019      	b.n	800180e <HAL_ADC_ConfigChannel+0x4a2>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017e2:	fa93 f3a3 	rbit	r3, r3
 80017e6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80017e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80017ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80017f2:	2320      	movs	r3, #32
 80017f4:	e003      	b.n	80017fe <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80017f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017f8:	fab3 f383 	clz	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	3301      	adds	r3, #1
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2b09      	cmp	r3, #9
 8001806:	bf94      	ite	ls
 8001808:	2301      	movls	r3, #1
 800180a:	2300      	movhi	r3, #0
 800180c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800180e:	2b00      	cmp	r3, #0
 8001810:	d079      	beq.n	8001906 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800181a:	2b00      	cmp	r3, #0
 800181c:	d107      	bne.n	800182e <HAL_ADC_ConfigChannel+0x4c2>
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0e9b      	lsrs	r3, r3, #26
 8001824:	3301      	adds	r3, #1
 8001826:	069b      	lsls	r3, r3, #26
 8001828:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800182c:	e015      	b.n	800185a <HAL_ADC_ConfigChannel+0x4ee>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800183c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800183e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001840:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001846:	2320      	movs	r3, #32
 8001848:	e003      	b.n	8001852 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800184a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800184c:	fab3 f383 	clz	r3, r3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	3301      	adds	r3, #1
 8001854:	069b      	lsls	r3, r3, #26
 8001856:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <HAL_ADC_ConfigChannel+0x50e>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	0e9b      	lsrs	r3, r3, #26
 800186c:	3301      	adds	r3, #1
 800186e:	f003 031f 	and.w	r3, r3, #31
 8001872:	2101      	movs	r1, #1
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	e017      	b.n	80018aa <HAL_ADC_ConfigChannel+0x53e>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800188a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800188c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001892:	2320      	movs	r3, #32
 8001894:	e003      	b.n	800189e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001898:	fab3 f383 	clz	r3, r3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	3301      	adds	r3, #1
 80018a0:	f003 031f 	and.w	r3, r3, #31
 80018a4:	2101      	movs	r1, #1
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	ea42 0103 	orr.w	r1, r2, r3
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10a      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x564>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	0e9b      	lsrs	r3, r3, #26
 80018c0:	3301      	adds	r3, #1
 80018c2:	f003 021f 	and.w	r2, r3, #31
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	051b      	lsls	r3, r3, #20
 80018ce:	e018      	b.n	8001902 <HAL_ADC_ConfigChannel+0x596>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80018de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80018e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80018e8:	2320      	movs	r3, #32
 80018ea:	e003      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80018ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018ee:	fab3 f383 	clz	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	3301      	adds	r3, #1
 80018f6:	f003 021f 	and.w	r2, r3, #31
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001902:	430b      	orrs	r3, r1
 8001904:	e081      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800190e:	2b00      	cmp	r3, #0
 8001910:	d107      	bne.n	8001922 <HAL_ADC_ConfigChannel+0x5b6>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	0e9b      	lsrs	r3, r3, #26
 8001918:	3301      	adds	r3, #1
 800191a:	069b      	lsls	r3, r3, #26
 800191c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001920:	e015      	b.n	800194e <HAL_ADC_ConfigChannel+0x5e2>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800192a:	fa93 f3a3 	rbit	r3, r3
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800193a:	2320      	movs	r3, #32
 800193c:	e003      	b.n	8001946 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800193e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	3301      	adds	r3, #1
 8001948:	069b      	lsls	r3, r3, #26
 800194a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001956:	2b00      	cmp	r3, #0
 8001958:	d109      	bne.n	800196e <HAL_ADC_ConfigChannel+0x602>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	0e9b      	lsrs	r3, r3, #26
 8001960:	3301      	adds	r3, #1
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	2101      	movs	r1, #1
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	e017      	b.n	800199e <HAL_ADC_ConfigChannel+0x632>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	61bb      	str	r3, [r7, #24]
  return result;
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001986:	2320      	movs	r3, #32
 8001988:	e003      	b.n	8001992 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	3301      	adds	r3, #1
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	2101      	movs	r1, #1
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	ea42 0103 	orr.w	r1, r2, r3
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10d      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x65e>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	0e9b      	lsrs	r3, r3, #26
 80019b4:	3301      	adds	r3, #1
 80019b6:	f003 021f 	and.w	r2, r3, #31
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	3b1e      	subs	r3, #30
 80019c2:	051b      	lsls	r3, r3, #20
 80019c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019c8:	e01e      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x69c>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	60fb      	str	r3, [r7, #12]
  return result;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d104      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80019e2:	2320      	movs	r3, #32
 80019e4:	e006      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x688>
 80019e6:	bf00      	nop
 80019e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	f003 021f 	and.w	r2, r3, #31
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	3b1e      	subs	r3, #30
 8001a02:	051b      	lsls	r3, r3, #20
 8001a04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a08:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f7ff fa93 	bl	8000f3a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b3d      	ldr	r3, [pc, #244]	@ (8001b10 <HAL_ADC_ConfigChannel+0x7a4>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d06c      	beq.n	8001afa <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a20:	483c      	ldr	r0, [pc, #240]	@ (8001b14 <HAL_ADC_ConfigChannel+0x7a8>)
 8001a22:	f7ff f9fb 	bl	8000e1c <LL_ADC_GetCommonPathInternalCh>
 8001a26:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a3a      	ldr	r2, [pc, #232]	@ (8001b18 <HAL_ADC_ConfigChannel+0x7ac>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d127      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d121      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a35      	ldr	r2, [pc, #212]	@ (8001b1c <HAL_ADC_ConfigChannel+0x7b0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d157      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a4e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a52:	4619      	mov	r1, r3
 8001a54:	482f      	ldr	r0, [pc, #188]	@ (8001b14 <HAL_ADC_ConfigChannel+0x7a8>)
 8001a56:	f7ff f9ce 	bl	8000df6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a5a:	4b31      	ldr	r3, [pc, #196]	@ (8001b20 <HAL_ADC_ConfigChannel+0x7b4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	099b      	lsrs	r3, r3, #6
 8001a60:	4a30      	ldr	r2, [pc, #192]	@ (8001b24 <HAL_ADC_ConfigChannel+0x7b8>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	099b      	lsrs	r3, r3, #6
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001a74:	e002      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f9      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a82:	e03a      	b.n	8001afa <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a27      	ldr	r2, [pc, #156]	@ (8001b28 <HAL_ADC_ConfigChannel+0x7bc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d113      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10d      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8001b1c <HAL_ADC_ConfigChannel+0x7b0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d12a      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001aa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001aa8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aac:	4619      	mov	r1, r3
 8001aae:	4819      	ldr	r0, [pc, #100]	@ (8001b14 <HAL_ADC_ConfigChannel+0x7a8>)
 8001ab0:	f7ff f9a1 	bl	8000df6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ab4:	e021      	b.n	8001afa <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1c      	ldr	r2, [pc, #112]	@ (8001b2c <HAL_ADC_ConfigChannel+0x7c0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d11c      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ac4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d116      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <HAL_ADC_ConfigChannel+0x7b0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d111      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ad6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ada:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480c      	ldr	r0, [pc, #48]	@ (8001b14 <HAL_ADC_ConfigChannel+0x7a8>)
 8001ae2:	f7ff f988 	bl	8000df6 <LL_ADC_SetCommonPathInternalCh>
 8001ae6:	e008      	b.n	8001afa <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aec:	f043 0220 	orr.w	r2, r3, #32
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b02:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	37d8      	adds	r7, #216	@ 0xd8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	80080000 	.word	0x80080000
 8001b14:	50040300 	.word	0x50040300
 8001b18:	c7520000 	.word	0xc7520000
 8001b1c:	50040000 	.word	0x50040000
 8001b20:	20000000 	.word	0x20000000
 8001b24:	053e2d63 	.word	0x053e2d63
 8001b28:	cb840000 	.word	0xcb840000
 8001b2c:	80000001 	.word	0x80000001

08001b30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e0ed      	b.n	8001d1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d102      	bne.n	8001b54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7fe ff28 	bl	80009a4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b64:	f7ff f904 	bl	8000d70 <HAL_GetTick>
 8001b68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b6a:	e012      	b.n	8001b92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b6c:	f7ff f900 	bl	8000d70 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b0a      	cmp	r3, #10
 8001b78:	d90b      	bls.n	8001b92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2205      	movs	r2, #5
 8001b8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e0c5      	b.n	8001d1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0e5      	beq.n	8001b6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0202 	bic.w	r2, r2, #2
 8001bae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb0:	f7ff f8de 	bl	8000d70 <HAL_GetTick>
 8001bb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bb6:	e012      	b.n	8001bde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bb8:	f7ff f8da 	bl	8000d70 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b0a      	cmp	r3, #10
 8001bc4:	d90b      	bls.n	8001bde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2205      	movs	r2, #5
 8001bd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e09f      	b.n	8001d1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1e5      	bne.n	8001bb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7e1b      	ldrb	r3, [r3, #24]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d108      	bne.n	8001c06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	e007      	b.n	8001c16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7e5b      	ldrb	r3, [r3, #25]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d108      	bne.n	8001c30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	e007      	b.n	8001c40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	7e9b      	ldrb	r3, [r3, #26]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d108      	bne.n	8001c5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0220 	orr.w	r2, r2, #32
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e007      	b.n	8001c6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0220 	bic.w	r2, r2, #32
 8001c68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	7edb      	ldrb	r3, [r3, #27]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d108      	bne.n	8001c84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0210 	bic.w	r2, r2, #16
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	e007      	b.n	8001c94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0210 	orr.w	r2, r2, #16
 8001c92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	7f1b      	ldrb	r3, [r3, #28]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d108      	bne.n	8001cae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0208 	orr.w	r2, r2, #8
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e007      	b.n	8001cbe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0208 	bic.w	r2, r2, #8
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	7f5b      	ldrb	r3, [r3, #29]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d108      	bne.n	8001cd8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0204 	orr.w	r2, r2, #4
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e007      	b.n	8001ce8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0204 	bic.w	r2, r2, #4
 8001ce6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	ea42 0103 	orr.w	r1, r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	1e5a      	subs	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	@ (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	@ (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	@ (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	@ (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	@ 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	@ 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e6c:	f7ff ff8e 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff47 	bl	8001d28 <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff5c 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff8e 	bl	8001de0 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5d 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffb0 	bl	8001e48 <SysTick_Config>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f02:	e148      	b.n	8002196 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2101      	movs	r1, #1
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	4013      	ands	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 813a 	beq.w	8002190 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d005      	beq.n	8001f34 <HAL_GPIO_Init+0x40>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d130      	bne.n	8001f96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	f003 0201 	and.w	r2, r3, #1
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d017      	beq.n	8001fd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	2203      	movs	r2, #3
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d123      	bne.n	8002026 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	08da      	lsrs	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3208      	adds	r2, #8
 8001fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	08da      	lsrs	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3208      	adds	r2, #8
 8002020:	6939      	ldr	r1, [r7, #16]
 8002022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0203 	and.w	r2, r3, #3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8094 	beq.w	8002190 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002068:	4b52      	ldr	r3, [pc, #328]	@ (80021b4 <HAL_GPIO_Init+0x2c0>)
 800206a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800206c:	4a51      	ldr	r2, [pc, #324]	@ (80021b4 <HAL_GPIO_Init+0x2c0>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6613      	str	r3, [r2, #96]	@ 0x60
 8002074:	4b4f      	ldr	r3, [pc, #316]	@ (80021b4 <HAL_GPIO_Init+0x2c0>)
 8002076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002080:	4a4d      	ldr	r2, [pc, #308]	@ (80021b8 <HAL_GPIO_Init+0x2c4>)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	220f      	movs	r2, #15
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020aa:	d00d      	beq.n	80020c8 <HAL_GPIO_Init+0x1d4>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a43      	ldr	r2, [pc, #268]	@ (80021bc <HAL_GPIO_Init+0x2c8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d007      	beq.n	80020c4 <HAL_GPIO_Init+0x1d0>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a42      	ldr	r2, [pc, #264]	@ (80021c0 <HAL_GPIO_Init+0x2cc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d101      	bne.n	80020c0 <HAL_GPIO_Init+0x1cc>
 80020bc:	2302      	movs	r3, #2
 80020be:	e004      	b.n	80020ca <HAL_GPIO_Init+0x1d6>
 80020c0:	2307      	movs	r3, #7
 80020c2:	e002      	b.n	80020ca <HAL_GPIO_Init+0x1d6>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <HAL_GPIO_Init+0x1d6>
 80020c8:	2300      	movs	r3, #0
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	f002 0203 	and.w	r2, r2, #3
 80020d0:	0092      	lsls	r2, r2, #2
 80020d2:	4093      	lsls	r3, r2
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020da:	4937      	ldr	r1, [pc, #220]	@ (80021b8 <HAL_GPIO_Init+0x2c4>)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	089b      	lsrs	r3, r3, #2
 80020e0:	3302      	adds	r3, #2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020e8:	4b36      	ldr	r3, [pc, #216]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800210c:	4a2d      	ldr	r2, [pc, #180]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002112:	4b2c      	ldr	r3, [pc, #176]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	43db      	mvns	r3, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002136:	4a23      	ldr	r2, [pc, #140]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800213c:	4b21      	ldr	r3, [pc, #132]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	43db      	mvns	r3, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002160:	4a18      	ldr	r2, [pc, #96]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002166:	4b17      	ldr	r3, [pc, #92]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	43db      	mvns	r3, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800218a:	4a0e      	ldr	r2, [pc, #56]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3301      	adds	r3, #1
 8002194:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f47f aeaf 	bne.w	8001f04 <HAL_GPIO_Init+0x10>
  }
}
 80021a6:	bf00      	nop
 80021a8:	bf00      	nop
 80021aa:	371c      	adds	r7, #28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40010000 	.word	0x40010000
 80021bc:	48000400 	.word	0x48000400
 80021c0:	48000800 	.word	0x48000800
 80021c4:	40010400 	.word	0x40010400

080021c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d8:	787b      	ldrb	r3, [r7, #1]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021e4:	e002      	b.n	80021ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021fc:	4b04      	ldr	r3, [pc, #16]	@ (8002210 <HAL_PWREx_GetVoltageRange+0x18>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40007000 	.word	0x40007000

08002214 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002222:	d130      	bne.n	8002286 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002224:	4b23      	ldr	r3, [pc, #140]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800222c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002230:	d038      	beq.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002232:	4b20      	ldr	r3, [pc, #128]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800223a:	4a1e      	ldr	r2, [pc, #120]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002240:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002242:	4b1d      	ldr	r3, [pc, #116]	@ (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2232      	movs	r2, #50	@ 0x32
 8002248:	fb02 f303 	mul.w	r3, r2, r3
 800224c:	4a1b      	ldr	r2, [pc, #108]	@ (80022bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	0c9b      	lsrs	r3, r3, #18
 8002254:	3301      	adds	r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002258:	e002      	b.n	8002260 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3b01      	subs	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002260:	4b14      	ldr	r3, [pc, #80]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800226c:	d102      	bne.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x60>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f2      	bne.n	800225a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002274:	4b0f      	ldr	r3, [pc, #60]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002280:	d110      	bne.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e00f      	b.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002286:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800228e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002292:	d007      	beq.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002294:	4b07      	ldr	r3, [pc, #28]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800229c:	4a05      	ldr	r2, [pc, #20]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800229e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40007000 	.word	0x40007000
 80022b8:	20000000 	.word	0x20000000
 80022bc:	431bde83 	.word	0x431bde83

080022c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f000 bc02 	b.w	8002ad8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d4:	4b96      	ldr	r3, [pc, #600]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022de:	4b94      	ldr	r3, [pc, #592]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80e4 	beq.w	80024be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <HAL_RCC_OscConfig+0x4c>
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2b0c      	cmp	r3, #12
 8002300:	f040 808b 	bne.w	800241a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2b01      	cmp	r3, #1
 8002308:	f040 8087 	bne.w	800241a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800230c:	4b88      	ldr	r3, [pc, #544]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_OscConfig+0x64>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e3d9      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1a      	ldr	r2, [r3, #32]
 8002328:	4b81      	ldr	r3, [pc, #516]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d004      	beq.n	800233e <HAL_RCC_OscConfig+0x7e>
 8002334:	4b7e      	ldr	r3, [pc, #504]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800233c:	e005      	b.n	800234a <HAL_RCC_OscConfig+0x8a>
 800233e:	4b7c      	ldr	r3, [pc, #496]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800234a:	4293      	cmp	r3, r2
 800234c:	d223      	bcs.n	8002396 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fd8c 	bl	8002e70 <RCC_SetFlashLatencyFromMSIRange>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e3ba      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002362:	4b73      	ldr	r3, [pc, #460]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a72      	ldr	r2, [pc, #456]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002368:	f043 0308 	orr.w	r3, r3, #8
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b70      	ldr	r3, [pc, #448]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	496d      	ldr	r1, [pc, #436]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002380:	4b6b      	ldr	r3, [pc, #428]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	4968      	ldr	r1, [pc, #416]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
 8002394:	e025      	b.n	80023e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002396:	4b66      	ldr	r3, [pc, #408]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a65      	ldr	r2, [pc, #404]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800239c:	f043 0308 	orr.w	r3, r3, #8
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b63      	ldr	r3, [pc, #396]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4960      	ldr	r1, [pc, #384]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	495b      	ldr	r1, [pc, #364]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fd4c 	bl	8002e70 <RCC_SetFlashLatencyFromMSIRange>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e37a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e2:	f000 fc81 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 80023e6:	4602      	mov	r2, r0
 80023e8:	4b51      	ldr	r3, [pc, #324]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	4950      	ldr	r1, [pc, #320]	@ (8002534 <HAL_RCC_OscConfig+0x274>)
 80023f4:	5ccb      	ldrb	r3, [r1, r3]
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	fa22 f303 	lsr.w	r3, r2, r3
 80023fe:	4a4e      	ldr	r2, [pc, #312]	@ (8002538 <HAL_RCC_OscConfig+0x278>)
 8002400:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002402:	4b4e      	ldr	r3, [pc, #312]	@ (800253c <HAL_RCC_OscConfig+0x27c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe fc62 	bl	8000cd0 <HAL_InitTick>
 800240c:	4603      	mov	r3, r0
 800240e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d052      	beq.n	80024bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	e35e      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d032      	beq.n	8002488 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002422:	4b43      	ldr	r3, [pc, #268]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a42      	ldr	r2, [pc, #264]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800242e:	f7fe fc9f 	bl	8000d70 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002436:	f7fe fc9b 	bl	8000d70 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e347      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002448:	4b39      	ldr	r3, [pc, #228]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002454:	4b36      	ldr	r3, [pc, #216]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a35      	ldr	r2, [pc, #212]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800245a:	f043 0308 	orr.w	r3, r3, #8
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b33      	ldr	r3, [pc, #204]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4930      	ldr	r1, [pc, #192]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002472:	4b2f      	ldr	r3, [pc, #188]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	492b      	ldr	r1, [pc, #172]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
 8002486:	e01a      	b.n	80024be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002488:	4b29      	ldr	r3, [pc, #164]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a28      	ldr	r2, [pc, #160]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002494:	f7fe fc6c 	bl	8000d70 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800249c:	f7fe fc68 	bl	8000d70 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e314      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024ae:	4b20      	ldr	r3, [pc, #128]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x1dc>
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d073      	beq.n	80025b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_OscConfig+0x21c>
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d10e      	bne.n	80024f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d10b      	bne.n	80024f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	4b14      	ldr	r3, [pc, #80]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d063      	beq.n	80025b0 <HAL_RCC_OscConfig+0x2f0>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d15f      	bne.n	80025b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e2f1      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024fc:	d106      	bne.n	800250c <HAL_RCC_OscConfig+0x24c>
 80024fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a0b      	ldr	r2, [pc, #44]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e025      	b.n	8002558 <HAL_RCC_OscConfig+0x298>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002514:	d114      	bne.n	8002540 <HAL_RCC_OscConfig+0x280>
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a05      	ldr	r2, [pc, #20]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800251c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b03      	ldr	r3, [pc, #12]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a02      	ldr	r2, [pc, #8]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e013      	b.n	8002558 <HAL_RCC_OscConfig+0x298>
 8002530:	40021000 	.word	0x40021000
 8002534:	080040b4 	.word	0x080040b4
 8002538:	20000000 	.word	0x20000000
 800253c:	20000004 	.word	0x20000004
 8002540:	4ba0      	ldr	r3, [pc, #640]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a9f      	ldr	r2, [pc, #636]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b9d      	ldr	r3, [pc, #628]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a9c      	ldr	r2, [pc, #624]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe fc06 	bl	8000d70 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7fe fc02 	bl	8000d70 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	@ 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e2ae      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257a:	4b92      	ldr	r3, [pc, #584]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x2a8>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fbf2 	bl	8000d70 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fbee 	bl	8000d70 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	@ 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e29a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025a2:	4b88      	ldr	r3, [pc, #544]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x2d0>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d060      	beq.n	8002680 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_OscConfig+0x310>
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2b0c      	cmp	r3, #12
 80025c8:	d119      	bne.n	80025fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d116      	bne.n	80025fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d0:	4b7c      	ldr	r3, [pc, #496]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_OscConfig+0x328>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e277      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e8:	4b76      	ldr	r3, [pc, #472]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	061b      	lsls	r3, r3, #24
 80025f6:	4973      	ldr	r1, [pc, #460]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025fc:	e040      	b.n	8002680 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d023      	beq.n	800264e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002606:	4b6f      	ldr	r3, [pc, #444]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a6e      	ldr	r2, [pc, #440]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7fe fbad 	bl	8000d70 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261a:	f7fe fba9 	bl	8000d70 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e255      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800262c:	4b65      	ldr	r3, [pc, #404]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b62      	ldr	r3, [pc, #392]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	061b      	lsls	r3, r3, #24
 8002646:	495f      	ldr	r1, [pc, #380]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
 800264c:	e018      	b.n	8002680 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264e:	4b5d      	ldr	r3, [pc, #372]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a5c      	ldr	r2, [pc, #368]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7fe fb89 	bl	8000d70 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002662:	f7fe fb85 	bl	8000d70 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e231      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002674:	4b53      	ldr	r3, [pc, #332]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d03c      	beq.n	8002706 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01c      	beq.n	80026ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002694:	4b4b      	ldr	r3, [pc, #300]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800269a:	4a4a      	ldr	r2, [pc, #296]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7fe fb64 	bl	8000d70 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ac:	f7fe fb60 	bl	8000d70 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e20c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026be:	4b41      	ldr	r3, [pc, #260]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80026c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0ef      	beq.n	80026ac <HAL_RCC_OscConfig+0x3ec>
 80026cc:	e01b      	b.n	8002706 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ce:	4b3d      	ldr	r3, [pc, #244]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80026d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d4:	4a3b      	ldr	r2, [pc, #236]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80026d6:	f023 0301 	bic.w	r3, r3, #1
 80026da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026de:	f7fe fb47 	bl	8000d70 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e6:	f7fe fb43 	bl	8000d70 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e1ef      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f8:	4b32      	ldr	r3, [pc, #200]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80026fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1ef      	bne.n	80026e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80a6 	beq.w	8002860 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002714:	2300      	movs	r3, #0
 8002716:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002718:	4b2a      	ldr	r3, [pc, #168]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10d      	bne.n	8002740 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4b27      	ldr	r3, [pc, #156]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002728:	4a26      	ldr	r2, [pc, #152]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800272e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002730:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273c:	2301      	movs	r3, #1
 800273e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002740:	4b21      	ldr	r3, [pc, #132]	@ (80027c8 <HAL_RCC_OscConfig+0x508>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d118      	bne.n	800277e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800274c:	4b1e      	ldr	r3, [pc, #120]	@ (80027c8 <HAL_RCC_OscConfig+0x508>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a1d      	ldr	r2, [pc, #116]	@ (80027c8 <HAL_RCC_OscConfig+0x508>)
 8002752:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002756:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002758:	f7fe fb0a 	bl	8000d70 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002760:	f7fe fb06 	bl	8000d70 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e1b2      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002772:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <HAL_RCC_OscConfig+0x508>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d108      	bne.n	8002798 <HAL_RCC_OscConfig+0x4d8>
 8002786:	4b0f      	ldr	r3, [pc, #60]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278c:	4a0d      	ldr	r2, [pc, #52]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002796:	e029      	b.n	80027ec <HAL_RCC_OscConfig+0x52c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b05      	cmp	r3, #5
 800279e:	d115      	bne.n	80027cc <HAL_RCC_OscConfig+0x50c>
 80027a0:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a6:	4a07      	ldr	r2, [pc, #28]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027b0:	4b04      	ldr	r3, [pc, #16]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b6:	4a03      	ldr	r2, [pc, #12]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027c0:	e014      	b.n	80027ec <HAL_RCC_OscConfig+0x52c>
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40007000 	.word	0x40007000
 80027cc:	4b9a      	ldr	r3, [pc, #616]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d2:	4a99      	ldr	r2, [pc, #612]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027dc:	4b96      	ldr	r3, [pc, #600]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e2:	4a95      	ldr	r2, [pc, #596]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80027e4:	f023 0304 	bic.w	r3, r3, #4
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d016      	beq.n	8002822 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7fe fabc 	bl	8000d70 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7fe fab8 	bl	8000d70 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e162      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002812:	4b89      	ldr	r3, [pc, #548]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ed      	beq.n	80027fc <HAL_RCC_OscConfig+0x53c>
 8002820:	e015      	b.n	800284e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002822:	f7fe faa5 	bl	8000d70 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7fe faa1 	bl	8000d70 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e14b      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002840:	4b7d      	ldr	r3, [pc, #500]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1ed      	bne.n	800282a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800284e:	7ffb      	ldrb	r3, [r7, #31]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d105      	bne.n	8002860 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002854:	4b78      	ldr	r3, [pc, #480]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002858:	4a77      	ldr	r2, [pc, #476]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 800285a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800285e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b00      	cmp	r3, #0
 800286a:	d03c      	beq.n	80028e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01c      	beq.n	80028ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002874:	4b70      	ldr	r3, [pc, #448]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002876:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800287a:	4a6f      	ldr	r2, [pc, #444]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7fe fa74 	bl	8000d70 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800288c:	f7fe fa70 	bl	8000d70 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e11c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800289e:	4b66      	ldr	r3, [pc, #408]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80028a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0ef      	beq.n	800288c <HAL_RCC_OscConfig+0x5cc>
 80028ac:	e01b      	b.n	80028e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028ae:	4b62      	ldr	r3, [pc, #392]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80028b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028b4:	4a60      	ldr	r2, [pc, #384]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028be:	f7fe fa57 	bl	8000d70 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c6:	f7fe fa53 	bl	8000d70 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e0ff      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028d8:	4b57      	ldr	r3, [pc, #348]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80028da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1ef      	bne.n	80028c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80f3 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	f040 80c9 	bne.w	8002a8c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f003 0203 	and.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290a:	429a      	cmp	r2, r3
 800290c:	d12c      	bne.n	8002968 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002918:	3b01      	subs	r3, #1
 800291a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d123      	bne.n	8002968 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800292a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d11b      	bne.n	8002968 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d113      	bne.n	8002968 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294a:	085b      	lsrs	r3, r3, #1
 800294c:	3b01      	subs	r3, #1
 800294e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d109      	bne.n	8002968 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	3b01      	subs	r3, #1
 8002962:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d06b      	beq.n	8002a40 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d062      	beq.n	8002a34 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800296e:	4b32      	ldr	r3, [pc, #200]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0ac      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800297e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a2d      	ldr	r2, [pc, #180]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002984:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002988:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800298a:	f7fe f9f1 	bl	8000d70 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002992:	f7fe f9ed 	bl	8000d70 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e099      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a4:	4b24      	ldr	r3, [pc, #144]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f0      	bne.n	8002992 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029b0:	4b21      	ldr	r3, [pc, #132]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	4b21      	ldr	r3, [pc, #132]	@ (8002a3c <HAL_RCC_OscConfig+0x77c>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029c0:	3a01      	subs	r2, #1
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	4311      	orrs	r1, r2
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029ca:	0212      	lsls	r2, r2, #8
 80029cc:	4311      	orrs	r1, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029d2:	0852      	lsrs	r2, r2, #1
 80029d4:	3a01      	subs	r2, #1
 80029d6:	0552      	lsls	r2, r2, #21
 80029d8:	4311      	orrs	r1, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029de:	0852      	lsrs	r2, r2, #1
 80029e0:	3a01      	subs	r2, #1
 80029e2:	0652      	lsls	r2, r2, #25
 80029e4:	4311      	orrs	r1, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029ea:	06d2      	lsls	r2, r2, #27
 80029ec:	430a      	orrs	r2, r1
 80029ee:	4912      	ldr	r1, [pc, #72]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029f4:	4b10      	ldr	r3, [pc, #64]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80029fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a00:	4b0d      	ldr	r3, [pc, #52]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a0c      	ldr	r2, [pc, #48]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a0c:	f7fe f9b0 	bl	8000d70 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a14:	f7fe f9ac 	bl	8000d70 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e058      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a26:	4b04      	ldr	r3, [pc, #16]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a32:	e050      	b.n	8002ad6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e04f      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a40:	4b27      	ldr	r3, [pc, #156]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d144      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a4c:	4b24      	ldr	r3, [pc, #144]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a23      	ldr	r2, [pc, #140]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002a52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a58:	4b21      	ldr	r3, [pc, #132]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a20      	ldr	r2, [pc, #128]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002a5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a64:	f7fe f984 	bl	8000d70 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7fe f980 	bl	8000d70 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e02c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7e:	4b18      	ldr	r3, [pc, #96]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x7ac>
 8002a8a:	e024      	b.n	8002ad6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b0c      	cmp	r3, #12
 8002a90:	d01f      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a92:	4b13      	ldr	r3, [pc, #76]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a12      	ldr	r2, [pc, #72]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002a98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9e:	f7fe f967 	bl	8000d70 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa6:	f7fe f963 	bl	8000d70 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e00f      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab8:	4b09      	ldr	r3, [pc, #36]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f0      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002ac4:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	4905      	ldr	r1, [pc, #20]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002aca:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <HAL_RCC_OscConfig+0x824>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	60cb      	str	r3, [r1, #12]
 8002ad0:	e001      	b.n	8002ad6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	feeefffc 	.word	0xfeeefffc

08002ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0e7      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002afc:	4b75      	ldr	r3, [pc, #468]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d910      	bls.n	8002b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b72      	ldr	r3, [pc, #456]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 0207 	bic.w	r2, r3, #7
 8002b12:	4970      	ldr	r1, [pc, #448]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b6e      	ldr	r3, [pc, #440]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0cf      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d010      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	4b66      	ldr	r3, [pc, #408]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d908      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b48:	4b63      	ldr	r3, [pc, #396]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4960      	ldr	r1, [pc, #384]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d04c      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d121      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0a6      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b86:	4b54      	ldr	r3, [pc, #336]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d115      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e09a      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e08e      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bae:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e086      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bbe:	4b46      	ldr	r3, [pc, #280]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f023 0203 	bic.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4943      	ldr	r1, [pc, #268]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd0:	f7fe f8ce 	bl	8000d70 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7fe f8ca 	bl	8000d70 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e06e      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 020c 	and.w	r2, r3, #12
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d1eb      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d010      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	4b31      	ldr	r3, [pc, #196]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d208      	bcs.n	8002c2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	492b      	ldr	r1, [pc, #172]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c2e:	4b29      	ldr	r3, [pc, #164]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d210      	bcs.n	8002c5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3c:	4b25      	ldr	r3, [pc, #148]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 0207 	bic.w	r2, r3, #7
 8002c44:	4923      	ldr	r1, [pc, #140]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4c:	4b21      	ldr	r3, [pc, #132]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e036      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4918      	ldr	r1, [pc, #96]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c88:	4b13      	ldr	r3, [pc, #76]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4910      	ldr	r1, [pc, #64]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c9c:	f000 f824 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 030f 	and.w	r3, r3, #15
 8002cac:	490b      	ldr	r1, [pc, #44]	@ (8002cdc <HAL_RCC_ClockConfig+0x1f4>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb8:	4a09      	ldr	r2, [pc, #36]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1f8>)
 8002cba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cbc:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1fc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe f805 	bl	8000cd0 <HAL_InitTick>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cca:	7afb      	ldrb	r3, [r7, #11]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40022000 	.word	0x40022000
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	080040b4 	.word	0x080040b4
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	20000004 	.word	0x20000004

08002ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	@ 0x24
 8002cec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d00:	4b3b      	ldr	r3, [pc, #236]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x34>
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	d121      	bne.n	8002d5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d11e      	bne.n	8002d5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d1c:	4b34      	ldr	r3, [pc, #208]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d28:	4b31      	ldr	r3, [pc, #196]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d2e:	0a1b      	lsrs	r3, r3, #8
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	61fb      	str	r3, [r7, #28]
 8002d36:	e005      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d38:	4b2d      	ldr	r3, [pc, #180]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d44:	4a2b      	ldr	r2, [pc, #172]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10d      	bne.n	8002d70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d58:	e00a      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d102      	bne.n	8002d66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d60:	4b25      	ldr	r3, [pc, #148]	@ (8002df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	e004      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d6c:	4b23      	ldr	r3, [pc, #140]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8002d6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	d134      	bne.n	8002de0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d76:	4b1e      	ldr	r3, [pc, #120]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d003      	beq.n	8002d8e <HAL_RCC_GetSysClockFreq+0xa6>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d003      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0xac>
 8002d8c:	e005      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d90:	617b      	str	r3, [r7, #20]
      break;
 8002d92:	e005      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d94:	4b19      	ldr	r3, [pc, #100]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8002d96:	617b      	str	r3, [r7, #20]
      break;
 8002d98:	e002      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	617b      	str	r3, [r7, #20]
      break;
 8002d9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002da0:	4b13      	ldr	r3, [pc, #76]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	3301      	adds	r3, #1
 8002dac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dae:	4b10      	ldr	r3, [pc, #64]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	fb03 f202 	mul.w	r2, r3, r2
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	0e5b      	lsrs	r3, r3, #25
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002de0:	69bb      	ldr	r3, [r7, #24]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3724      	adds	r7, #36	@ 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	080040cc 	.word	0x080040cc
 8002df8:	00f42400 	.word	0x00f42400
 8002dfc:	007a1200 	.word	0x007a1200

08002e00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e04:	4b03      	ldr	r3, [pc, #12]	@ (8002e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000000 	.word	0x20000000

08002e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e1c:	f7ff fff0 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	0a1b      	lsrs	r3, r3, #8
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	4904      	ldr	r1, [pc, #16]	@ (8002e40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	080040c4 	.word	0x080040c4

08002e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e48:	f7ff ffda 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	0adb      	lsrs	r3, r3, #11
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	4904      	ldr	r1, [pc, #16]	@ (8002e6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e5a:	5ccb      	ldrb	r3, [r1, r3]
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	080040c4 	.word	0x080040c4

08002e70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e88:	f7ff f9b6 	bl	80021f8 <HAL_PWREx_GetVoltageRange>
 8002e8c:	6178      	str	r0, [r7, #20]
 8002e8e:	e014      	b.n	8002eba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e90:	4b25      	ldr	r3, [pc, #148]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e94:	4a24      	ldr	r2, [pc, #144]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e9c:	4b22      	ldr	r3, [pc, #136]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ea8:	f7ff f9a6 	bl	80021f8 <HAL_PWREx_GetVoltageRange>
 8002eac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eae:	4b1e      	ldr	r3, [pc, #120]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ec0:	d10b      	bne.n	8002eda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b80      	cmp	r3, #128	@ 0x80
 8002ec6:	d919      	bls.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ecc:	d902      	bls.n	8002ed4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ece:	2302      	movs	r3, #2
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	e013      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	e010      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b80      	cmp	r3, #128	@ 0x80
 8002ede:	d902      	bls.n	8002ee6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	e00a      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b80      	cmp	r3, #128	@ 0x80
 8002eea:	d102      	bne.n	8002ef2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eec:	2302      	movs	r3, #2
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	e004      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b70      	cmp	r3, #112	@ 0x70
 8002ef6:	d101      	bne.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ef8:	2301      	movs	r3, #1
 8002efa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002efc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 0207 	bic.w	r2, r3, #7
 8002f04:	4909      	ldr	r1, [pc, #36]	@ (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f0c:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d001      	beq.n	8002f1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40022000 	.word	0x40022000

08002f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f38:	2300      	movs	r3, #0
 8002f3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d031      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f50:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f54:	d01a      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002f56:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f5a:	d814      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d009      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f64:	d10f      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002f66:	4b5d      	ldr	r3, [pc, #372]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	4a5c      	ldr	r2, [pc, #368]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f70:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f72:	e00c      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f9ce 	bl	800331c <RCCEx_PLLSAI1_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f84:	e003      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	74fb      	strb	r3, [r7, #19]
      break;
 8002f8a:	e000      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002f8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f8e:	7cfb      	ldrb	r3, [r7, #19]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10b      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f94:	4b51      	ldr	r3, [pc, #324]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa2:	494e      	ldr	r1, [pc, #312]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002faa:	e001      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fac:	7cfb      	ldrb	r3, [r7, #19]
 8002fae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 809e 	beq.w	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fc2:	4b46      	ldr	r3, [pc, #280]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd8:	4b40      	ldr	r3, [pc, #256]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fe2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fe4:	4b3d      	ldr	r3, [pc, #244]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a39      	ldr	r2, [pc, #228]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ffe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003000:	f7fd feb6 	bl	8000d70 <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003006:	e009      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003008:	f7fd feb2 	bl	8000d70 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d902      	bls.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	74fb      	strb	r3, [r7, #19]
        break;
 800301a:	e005      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800301c:	4b30      	ldr	r3, [pc, #192]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0ef      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d15a      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800302e:	4b2b      	ldr	r3, [pc, #172]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003034:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003038:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01e      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	429a      	cmp	r2, r3
 8003048:	d019      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800304a:	4b24      	ldr	r3, [pc, #144]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003050:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003054:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003056:	4b21      	ldr	r3, [pc, #132]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305c:	4a1f      	ldr	r2, [pc, #124]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800305e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003062:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003066:	4b1d      	ldr	r3, [pc, #116]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306c:	4a1b      	ldr	r2, [pc, #108]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800306e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003072:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003076:	4a19      	ldr	r2, [pc, #100]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d016      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fd fe72 	bl	8000d70 <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800308e:	e00b      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7fd fe6e 	bl	8000d70 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d902      	bls.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	74fb      	strb	r3, [r7, #19]
            break;
 80030a6:	e006      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a8:	4b0c      	ldr	r3, [pc, #48]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0ec      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80030b6:	7cfb      	ldrb	r3, [r7, #19]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030bc:	4b07      	ldr	r3, [pc, #28]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ca:	4904      	ldr	r1, [pc, #16]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030d2:	e009      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	74bb      	strb	r3, [r7, #18]
 80030d8:	e006      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e4:	7cfb      	ldrb	r3, [r7, #19]
 80030e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e8:	7c7b      	ldrb	r3, [r7, #17]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d105      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ee:	4b8a      	ldr	r3, [pc, #552]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f2:	4a89      	ldr	r2, [pc, #548]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003106:	4b84      	ldr	r3, [pc, #528]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310c:	f023 0203 	bic.w	r2, r3, #3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4980      	ldr	r1, [pc, #512]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003128:	4b7b      	ldr	r3, [pc, #492]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312e:	f023 020c 	bic.w	r2, r3, #12
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	4978      	ldr	r1, [pc, #480]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800314a:	4b73      	ldr	r3, [pc, #460]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003150:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003158:	496f      	ldr	r1, [pc, #444]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800316c:	4b6a      	ldr	r3, [pc, #424]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003172:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800317a:	4967      	ldr	r1, [pc, #412]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800318e:	4b62      	ldr	r3, [pc, #392]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003194:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319c:	495e      	ldr	r1, [pc, #376]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031b0:	4b59      	ldr	r3, [pc, #356]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031be:	4956      	ldr	r1, [pc, #344]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031d2:	4b51      	ldr	r3, [pc, #324]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e0:	494d      	ldr	r1, [pc, #308]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d028      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031f4:	4b48      	ldr	r3, [pc, #288]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	4945      	ldr	r1, [pc, #276]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003212:	d106      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003214:	4b40      	ldr	r3, [pc, #256]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4a3f      	ldr	r2, [pc, #252]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800321a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800321e:	60d3      	str	r3, [r2, #12]
 8003220:	e011      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800322a:	d10c      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	2101      	movs	r1, #1
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f872 	bl	800331c <RCCEx_PLLSAI1_Config>
 8003238:	4603      	mov	r3, r0
 800323a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800323c:	7cfb      	ldrb	r3, [r7, #19]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003242:	7cfb      	ldrb	r3, [r7, #19]
 8003244:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d028      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003252:	4b31      	ldr	r3, [pc, #196]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003258:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003260:	492d      	ldr	r1, [pc, #180]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003270:	d106      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003272:	4b29      	ldr	r3, [pc, #164]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	4a28      	ldr	r2, [pc, #160]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003278:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800327c:	60d3      	str	r3, [r2, #12]
 800327e:	e011      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003284:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003288:	d10c      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3304      	adds	r3, #4
 800328e:	2101      	movs	r1, #1
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f843 	bl	800331c <RCCEx_PLLSAI1_Config>
 8003296:	4603      	mov	r3, r0
 8003298:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800329a:	7cfb      	ldrb	r3, [r7, #19]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80032a0:	7cfb      	ldrb	r3, [r7, #19]
 80032a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01c      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032b0:	4b19      	ldr	r3, [pc, #100]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032be:	4916      	ldr	r1, [pc, #88]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032ce:	d10c      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	2102      	movs	r1, #2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f820 	bl	800331c <RCCEx_PLLSAI1_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032e0:	7cfb      	ldrb	r3, [r7, #19]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80032e6:	7cfb      	ldrb	r3, [r7, #19]
 80032e8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032f6:	4b08      	ldr	r3, [pc, #32]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003304:	4904      	ldr	r1, [pc, #16]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800330c:	7cbb      	ldrb	r3, [r7, #18]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000

0800331c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800332a:	4b74      	ldr	r3, [pc, #464]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d018      	beq.n	8003368 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003336:	4b71      	ldr	r3, [pc, #452]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f003 0203 	and.w	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d10d      	bne.n	8003362 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
       ||
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800334e:	4b6b      	ldr	r3, [pc, #428]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	091b      	lsrs	r3, r3, #4
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
       ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d047      	beq.n	80033f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
 8003366:	e044      	b.n	80033f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b03      	cmp	r3, #3
 800336e:	d018      	beq.n	80033a2 <RCCEx_PLLSAI1_Config+0x86>
 8003370:	2b03      	cmp	r3, #3
 8003372:	d825      	bhi.n	80033c0 <RCCEx_PLLSAI1_Config+0xa4>
 8003374:	2b01      	cmp	r3, #1
 8003376:	d002      	beq.n	800337e <RCCEx_PLLSAI1_Config+0x62>
 8003378:	2b02      	cmp	r3, #2
 800337a:	d009      	beq.n	8003390 <RCCEx_PLLSAI1_Config+0x74>
 800337c:	e020      	b.n	80033c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800337e:	4b5f      	ldr	r3, [pc, #380]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d11d      	bne.n	80033c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800338e:	e01a      	b.n	80033c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003390:	4b5a      	ldr	r3, [pc, #360]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003398:	2b00      	cmp	r3, #0
 800339a:	d116      	bne.n	80033ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a0:	e013      	b.n	80033ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033a2:	4b56      	ldr	r3, [pc, #344]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10f      	bne.n	80033ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033ae:	4b53      	ldr	r3, [pc, #332]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033be:	e006      	b.n	80033ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
      break;
 80033c4:	e004      	b.n	80033d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033c6:	bf00      	nop
 80033c8:	e002      	b.n	80033d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033ca:	bf00      	nop
 80033cc:	e000      	b.n	80033d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10d      	bne.n	80033f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033d6:	4b49      	ldr	r3, [pc, #292]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6819      	ldr	r1, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	430b      	orrs	r3, r1
 80033ec:	4943      	ldr	r1, [pc, #268]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d17c      	bne.n	80034f2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033f8:	4b40      	ldr	r3, [pc, #256]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a3f      	ldr	r2, [pc, #252]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80033fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003404:	f7fd fcb4 	bl	8000d70 <HAL_GetTick>
 8003408:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800340a:	e009      	b.n	8003420 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800340c:	f7fd fcb0 	bl	8000d70 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d902      	bls.n	8003420 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	73fb      	strb	r3, [r7, #15]
        break;
 800341e:	e005      	b.n	800342c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003420:	4b36      	ldr	r3, [pc, #216]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1ef      	bne.n	800340c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d15f      	bne.n	80034f2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d110      	bne.n	800345a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003438:	4b30      	ldr	r3, [pc, #192]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003440:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6892      	ldr	r2, [r2, #8]
 8003448:	0211      	lsls	r1, r2, #8
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	68d2      	ldr	r2, [r2, #12]
 800344e:	06d2      	lsls	r2, r2, #27
 8003450:	430a      	orrs	r2, r1
 8003452:	492a      	ldr	r1, [pc, #168]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003454:	4313      	orrs	r3, r2
 8003456:	610b      	str	r3, [r1, #16]
 8003458:	e027      	b.n	80034aa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d112      	bne.n	8003486 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003460:	4b26      	ldr	r3, [pc, #152]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003468:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6892      	ldr	r2, [r2, #8]
 8003470:	0211      	lsls	r1, r2, #8
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6912      	ldr	r2, [r2, #16]
 8003476:	0852      	lsrs	r2, r2, #1
 8003478:	3a01      	subs	r2, #1
 800347a:	0552      	lsls	r2, r2, #21
 800347c:	430a      	orrs	r2, r1
 800347e:	491f      	ldr	r1, [pc, #124]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003480:	4313      	orrs	r3, r2
 8003482:	610b      	str	r3, [r1, #16]
 8003484:	e011      	b.n	80034aa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003486:	4b1d      	ldr	r3, [pc, #116]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800348e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6892      	ldr	r2, [r2, #8]
 8003496:	0211      	lsls	r1, r2, #8
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6952      	ldr	r2, [r2, #20]
 800349c:	0852      	lsrs	r2, r2, #1
 800349e:	3a01      	subs	r2, #1
 80034a0:	0652      	lsls	r2, r2, #25
 80034a2:	430a      	orrs	r2, r1
 80034a4:	4915      	ldr	r1, [pc, #84]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034aa:	4b14      	ldr	r3, [pc, #80]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a13      	ldr	r2, [pc, #76]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b6:	f7fd fc5b 	bl	8000d70 <HAL_GetTick>
 80034ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034bc:	e009      	b.n	80034d2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034be:	f7fd fc57 	bl	8000d70 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d902      	bls.n	80034d2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	73fb      	strb	r3, [r7, #15]
          break;
 80034d0:	e005      	b.n	80034de <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034d2:	4b0a      	ldr	r3, [pc, #40]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0ef      	beq.n	80034be <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d106      	bne.n	80034f2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034e4:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	4903      	ldr	r1, [pc, #12]	@ (80034fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40021000 	.word	0x40021000

08003500 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e0aa      	b.n	8003668 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fd fa82 	bl	8000a2c <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800354a:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695a      	ldr	r2, [r3, #20]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800355a:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800356a:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003574:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003584:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d012      	beq.n	80035b4 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d107      	bne.n	80035a6 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	e006      	b.n	80035b4 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80035b2:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d104      	bne.n	80035c6 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1a      	ldr	r2, [r3, #32]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fc:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8003602:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003608:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8003614:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8003616:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003620:	d110      	bne.n	8003644 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8003626:	2b00      	cmp	r3, #0
 8003628:	d004      	beq.n	8003634 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800362e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003632:	d107      	bne.n	8003644 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003642:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	649a      	str	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003686:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003690:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8003692:	2180      	movs	r1, #128	@ 0x80
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f805 	bl	80036a4 <SMBUS_Enable_IRQ>

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036c2:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036ca:	2b38      	cmp	r3, #56	@ 0x38
 80036cc:	d103      	bne.n	80036d6 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80036d4:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80036dc:	2bf2      	cmp	r3, #242	@ 0xf2
 80036de:	d103      	bne.n	80036e8 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80036e6:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f003 03d4 	and.w	r3, r3, #212	@ 0xd4
 80036ee:	2bd4      	cmp	r3, #212	@ 0xd4
 80036f0:	d103      	bne.n	80036fa <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80036f8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6819      	ldr	r1, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	430a      	orrs	r2, r1
 8003708:	601a      	str	r2, [r3, #0]
}
 800370a:	bf00      	nop
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e040      	b.n	80037aa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800372c:	2b00      	cmp	r3, #0
 800372e:	d106      	bne.n	800373e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7fd f9ed 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2224      	movs	r2, #36	@ 0x24
 8003742:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fa55 	bl	8003c0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f826 	bl	80037b4 <UART_SetConfig>
 8003768:	4603      	mov	r3, r0
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e01b      	b.n	80037aa <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003780:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003790:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0201 	orr.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fad4 	bl	8003d50 <UART_CheckIdleState>
 80037a8:	4603      	mov	r3, r0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037b8:	b08a      	sub	sp, #40	@ 0x28
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	4313      	orrs	r3, r2
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4bb4      	ldr	r3, [pc, #720]	@ (8003ab4 <UART_SetConfig+0x300>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	6812      	ldr	r2, [r2, #0]
 80037ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037ec:	430b      	orrs	r3, r1
 80037ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4aa9      	ldr	r2, [pc, #676]	@ (8003ab8 <UART_SetConfig+0x304>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d004      	beq.n	8003820 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381c:	4313      	orrs	r3, r2
 800381e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003830:	430a      	orrs	r2, r1
 8003832:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4aa0      	ldr	r2, [pc, #640]	@ (8003abc <UART_SetConfig+0x308>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d126      	bne.n	800388c <UART_SetConfig+0xd8>
 800383e:	4ba0      	ldr	r3, [pc, #640]	@ (8003ac0 <UART_SetConfig+0x30c>)
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	2b03      	cmp	r3, #3
 800384a:	d81b      	bhi.n	8003884 <UART_SetConfig+0xd0>
 800384c:	a201      	add	r2, pc, #4	@ (adr r2, 8003854 <UART_SetConfig+0xa0>)
 800384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003852:	bf00      	nop
 8003854:	08003865 	.word	0x08003865
 8003858:	08003875 	.word	0x08003875
 800385c:	0800386d 	.word	0x0800386d
 8003860:	0800387d 	.word	0x0800387d
 8003864:	2301      	movs	r3, #1
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800386a:	e080      	b.n	800396e <UART_SetConfig+0x1ba>
 800386c:	2302      	movs	r3, #2
 800386e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003872:	e07c      	b.n	800396e <UART_SetConfig+0x1ba>
 8003874:	2304      	movs	r3, #4
 8003876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800387a:	e078      	b.n	800396e <UART_SetConfig+0x1ba>
 800387c:	2308      	movs	r3, #8
 800387e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003882:	e074      	b.n	800396e <UART_SetConfig+0x1ba>
 8003884:	2310      	movs	r3, #16
 8003886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800388a:	e070      	b.n	800396e <UART_SetConfig+0x1ba>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a8c      	ldr	r2, [pc, #560]	@ (8003ac4 <UART_SetConfig+0x310>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d138      	bne.n	8003908 <UART_SetConfig+0x154>
 8003896:	4b8a      	ldr	r3, [pc, #552]	@ (8003ac0 <UART_SetConfig+0x30c>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389c:	f003 030c 	and.w	r3, r3, #12
 80038a0:	2b0c      	cmp	r3, #12
 80038a2:	d82d      	bhi.n	8003900 <UART_SetConfig+0x14c>
 80038a4:	a201      	add	r2, pc, #4	@ (adr r2, 80038ac <UART_SetConfig+0xf8>)
 80038a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038aa:	bf00      	nop
 80038ac:	080038e1 	.word	0x080038e1
 80038b0:	08003901 	.word	0x08003901
 80038b4:	08003901 	.word	0x08003901
 80038b8:	08003901 	.word	0x08003901
 80038bc:	080038f1 	.word	0x080038f1
 80038c0:	08003901 	.word	0x08003901
 80038c4:	08003901 	.word	0x08003901
 80038c8:	08003901 	.word	0x08003901
 80038cc:	080038e9 	.word	0x080038e9
 80038d0:	08003901 	.word	0x08003901
 80038d4:	08003901 	.word	0x08003901
 80038d8:	08003901 	.word	0x08003901
 80038dc:	080038f9 	.word	0x080038f9
 80038e0:	2300      	movs	r3, #0
 80038e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038e6:	e042      	b.n	800396e <UART_SetConfig+0x1ba>
 80038e8:	2302      	movs	r3, #2
 80038ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ee:	e03e      	b.n	800396e <UART_SetConfig+0x1ba>
 80038f0:	2304      	movs	r3, #4
 80038f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038f6:	e03a      	b.n	800396e <UART_SetConfig+0x1ba>
 80038f8:	2308      	movs	r3, #8
 80038fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038fe:	e036      	b.n	800396e <UART_SetConfig+0x1ba>
 8003900:	2310      	movs	r3, #16
 8003902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003906:	e032      	b.n	800396e <UART_SetConfig+0x1ba>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ab8 <UART_SetConfig+0x304>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d12a      	bne.n	8003968 <UART_SetConfig+0x1b4>
 8003912:	4b6b      	ldr	r3, [pc, #428]	@ (8003ac0 <UART_SetConfig+0x30c>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003918:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800391c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003920:	d01a      	beq.n	8003958 <UART_SetConfig+0x1a4>
 8003922:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003926:	d81b      	bhi.n	8003960 <UART_SetConfig+0x1ac>
 8003928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800392c:	d00c      	beq.n	8003948 <UART_SetConfig+0x194>
 800392e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003932:	d815      	bhi.n	8003960 <UART_SetConfig+0x1ac>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <UART_SetConfig+0x18c>
 8003938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800393c:	d008      	beq.n	8003950 <UART_SetConfig+0x19c>
 800393e:	e00f      	b.n	8003960 <UART_SetConfig+0x1ac>
 8003940:	2300      	movs	r3, #0
 8003942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003946:	e012      	b.n	800396e <UART_SetConfig+0x1ba>
 8003948:	2302      	movs	r3, #2
 800394a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800394e:	e00e      	b.n	800396e <UART_SetConfig+0x1ba>
 8003950:	2304      	movs	r3, #4
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003956:	e00a      	b.n	800396e <UART_SetConfig+0x1ba>
 8003958:	2308      	movs	r3, #8
 800395a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800395e:	e006      	b.n	800396e <UART_SetConfig+0x1ba>
 8003960:	2310      	movs	r3, #16
 8003962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003966:	e002      	b.n	800396e <UART_SetConfig+0x1ba>
 8003968:	2310      	movs	r3, #16
 800396a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a51      	ldr	r2, [pc, #324]	@ (8003ab8 <UART_SetConfig+0x304>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d17a      	bne.n	8003a6e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003978:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800397c:	2b08      	cmp	r3, #8
 800397e:	d824      	bhi.n	80039ca <UART_SetConfig+0x216>
 8003980:	a201      	add	r2, pc, #4	@ (adr r2, 8003988 <UART_SetConfig+0x1d4>)
 8003982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003986:	bf00      	nop
 8003988:	080039ad 	.word	0x080039ad
 800398c:	080039cb 	.word	0x080039cb
 8003990:	080039b5 	.word	0x080039b5
 8003994:	080039cb 	.word	0x080039cb
 8003998:	080039bb 	.word	0x080039bb
 800399c:	080039cb 	.word	0x080039cb
 80039a0:	080039cb 	.word	0x080039cb
 80039a4:	080039cb 	.word	0x080039cb
 80039a8:	080039c3 	.word	0x080039c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039ac:	f7ff fa34 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 80039b0:	61f8      	str	r0, [r7, #28]
        break;
 80039b2:	e010      	b.n	80039d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039b4:	4b44      	ldr	r3, [pc, #272]	@ (8003ac8 <UART_SetConfig+0x314>)
 80039b6:	61fb      	str	r3, [r7, #28]
        break;
 80039b8:	e00d      	b.n	80039d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ba:	f7ff f995 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 80039be:	61f8      	str	r0, [r7, #28]
        break;
 80039c0:	e009      	b.n	80039d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039c6:	61fb      	str	r3, [r7, #28]
        break;
 80039c8:	e005      	b.n	80039d6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80039d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 8107 	beq.w	8003bec <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	4413      	add	r3, r2
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d305      	bcc.n	80039fa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d903      	bls.n	8003a02 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a00:	e0f4      	b.n	8003bec <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	2200      	movs	r2, #0
 8003a06:	461c      	mov	r4, r3
 8003a08:	4615      	mov	r5, r2
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	022b      	lsls	r3, r5, #8
 8003a14:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a18:	0222      	lsls	r2, r4, #8
 8003a1a:	68f9      	ldr	r1, [r7, #12]
 8003a1c:	6849      	ldr	r1, [r1, #4]
 8003a1e:	0849      	lsrs	r1, r1, #1
 8003a20:	2000      	movs	r0, #0
 8003a22:	4688      	mov	r8, r1
 8003a24:	4681      	mov	r9, r0
 8003a26:	eb12 0a08 	adds.w	sl, r2, r8
 8003a2a:	eb43 0b09 	adc.w	fp, r3, r9
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a3c:	4650      	mov	r0, sl
 8003a3e:	4659      	mov	r1, fp
 8003a40:	f7fc fbc4 	bl	80001cc <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4613      	mov	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a52:	d308      	bcc.n	8003a66 <UART_SetConfig+0x2b2>
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a5a:	d204      	bcs.n	8003a66 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	60da      	str	r2, [r3, #12]
 8003a64:	e0c2      	b.n	8003bec <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a6c:	e0be      	b.n	8003bec <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a76:	d16a      	bne.n	8003b4e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003a78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d834      	bhi.n	8003aea <UART_SetConfig+0x336>
 8003a80:	a201      	add	r2, pc, #4	@ (adr r2, 8003a88 <UART_SetConfig+0x2d4>)
 8003a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a86:	bf00      	nop
 8003a88:	08003aad 	.word	0x08003aad
 8003a8c:	08003acd 	.word	0x08003acd
 8003a90:	08003ad5 	.word	0x08003ad5
 8003a94:	08003aeb 	.word	0x08003aeb
 8003a98:	08003adb 	.word	0x08003adb
 8003a9c:	08003aeb 	.word	0x08003aeb
 8003aa0:	08003aeb 	.word	0x08003aeb
 8003aa4:	08003aeb 	.word	0x08003aeb
 8003aa8:	08003ae3 	.word	0x08003ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aac:	f7ff f9b4 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 8003ab0:	61f8      	str	r0, [r7, #28]
        break;
 8003ab2:	e020      	b.n	8003af6 <UART_SetConfig+0x342>
 8003ab4:	efff69f3 	.word	0xefff69f3
 8003ab8:	40008000 	.word	0x40008000
 8003abc:	40013800 	.word	0x40013800
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40004400 	.word	0x40004400
 8003ac8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003acc:	f7ff f9ba 	bl	8002e44 <HAL_RCC_GetPCLK2Freq>
 8003ad0:	61f8      	str	r0, [r7, #28]
        break;
 8003ad2:	e010      	b.n	8003af6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad4:	4b4c      	ldr	r3, [pc, #304]	@ (8003c08 <UART_SetConfig+0x454>)
 8003ad6:	61fb      	str	r3, [r7, #28]
        break;
 8003ad8:	e00d      	b.n	8003af6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ada:	f7ff f905 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8003ade:	61f8      	str	r0, [r7, #28]
        break;
 8003ae0:	e009      	b.n	8003af6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ae6:	61fb      	str	r3, [r7, #28]
        break;
 8003ae8:	e005      	b.n	8003af6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003af4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d077      	beq.n	8003bec <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	005a      	lsls	r2, r3, #1
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	441a      	add	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b0f      	cmp	r3, #15
 8003b16:	d916      	bls.n	8003b46 <UART_SetConfig+0x392>
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b1e:	d212      	bcs.n	8003b46 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	f023 030f 	bic.w	r3, r3, #15
 8003b28:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	8afb      	ldrh	r3, [r7, #22]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	8afa      	ldrh	r2, [r7, #22]
 8003b42:	60da      	str	r2, [r3, #12]
 8003b44:	e052      	b.n	8003bec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b4c:	e04e      	b.n	8003bec <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d827      	bhi.n	8003ba6 <UART_SetConfig+0x3f2>
 8003b56:	a201      	add	r2, pc, #4	@ (adr r2, 8003b5c <UART_SetConfig+0x3a8>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b81 	.word	0x08003b81
 8003b60:	08003b89 	.word	0x08003b89
 8003b64:	08003b91 	.word	0x08003b91
 8003b68:	08003ba7 	.word	0x08003ba7
 8003b6c:	08003b97 	.word	0x08003b97
 8003b70:	08003ba7 	.word	0x08003ba7
 8003b74:	08003ba7 	.word	0x08003ba7
 8003b78:	08003ba7 	.word	0x08003ba7
 8003b7c:	08003b9f 	.word	0x08003b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b80:	f7ff f94a 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 8003b84:	61f8      	str	r0, [r7, #28]
        break;
 8003b86:	e014      	b.n	8003bb2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b88:	f7ff f95c 	bl	8002e44 <HAL_RCC_GetPCLK2Freq>
 8003b8c:	61f8      	str	r0, [r7, #28]
        break;
 8003b8e:	e010      	b.n	8003bb2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b90:	4b1d      	ldr	r3, [pc, #116]	@ (8003c08 <UART_SetConfig+0x454>)
 8003b92:	61fb      	str	r3, [r7, #28]
        break;
 8003b94:	e00d      	b.n	8003bb2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b96:	f7ff f8a7 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8003b9a:	61f8      	str	r0, [r7, #28]
        break;
 8003b9c:	e009      	b.n	8003bb2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ba2:	61fb      	str	r3, [r7, #28]
        break;
 8003ba4:	e005      	b.n	8003bb2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003bb0:	bf00      	nop
    }

    if (pclk != 0U)
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d019      	beq.n	8003bec <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	085a      	lsrs	r2, r3, #1
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	441a      	add	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b0f      	cmp	r3, #15
 8003bd0:	d909      	bls.n	8003be6 <UART_SetConfig+0x432>
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd8:	d205      	bcs.n	8003be6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60da      	str	r2, [r3, #12]
 8003be4:	e002      	b.n	8003bec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003bf8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3728      	adds	r7, #40	@ 0x28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c06:	bf00      	nop
 8003c08:	00f42400 	.word	0x00f42400

08003c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01a      	beq.n	8003d22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d0a:	d10a      	bne.n	8003d22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	605a      	str	r2, [r3, #4]
  }
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b098      	sub	sp, #96	@ 0x60
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d60:	f7fd f806 	bl	8000d70 <HAL_GetTick>
 8003d64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d12e      	bne.n	8003dd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f88c 	bl	8003ea0 <UART_WaitOnFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d021      	beq.n	8003dd2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003da2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e6      	bne.n	8003d8e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e062      	b.n	8003e98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d149      	bne.n	8003e74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003de0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de8:	2200      	movs	r2, #0
 8003dea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f856 	bl	8003ea0 <UART_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d03c      	beq.n	8003e74 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	623b      	str	r3, [r7, #32]
   return(result);
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e6      	bne.n	8003dfa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3308      	adds	r3, #8
 8003e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	e853 3f00 	ldrex	r3, [r3]
 8003e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0301 	bic.w	r3, r3, #1
 8003e42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3308      	adds	r3, #8
 8003e4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e4c:	61fa      	str	r2, [r7, #28]
 8003e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	69b9      	ldr	r1, [r7, #24]
 8003e52:	69fa      	ldr	r2, [r7, #28]
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	617b      	str	r3, [r7, #20]
   return(result);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e5      	bne.n	8003e2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e011      	b.n	8003e98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3758      	adds	r7, #88	@ 0x58
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb0:	e04f      	b.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003eb8:	d04b      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eba:	f7fc ff59 	bl	8000d70 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d302      	bcc.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e04e      	b.n	8003f72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d037      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b80      	cmp	r3, #128	@ 0x80
 8003ee6:	d034      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b40      	cmp	r3, #64	@ 0x40
 8003eec:	d031      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d110      	bne.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2208      	movs	r2, #8
 8003f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f838 	bl	8003f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e029      	b.n	8003f72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f2c:	d111      	bne.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 f81e 	bl	8003f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e00f      	b.n	8003f72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	bf0c      	ite	eq
 8003f62:	2301      	moveq	r3, #1
 8003f64:	2300      	movne	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d0a0      	beq.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b095      	sub	sp, #84	@ 0x54
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fa2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e6      	bne.n	8003f82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3308      	adds	r3, #8
 8003fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e5      	bne.n	8003fb4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d118      	bne.n	8004022 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f023 0310 	bic.w	r3, r3, #16
 8004004:	647b      	str	r3, [r7, #68]	@ 0x44
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6979      	ldr	r1, [r7, #20]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	613b      	str	r3, [r7, #16]
   return(result);
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e6      	bne.n	8003ff0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004036:	bf00      	nop
 8004038:	3754      	adds	r7, #84	@ 0x54
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <memset>:
 8004042:	4402      	add	r2, r0
 8004044:	4603      	mov	r3, r0
 8004046:	4293      	cmp	r3, r2
 8004048:	d100      	bne.n	800404c <memset+0xa>
 800404a:	4770      	bx	lr
 800404c:	f803 1b01 	strb.w	r1, [r3], #1
 8004050:	e7f9      	b.n	8004046 <memset+0x4>
	...

08004054 <__libc_init_array>:
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	4d0d      	ldr	r5, [pc, #52]	@ (800408c <__libc_init_array+0x38>)
 8004058:	4c0d      	ldr	r4, [pc, #52]	@ (8004090 <__libc_init_array+0x3c>)
 800405a:	1b64      	subs	r4, r4, r5
 800405c:	10a4      	asrs	r4, r4, #2
 800405e:	2600      	movs	r6, #0
 8004060:	42a6      	cmp	r6, r4
 8004062:	d109      	bne.n	8004078 <__libc_init_array+0x24>
 8004064:	4d0b      	ldr	r5, [pc, #44]	@ (8004094 <__libc_init_array+0x40>)
 8004066:	4c0c      	ldr	r4, [pc, #48]	@ (8004098 <__libc_init_array+0x44>)
 8004068:	f000 f818 	bl	800409c <_init>
 800406c:	1b64      	subs	r4, r4, r5
 800406e:	10a4      	asrs	r4, r4, #2
 8004070:	2600      	movs	r6, #0
 8004072:	42a6      	cmp	r6, r4
 8004074:	d105      	bne.n	8004082 <__libc_init_array+0x2e>
 8004076:	bd70      	pop	{r4, r5, r6, pc}
 8004078:	f855 3b04 	ldr.w	r3, [r5], #4
 800407c:	4798      	blx	r3
 800407e:	3601      	adds	r6, #1
 8004080:	e7ee      	b.n	8004060 <__libc_init_array+0xc>
 8004082:	f855 3b04 	ldr.w	r3, [r5], #4
 8004086:	4798      	blx	r3
 8004088:	3601      	adds	r6, #1
 800408a:	e7f2      	b.n	8004072 <__libc_init_array+0x1e>
 800408c:	08004104 	.word	0x08004104
 8004090:	08004104 	.word	0x08004104
 8004094:	08004104 	.word	0x08004104
 8004098:	08004108 	.word	0x08004108

0800409c <_init>:
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	bf00      	nop
 80040a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a2:	bc08      	pop	{r3}
 80040a4:	469e      	mov	lr, r3
 80040a6:	4770      	bx	lr

080040a8 <_fini>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	bf00      	nop
 80040ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ae:	bc08      	pop	{r3}
 80040b0:	469e      	mov	lr, r3
 80040b2:	4770      	bx	lr
